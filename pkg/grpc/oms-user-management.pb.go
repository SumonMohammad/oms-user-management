// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oms-user-management.proto

package grpc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PermissionType int32

const (
	PermissionType_UNSPECIFIED_Permission PermissionType = 0
)

var PermissionType_name = map[int32]string{
	0: "UNSPECIFIED_Permission",
}

var PermissionType_value = map[string]int32{
	"UNSPECIFIED_Permission": 0,
}

func (x PermissionType) String() string {
	return proto.EnumName(PermissionType_name, int32(x))
}

func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{0}
}

type HTTPMethods int32

const (
	HTTPMethods_GET     HTTPMethods = 0
	HTTPMethods_POST    HTTPMethods = 1
	HTTPMethods_PUT     HTTPMethods = 2
	HTTPMethods_DELETE  HTTPMethods = 3
	HTTPMethods_OPTIONS HTTPMethods = 4
	HTTPMethods_CONNECT HTTPMethods = 5
	HTTPMethods_HEAD    HTTPMethods = 6
	HTTPMethods_TRACE   HTTPMethods = 7
)

var HTTPMethods_name = map[int32]string{
	0: "GET",
	1: "POST",
	2: "PUT",
	3: "DELETE",
	4: "OPTIONS",
	5: "CONNECT",
	6: "HEAD",
	7: "TRACE",
}

var HTTPMethods_value = map[string]int32{
	"GET":     0,
	"POST":    1,
	"PUT":     2,
	"DELETE":  3,
	"OPTIONS": 4,
	"CONNECT": 5,
	"HEAD":    6,
	"TRACE":   7,
}

func (x HTTPMethods) String() string {
	return proto.EnumName(HTTPMethods_name, int32(x))
}

func (HTTPMethods) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{1}
}

type ActionType int32

const (
	ActionType_UNSPECIFIED     ActionType = 0
	ActionType_LOGIN           ActionType = 1
	ActionType_LOGOUT          ActionType = 2
	ActionType_CHANGE_PASSWORD ActionType = 3
	ActionType_ORDER           ActionType = 4
	ActionType_DEPOSIT         ActionType = 5
	ActionType_WITHDRAW        ActionType = 6
)

var ActionType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "LOGIN",
	2: "LOGOUT",
	3: "CHANGE_PASSWORD",
	4: "ORDER",
	5: "DEPOSIT",
	6: "WITHDRAW",
}

var ActionType_value = map[string]int32{
	"UNSPECIFIED":     0,
	"LOGIN":           1,
	"LOGOUT":          2,
	"CHANGE_PASSWORD": 3,
	"ORDER":           4,
	"DEPOSIT":         5,
	"WITHDRAW":        6,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{2}
}

type Status int32

const (
	Status_PENDING Status = 0
	Status_ACTIVE  Status = 1
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "ACTIVE",
}

var Status_value = map[string]int32{
	"PENDING": 0,
	"ACTIVE":  1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{3}
}

type TwsStatus int32

const (
	TwsStatus_ASSIGNED   TwsStatus = 0
	TwsStatus_UNASSIGNED TwsStatus = 1
)

var TwsStatus_name = map[int32]string{
	0: "ASSIGNED",
	1: "UNASSIGNED",
}

var TwsStatus_value = map[string]int32{
	"ASSIGNED":   0,
	"UNASSIGNED": 1,
}

func (x TwsStatus) String() string {
	return proto.EnumName(TwsStatus_name, int32(x))
}

func (TwsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{4}
}

// TraderGroup creation
type TradeRole int32

const (
	TradeRole_TRADE TradeRole = 0
	TradeRole_VIEW  TradeRole = 1
)

var TradeRole_name = map[int32]string{
	0: "TRADE",
	1: "VIEW",
}

var TradeRole_value = map[string]int32{
	"TRADE": 0,
	"VIEW":  1,
}

func (x TradeRole) String() string {
	return proto.EnumName(TradeRole_name, int32(x))
}

func (TradeRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{5}
}

// OMS Users
type UserType int32

const (
	UserType_USER_TYPE_UNSPECIFIED UserType = 0
	UserType_INVESTOR              UserType = 1
	UserType_TRADER                UserType = 2
	UserType_BROKER_ADMIN          UserType = 3
	UserType_EMPLOYEE              UserType = 4
)

var UserType_name = map[int32]string{
	0: "USER_TYPE_UNSPECIFIED",
	1: "INVESTOR",
	2: "TRADER",
	3: "BROKER_ADMIN",
	4: "EMPLOYEE",
}

var UserType_value = map[string]int32{
	"USER_TYPE_UNSPECIFIED": 0,
	"INVESTOR":              1,
	"TRADER":                2,
	"BROKER_ADMIN":          3,
	"EMPLOYEE":              4,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{6}
}

type CreateEmployeeRequest struct {
	//  User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Designation          string   `protobuf:"bytes,14,opt,name=designation,proto3" json:"designation,omitempty"`
	Description          string   `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEmployeeRequest) Reset()         { *m = CreateEmployeeRequest{} }
func (m *CreateEmployeeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEmployeeRequest) ProtoMessage()    {}
func (*CreateEmployeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{0}
}
func (m *CreateEmployeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEmployeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEmployeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEmployeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEmployeeRequest.Merge(m, src)
}
func (m *CreateEmployeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateEmployeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEmployeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEmployeeRequest proto.InternalMessageInfo

func (m *CreateEmployeeRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateEmployeeRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *CreateEmployeeRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *CreateEmployeeRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *CreateEmployeeRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *CreateEmployeeRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *CreateEmployeeRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateEmployeeRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateEmployeeRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateEmployeeRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateEmployeeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateEmployeeRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *CreateEmployeeRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *CreateEmployeeRequest) GetDesignation() string {
	if m != nil {
		return m.Designation
	}
	return ""
}

func (m *CreateEmployeeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateEmployeeResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEmployeeResponse) Reset()         { *m = CreateEmployeeResponse{} }
func (m *CreateEmployeeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateEmployeeResponse) ProtoMessage()    {}
func (*CreateEmployeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{1}
}
func (m *CreateEmployeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEmployeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEmployeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEmployeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEmployeeResponse.Merge(m, src)
}
func (m *CreateEmployeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateEmployeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEmployeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEmployeeResponse proto.InternalMessageInfo

func (m *CreateEmployeeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateEmployeeRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Designation          string   `protobuf:"bytes,14,opt,name=designation,proto3" json:"designation,omitempty"`
	Description          string   `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEmployeeRequest) Reset()         { *m = UpdateEmployeeRequest{} }
func (m *UpdateEmployeeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeRequest) ProtoMessage()    {}
func (*UpdateEmployeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{2}
}
func (m *UpdateEmployeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeRequest.Merge(m, src)
}
func (m *UpdateEmployeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeRequest proto.InternalMessageInfo

func (m *UpdateEmployeeRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *UpdateEmployeeRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *UpdateEmployeeRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *UpdateEmployeeRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *UpdateEmployeeRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateEmployeeRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEmployeeRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateEmployeeRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *UpdateEmployeeRequest) GetDesignation() string {
	if m != nil {
		return m.Designation
	}
	return ""
}

func (m *UpdateEmployeeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateEmployeeResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEmployeeResponse) Reset()         { *m = UpdateEmployeeResponse{} }
func (m *UpdateEmployeeResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeResponse) ProtoMessage()    {}
func (*UpdateEmployeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{3}
}
func (m *UpdateEmployeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeResponse.Merge(m, src)
}
func (m *UpdateEmployeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeResponse proto.InternalMessageInfo

func (m *UpdateEmployeeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetEmployeeByIdRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEmployeeByIdRequest) Reset()         { *m = GetEmployeeByIdRequest{} }
func (m *GetEmployeeByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeByIdRequest) ProtoMessage()    {}
func (*GetEmployeeByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{4}
}
func (m *GetEmployeeByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeByIdRequest.Merge(m, src)
}
func (m *GetEmployeeByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeByIdRequest proto.InternalMessageInfo

func (m *GetEmployeeByIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetEmployeeByIdResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserType             UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	EmailAddress         string   `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode          string   `protobuf:"bytes,6,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	BranchId             int64    `protobuf:"varint,7,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Designation          string   `protobuf:"bytes,8,opt,name=designation,proto3" json:"designation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEmployeeByIdResponse) Reset()         { *m = GetEmployeeByIdResponse{} }
func (m *GetEmployeeByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeByIdResponse) ProtoMessage()    {}
func (*GetEmployeeByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{5}
}
func (m *GetEmployeeByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeByIdResponse.Merge(m, src)
}
func (m *GetEmployeeByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeByIdResponse proto.InternalMessageInfo

func (m *GetEmployeeByIdResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetEmployeeByIdResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetEmployeeByIdResponse) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *GetEmployeeByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetEmployeeByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetEmployeeByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetEmployeeByIdResponse) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *GetEmployeeByIdResponse) GetDesignation() string {
	if m != nil {
		return m.Designation
	}
	return ""
}

type CreateBrokerAdminRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	IsActive             bool     `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ReadOnly             bool     `protobuf:"varint,15,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	IsIsolatedUser       bool     `protobuf:"varint,16,opt,name=is_isolated_user,json=isIsolatedUser,proto3" json:"is_isolated_user,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBrokerAdminRequest) Reset()         { *m = CreateBrokerAdminRequest{} }
func (m *CreateBrokerAdminRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBrokerAdminRequest) ProtoMessage()    {}
func (*CreateBrokerAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{6}
}
func (m *CreateBrokerAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrokerAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrokerAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrokerAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrokerAdminRequest.Merge(m, src)
}
func (m *CreateBrokerAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrokerAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrokerAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrokerAdminRequest proto.InternalMessageInfo

func (m *CreateBrokerAdminRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateBrokerAdminRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *CreateBrokerAdminRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *CreateBrokerAdminRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *CreateBrokerAdminRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateBrokerAdminRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateBrokerAdminRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateBrokerAdminRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateBrokerAdminRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *CreateBrokerAdminRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *CreateBrokerAdminRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetIsIsolatedUser() bool {
	if m != nil {
		return m.IsIsolatedUser
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *CreateBrokerAdminRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type CreateBrokerAdminResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBrokerAdminResponse) Reset()         { *m = CreateBrokerAdminResponse{} }
func (m *CreateBrokerAdminResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBrokerAdminResponse) ProtoMessage()    {}
func (*CreateBrokerAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{7}
}
func (m *CreateBrokerAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrokerAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrokerAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrokerAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrokerAdminResponse.Merge(m, src)
}
func (m *CreateBrokerAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrokerAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrokerAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrokerAdminResponse proto.InternalMessageInfo

func (m *CreateBrokerAdminResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateBrokerAdminRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	IsActive             bool     `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ReadOnly             bool     `protobuf:"varint,15,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	IsIsolatedUser       bool     `protobuf:"varint,16,opt,name=is_isolated_user,json=isIsolatedUser,proto3" json:"is_isolated_user,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBrokerAdminRequest) Reset()         { *m = UpdateBrokerAdminRequest{} }
func (m *UpdateBrokerAdminRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBrokerAdminRequest) ProtoMessage()    {}
func (*UpdateBrokerAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{8}
}
func (m *UpdateBrokerAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrokerAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrokerAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBrokerAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrokerAdminRequest.Merge(m, src)
}
func (m *UpdateBrokerAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrokerAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrokerAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrokerAdminRequest proto.InternalMessageInfo

func (m *UpdateBrokerAdminRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateBrokerAdminRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *UpdateBrokerAdminRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *UpdateBrokerAdminRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *UpdateBrokerAdminRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateBrokerAdminRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateBrokerAdminRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateBrokerAdminRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBrokerAdminRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateBrokerAdminRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *UpdateBrokerAdminRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetIsIsolatedUser() bool {
	if m != nil {
		return m.IsIsolatedUser
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *UpdateBrokerAdminRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type UpdateBrokerAdminResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBrokerAdminResponse) Reset()         { *m = UpdateBrokerAdminResponse{} }
func (m *UpdateBrokerAdminResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBrokerAdminResponse) ProtoMessage()    {}
func (*UpdateBrokerAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{9}
}
func (m *UpdateBrokerAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrokerAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrokerAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBrokerAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrokerAdminResponse.Merge(m, src)
}
func (m *UpdateBrokerAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrokerAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrokerAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrokerAdminResponse proto.InternalMessageInfo

func (m *UpdateBrokerAdminResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetBrokerAdminByIdRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrokerAdminByIdRequest) Reset()         { *m = GetBrokerAdminByIdRequest{} }
func (m *GetBrokerAdminByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetBrokerAdminByIdRequest) ProtoMessage()    {}
func (*GetBrokerAdminByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{10}
}
func (m *GetBrokerAdminByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerAdminByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerAdminByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerAdminByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerAdminByIdRequest.Merge(m, src)
}
func (m *GetBrokerAdminByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerAdminByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerAdminByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerAdminByIdRequest proto.InternalMessageInfo

func (m *GetBrokerAdminByIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetBrokerAdminByIdResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	EmailAddress         string   `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	BranchId             int64    `protobuf:"varint,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	ReadOnly             bool     `protobuf:"varint,7,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	CanTrade             bool     `protobuf:"varint,8,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsActive             bool     `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsIsolatedUser       bool     `protobuf:"varint,10,opt,name=is_isolated_user,json=isIsolatedUser,proto3" json:"is_isolated_user,omitempty"`
	IsDeleted            bool     `protobuf:"varint,11,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrokerAdminByIdResponse) Reset()         { *m = GetBrokerAdminByIdResponse{} }
func (m *GetBrokerAdminByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetBrokerAdminByIdResponse) ProtoMessage()    {}
func (*GetBrokerAdminByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{11}
}
func (m *GetBrokerAdminByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerAdminByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerAdminByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerAdminByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerAdminByIdResponse.Merge(m, src)
}
func (m *GetBrokerAdminByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerAdminByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerAdminByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerAdminByIdResponse proto.InternalMessageInfo

func (m *GetBrokerAdminByIdResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetBrokerAdminByIdResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetBrokerAdminByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetBrokerAdminByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetBrokerAdminByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetBrokerAdminByIdResponse) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *GetBrokerAdminByIdResponse) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *GetBrokerAdminByIdResponse) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *GetBrokerAdminByIdResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetBrokerAdminByIdResponse) GetIsIsolatedUser() bool {
	if m != nil {
		return m.IsIsolatedUser
	}
	return false
}

func (m *GetBrokerAdminByIdResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type DeleteBrokerAdminRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrokerAdminRequest) Reset()         { *m = DeleteBrokerAdminRequest{} }
func (m *DeleteBrokerAdminRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBrokerAdminRequest) ProtoMessage()    {}
func (*DeleteBrokerAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{12}
}
func (m *DeleteBrokerAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrokerAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrokerAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBrokerAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrokerAdminRequest.Merge(m, src)
}
func (m *DeleteBrokerAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrokerAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrokerAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrokerAdminRequest proto.InternalMessageInfo

func (m *DeleteBrokerAdminRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteBrokerAdminResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrokerAdminResponse) Reset()         { *m = DeleteBrokerAdminResponse{} }
func (m *DeleteBrokerAdminResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBrokerAdminResponse) ProtoMessage()    {}
func (*DeleteBrokerAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{13}
}
func (m *DeleteBrokerAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrokerAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrokerAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBrokerAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrokerAdminResponse.Merge(m, src)
}
func (m *DeleteBrokerAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrokerAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrokerAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrokerAdminResponse proto.InternalMessageInfo

func (m *DeleteBrokerAdminResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateTraderRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	IsActive             bool     `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ReadOnly             bool     `protobuf:"varint,15,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	LicenceNumber        string   `protobuf:"bytes,16,opt,name=licence_number,json=licenceNumber,proto3" json:"licence_number,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderRequest) Reset()         { *m = CreateTraderRequest{} }
func (m *CreateTraderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTraderRequest) ProtoMessage()    {}
func (*CreateTraderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{14}
}
func (m *CreateTraderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderRequest.Merge(m, src)
}
func (m *CreateTraderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderRequest proto.InternalMessageInfo

func (m *CreateTraderRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateTraderRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *CreateTraderRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *CreateTraderRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *CreateTraderRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *CreateTraderRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *CreateTraderRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateTraderRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateTraderRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateTraderRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateTraderRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateTraderRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *CreateTraderRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *CreateTraderRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CreateTraderRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *CreateTraderRequest) GetLicenceNumber() string {
	if m != nil {
		return m.LicenceNumber
	}
	return ""
}

func (m *CreateTraderRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *CreateTraderRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

// Response after successful creation
type CreateTraderResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderResponse) Reset()         { *m = CreateTraderResponse{} }
func (m *CreateTraderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTraderResponse) ProtoMessage()    {}
func (*CreateTraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{15}
}
func (m *CreateTraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderResponse.Merge(m, src)
}
func (m *CreateTraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderResponse proto.InternalMessageInfo

func (m *CreateTraderResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateTraderRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               Status   `protobuf:"varint,12,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	BranchId             int64    `protobuf:"varint,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	IsActive             bool     `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ReadOnly             bool     `protobuf:"varint,15,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	LicenceNumber        string   `protobuf:"bytes,16,opt,name=licence_number,json=licenceNumber,proto3" json:"licence_number,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderRequest) Reset()         { *m = UpdateTraderRequest{} }
func (m *UpdateTraderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderRequest) ProtoMessage()    {}
func (*UpdateTraderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{16}
}
func (m *UpdateTraderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderRequest.Merge(m, src)
}
func (m *UpdateTraderRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderRequest proto.InternalMessageInfo

func (m *UpdateTraderRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateTraderRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *UpdateTraderRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *UpdateTraderRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *UpdateTraderRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *UpdateTraderRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *UpdateTraderRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateTraderRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateTraderRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateTraderRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateTraderRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateTraderRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateTraderRequest) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *UpdateTraderRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UpdateTraderRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *UpdateTraderRequest) GetLicenceNumber() string {
	if m != nil {
		return m.LicenceNumber
	}
	return ""
}

func (m *UpdateTraderRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *UpdateTraderRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

// Response after successful creation
type UpdateTraderResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderResponse) Reset()         { *m = UpdateTraderResponse{} }
func (m *UpdateTraderResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderResponse) ProtoMessage()    {}
func (*UpdateTraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{17}
}
func (m *UpdateTraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderResponse.Merge(m, src)
}
func (m *UpdateTraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderResponse proto.InternalMessageInfo

func (m *UpdateTraderResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTraderByIdRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTraderByIdRequest) Reset()         { *m = GetTraderByIdRequest{} }
func (m *GetTraderByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetTraderByIdRequest) ProtoMessage()    {}
func (*GetTraderByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{18}
}
func (m *GetTraderByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderByIdRequest.Merge(m, src)
}
func (m *GetTraderByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderByIdRequest proto.InternalMessageInfo

func (m *GetTraderByIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// Response message
type GetTraderByIdResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	EmailAddress         string   `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	BranchId             int64    `protobuf:"varint,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	ReadOnly             bool     `protobuf:"varint,7,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	LicenceNumber        string   `protobuf:"bytes,8,opt,name=licence_number,json=licenceNumber,proto3" json:"licence_number,omitempty"`
	CanTrade             bool     `protobuf:"varint,9,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsActive             bool     `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTraderByIdResponse) Reset()         { *m = GetTraderByIdResponse{} }
func (m *GetTraderByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetTraderByIdResponse) ProtoMessage()    {}
func (*GetTraderByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{19}
}
func (m *GetTraderByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderByIdResponse.Merge(m, src)
}
func (m *GetTraderByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderByIdResponse proto.InternalMessageInfo

func (m *GetTraderByIdResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetTraderByIdResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetTraderByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetTraderByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetTraderByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetTraderByIdResponse) GetBranchId() int64 {
	if m != nil {
		return m.BranchId
	}
	return 0
}

func (m *GetTraderByIdResponse) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *GetTraderByIdResponse) GetLicenceNumber() string {
	if m != nil {
		return m.LicenceNumber
	}
	return ""
}

func (m *GetTraderByIdResponse) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *GetTraderByIdResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type GetInvestorsRequest struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInvestorsRequest) Reset()         { *m = GetInvestorsRequest{} }
func (m *GetInvestorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetInvestorsRequest) ProtoMessage()    {}
func (*GetInvestorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{20}
}
func (m *GetInvestorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvestorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvestorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvestorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvestorsRequest.Merge(m, src)
}
func (m *GetInvestorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInvestorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvestorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvestorsRequest proto.InternalMessageInfo

func (m *GetInvestorsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetInvestorsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserWithInvestorType struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	EmailAddress         string   `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	PrimaryTwsId         int64    `protobuf:"varint,6,opt,name=primary_tws_id,json=primaryTwsId,proto3" json:"primary_tws_id,omitempty"`
	ClientCode           string   `protobuf:"bytes,7,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	BoAccountNumber      string   `protobuf:"bytes,8,opt,name=bo_account_number,json=boAccountNumber,proto3" json:"bo_account_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserWithInvestorType) Reset()         { *m = UserWithInvestorType{} }
func (m *UserWithInvestorType) String() string { return proto.CompactTextString(m) }
func (*UserWithInvestorType) ProtoMessage()    {}
func (*UserWithInvestorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{21}
}
func (m *UserWithInvestorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserWithInvestorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserWithInvestorType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserWithInvestorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserWithInvestorType.Merge(m, src)
}
func (m *UserWithInvestorType) XXX_Size() int {
	return m.Size()
}
func (m *UserWithInvestorType) XXX_DiscardUnknown() {
	xxx_messageInfo_UserWithInvestorType.DiscardUnknown(m)
}

var xxx_messageInfo_UserWithInvestorType proto.InternalMessageInfo

func (m *UserWithInvestorType) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserWithInvestorType) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserWithInvestorType) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UserWithInvestorType) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UserWithInvestorType) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserWithInvestorType) GetPrimaryTwsId() int64 {
	if m != nil {
		return m.PrimaryTwsId
	}
	return 0
}

func (m *UserWithInvestorType) GetClientCode() string {
	if m != nil {
		return m.ClientCode
	}
	return ""
}

func (m *UserWithInvestorType) GetBoAccountNumber() string {
	if m != nil {
		return m.BoAccountNumber
	}
	return ""
}

type GetInvestorsResponse struct {
	Investors            []*UserWithInvestorType `protobuf:"bytes,1,rep,name=investors,proto3" json:"investors,omitempty"`
	TotalCount           int64                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetInvestorsResponse) Reset()         { *m = GetInvestorsResponse{} }
func (m *GetInvestorsResponse) String() string { return proto.CompactTextString(m) }
func (*GetInvestorsResponse) ProtoMessage()    {}
func (*GetInvestorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{22}
}
func (m *GetInvestorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvestorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvestorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvestorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvestorsResponse.Merge(m, src)
}
func (m *GetInvestorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInvestorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvestorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvestorsResponse proto.InternalMessageInfo

func (m *GetInvestorsResponse) GetInvestors() []*UserWithInvestorType {
	if m != nil {
		return m.Investors
	}
	return nil
}

func (m *GetInvestorsResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type GetInvestorByIdRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInvestorByIdRequest) Reset()         { *m = GetInvestorByIdRequest{} }
func (m *GetInvestorByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetInvestorByIdRequest) ProtoMessage()    {}
func (*GetInvestorByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{23}
}
func (m *GetInvestorByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvestorByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvestorByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvestorByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvestorByIdRequest.Merge(m, src)
}
func (m *GetInvestorByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInvestorByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvestorByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvestorByIdRequest proto.InternalMessageInfo

func (m *GetInvestorByIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// Response message
type GetInvestorByIdResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	EmailAddress         string   `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	PrimaryTwsId         int64    `protobuf:"varint,6,opt,name=primary_tws_id,json=primaryTwsId,proto3" json:"primary_tws_id,omitempty"`
	ClientCode           string   `protobuf:"bytes,7,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	BoAccountNumber      string   `protobuf:"bytes,8,opt,name=bo_account_number,json=boAccountNumber,proto3" json:"bo_account_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInvestorByIdResponse) Reset()         { *m = GetInvestorByIdResponse{} }
func (m *GetInvestorByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetInvestorByIdResponse) ProtoMessage()    {}
func (*GetInvestorByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{24}
}
func (m *GetInvestorByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvestorByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvestorByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvestorByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvestorByIdResponse.Merge(m, src)
}
func (m *GetInvestorByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInvestorByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvestorByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvestorByIdResponse proto.InternalMessageInfo

func (m *GetInvestorByIdResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetInvestorByIdResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetInvestorByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetInvestorByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetInvestorByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetInvestorByIdResponse) GetPrimaryTwsId() int64 {
	if m != nil {
		return m.PrimaryTwsId
	}
	return 0
}

func (m *GetInvestorByIdResponse) GetClientCode() string {
	if m != nil {
		return m.ClientCode
	}
	return ""
}

func (m *GetInvestorByIdResponse) GetBoAccountNumber() string {
	if m != nil {
		return m.BoAccountNumber
	}
	return ""
}

type UpdateInvestorRequest struct {
	// User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrimaryTwsId         int64    `protobuf:"varint,12,opt,name=primary_tws_id,json=primaryTwsId,proto3" json:"primary_tws_id,omitempty"`
	SecondaryTwsId       int64    `protobuf:"varint,13,opt,name=secondary_tws_id,json=secondaryTwsId,proto3" json:"secondary_tws_id,omitempty"`
	BoAccountNumber      string   `protobuf:"bytes,14,opt,name=bo_account_number,json=boAccountNumber,proto3" json:"bo_account_number,omitempty"`
	Status               Status   `protobuf:"varint,15,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	ReadOnly             bool     `protobuf:"varint,16,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	ClientCode           string   `protobuf:"bytes,19,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateInvestorRequest) Reset()         { *m = UpdateInvestorRequest{} }
func (m *UpdateInvestorRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateInvestorRequest) ProtoMessage()    {}
func (*UpdateInvestorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{25}
}
func (m *UpdateInvestorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInvestorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateInvestorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateInvestorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInvestorRequest.Merge(m, src)
}
func (m *UpdateInvestorRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInvestorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInvestorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInvestorRequest proto.InternalMessageInfo

func (m *UpdateInvestorRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateInvestorRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *UpdateInvestorRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *UpdateInvestorRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *UpdateInvestorRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *UpdateInvestorRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *UpdateInvestorRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateInvestorRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateInvestorRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateInvestorRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateInvestorRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateInvestorRequest) GetPrimaryTwsId() int64 {
	if m != nil {
		return m.PrimaryTwsId
	}
	return 0
}

func (m *UpdateInvestorRequest) GetSecondaryTwsId() int64 {
	if m != nil {
		return m.SecondaryTwsId
	}
	return 0
}

func (m *UpdateInvestorRequest) GetBoAccountNumber() string {
	if m != nil {
		return m.BoAccountNumber
	}
	return ""
}

func (m *UpdateInvestorRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateInvestorRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *UpdateInvestorRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *UpdateInvestorRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *UpdateInvestorRequest) GetClientCode() string {
	if m != nil {
		return m.ClientCode
	}
	return ""
}

type UpdateInvestorResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateInvestorResponse) Reset()         { *m = UpdateInvestorResponse{} }
func (m *UpdateInvestorResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateInvestorResponse) ProtoMessage()    {}
func (*UpdateInvestorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{26}
}
func (m *UpdateInvestorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInvestorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateInvestorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateInvestorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInvestorResponse.Merge(m, src)
}
func (m *UpdateInvestorResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInvestorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInvestorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInvestorResponse proto.InternalMessageInfo

func (m *UpdateInvestorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateInvestorRequest struct {
	// OMS User fields
	UserName     string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	AuthId       int64    `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	UserType     UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=oms_user_management.UserType" json:"user_type,omitempty"`
	CanLogin     bool     `protobuf:"varint,4,opt,name=can_login,json=canLogin,proto3" json:"can_login,omitempty"`
	Nid          string   `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	IsVerified   bool     `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsEnabled    bool     `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EmailAddress string   `protobuf:"bytes,8,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode  string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Investor fields
	UserId               int64    `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrimaryTwsId         int64    `protobuf:"varint,12,opt,name=primary_tws_id,json=primaryTwsId,proto3" json:"primary_tws_id,omitempty"`
	SecondaryTwsId       int64    `protobuf:"varint,13,opt,name=secondary_tws_id,json=secondaryTwsId,proto3" json:"secondary_tws_id,omitempty"`
	BoAccountNumber      string   `protobuf:"bytes,14,opt,name=bo_account_number,json=boAccountNumber,proto3" json:"bo_account_number,omitempty"`
	Status               Status   `protobuf:"varint,15,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	ReadOnly             bool     `protobuf:"varint,16,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	CanTrade             bool     `protobuf:"varint,17,opt,name=can_trade,json=canTrade,proto3" json:"can_trade,omitempty"`
	IsDeleted            bool     `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	ClientCode           string   `protobuf:"bytes,19,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateInvestorRequest) Reset()         { *m = CreateInvestorRequest{} }
func (m *CreateInvestorRequest) String() string { return proto.CompactTextString(m) }
func (*CreateInvestorRequest) ProtoMessage()    {}
func (*CreateInvestorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{27}
}
func (m *CreateInvestorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateInvestorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateInvestorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateInvestorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateInvestorRequest.Merge(m, src)
}
func (m *CreateInvestorRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateInvestorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateInvestorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateInvestorRequest proto.InternalMessageInfo

func (m *CreateInvestorRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateInvestorRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *CreateInvestorRequest) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *CreateInvestorRequest) GetCanLogin() bool {
	if m != nil {
		return m.CanLogin
	}
	return false
}

func (m *CreateInvestorRequest) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *CreateInvestorRequest) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *CreateInvestorRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateInvestorRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateInvestorRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateInvestorRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateInvestorRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateInvestorRequest) GetPrimaryTwsId() int64 {
	if m != nil {
		return m.PrimaryTwsId
	}
	return 0
}

func (m *CreateInvestorRequest) GetSecondaryTwsId() int64 {
	if m != nil {
		return m.SecondaryTwsId
	}
	return 0
}

func (m *CreateInvestorRequest) GetBoAccountNumber() string {
	if m != nil {
		return m.BoAccountNumber
	}
	return ""
}

func (m *CreateInvestorRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *CreateInvestorRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *CreateInvestorRequest) GetCanTrade() bool {
	if m != nil {
		return m.CanTrade
	}
	return false
}

func (m *CreateInvestorRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *CreateInvestorRequest) GetClientCode() string {
	if m != nil {
		return m.ClientCode
	}
	return ""
}

// Response after successful creation
type CreateInvestorResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	PrimaryTwsId         int64    `protobuf:"varint,4,opt,name=primary_tws_id,json=primaryTwsId,proto3" json:"primary_tws_id,omitempty"`
	ClientCode           string   `protobuf:"bytes,5,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	BoAccountNumber      string   `protobuf:"bytes,6,opt,name=bo_account_number,json=boAccountNumber,proto3" json:"bo_account_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateInvestorResponse) Reset()         { *m = CreateInvestorResponse{} }
func (m *CreateInvestorResponse) String() string { return proto.CompactTextString(m) }
func (*CreateInvestorResponse) ProtoMessage()    {}
func (*CreateInvestorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{28}
}
func (m *CreateInvestorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateInvestorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateInvestorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateInvestorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateInvestorResponse.Merge(m, src)
}
func (m *CreateInvestorResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateInvestorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateInvestorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateInvestorResponse proto.InternalMessageInfo

func (m *CreateInvestorResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateInvestorResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateInvestorResponse) GetPrimaryTwsId() int64 {
	if m != nil {
		return m.PrimaryTwsId
	}
	return 0
}

func (m *CreateInvestorResponse) GetClientCode() string {
	if m != nil {
		return m.ClientCode
	}
	return ""
}

func (m *CreateInvestorResponse) GetBoAccountNumber() string {
	if m != nil {
		return m.BoAccountNumber
	}
	return ""
}

type CreateMapRolePermissionRequest struct {
	RoleId               int64    `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapRolePermissionRequest) Reset()         { *m = CreateMapRolePermissionRequest{} }
func (m *CreateMapRolePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMapRolePermissionRequest) ProtoMessage()    {}
func (*CreateMapRolePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{29}
}
func (m *CreateMapRolePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapRolePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapRolePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapRolePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapRolePermissionRequest.Merge(m, src)
}
func (m *CreateMapRolePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapRolePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapRolePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapRolePermissionRequest proto.InternalMessageInfo

func (m *CreateMapRolePermissionRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *CreateMapRolePermissionRequest) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *CreateMapRolePermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreateMapRolePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapRolePermissionResponse) Reset()         { *m = CreateMapRolePermissionResponse{} }
func (m *CreateMapRolePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMapRolePermissionResponse) ProtoMessage()    {}
func (*CreateMapRolePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{30}
}
func (m *CreateMapRolePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapRolePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapRolePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapRolePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapRolePermissionResponse.Merge(m, src)
}
func (m *CreateMapRolePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapRolePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapRolePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapRolePermissionResponse proto.InternalMessageInfo

func (m *CreateMapRolePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateMapRolePermissionRequest struct {
	RoleId               int64    `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapRolePermissionRequest) Reset()         { *m = UpdateMapRolePermissionRequest{} }
func (m *UpdateMapRolePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMapRolePermissionRequest) ProtoMessage()    {}
func (*UpdateMapRolePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{31}
}
func (m *UpdateMapRolePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapRolePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapRolePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapRolePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapRolePermissionRequest.Merge(m, src)
}
func (m *UpdateMapRolePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapRolePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapRolePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapRolePermissionRequest proto.InternalMessageInfo

func (m *UpdateMapRolePermissionRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *UpdateMapRolePermissionRequest) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *UpdateMapRolePermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateMapRolePermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateMapRolePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapRolePermissionResponse) Reset()         { *m = UpdateMapRolePermissionResponse{} }
func (m *UpdateMapRolePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMapRolePermissionResponse) ProtoMessage()    {}
func (*UpdateMapRolePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{32}
}
func (m *UpdateMapRolePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapRolePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapRolePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapRolePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapRolePermissionResponse.Merge(m, src)
}
func (m *UpdateMapRolePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapRolePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapRolePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapRolePermissionResponse proto.InternalMessageInfo

func (m *UpdateMapRolePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetMapRolePermissionsRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetMapRolePermissionsRequest) Reset()         { *m = GetMapRolePermissionsRequest{} }
func (m *GetMapRolePermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapRolePermissionsRequest) ProtoMessage()    {}
func (*GetMapRolePermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{33}
}
func (m *GetMapRolePermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapRolePermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapRolePermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapRolePermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRolePermissionsRequest.Merge(m, src)
}
func (m *GetMapRolePermissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMapRolePermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRolePermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRolePermissionsRequest proto.InternalMessageInfo

func (m *GetMapRolePermissionsRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetMapRolePermissionsResponse struct {
	Code                  int64                                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MappedPermissionRoles []*GetMapRolePermissionsResponseMappedRoleList `protobuf:"bytes,2,rep,name=mappedPermissionRoles,proto3" json:"mappedPermissionRoles,omitempty"`
	PaginationResponse    *PaginationInfoResponse                        `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                       `json:"-"`
	XXX_unrecognized      []byte                                         `json:"-"`
	XXX_sizecache         int32                                          `json:"-"`
}

func (m *GetMapRolePermissionsResponse) Reset()         { *m = GetMapRolePermissionsResponse{} }
func (m *GetMapRolePermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapRolePermissionsResponse) ProtoMessage()    {}
func (*GetMapRolePermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{34}
}
func (m *GetMapRolePermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapRolePermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapRolePermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapRolePermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRolePermissionsResponse.Merge(m, src)
}
func (m *GetMapRolePermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMapRolePermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRolePermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRolePermissionsResponse proto.InternalMessageInfo

func (m *GetMapRolePermissionsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetMapRolePermissionsResponse) GetMappedPermissionRoles() []*GetMapRolePermissionsResponseMappedRoleList {
	if m != nil {
		return m.MappedPermissionRoles
	}
	return nil
}

func (m *GetMapRolePermissionsResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetMapRolePermissionsResponseMappedRoleList struct {
	RoleId               int64    `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapRolePermissionsResponseMappedRoleList) Reset() {
	*m = GetMapRolePermissionsResponseMappedRoleList{}
}
func (m *GetMapRolePermissionsResponseMappedRoleList) String() string {
	return proto.CompactTextString(m)
}
func (*GetMapRolePermissionsResponseMappedRoleList) ProtoMessage() {}
func (*GetMapRolePermissionsResponseMappedRoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{34, 0}
}
func (m *GetMapRolePermissionsResponseMappedRoleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapRolePermissionsResponseMappedRoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapRolePermissionsResponseMappedRoleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapRolePermissionsResponseMappedRoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRolePermissionsResponseMappedRoleList.Merge(m, src)
}
func (m *GetMapRolePermissionsResponseMappedRoleList) XXX_Size() int {
	return m.Size()
}
func (m *GetMapRolePermissionsResponseMappedRoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRolePermissionsResponseMappedRoleList.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRolePermissionsResponseMappedRoleList proto.InternalMessageInfo

func (m *GetMapRolePermissionsResponseMappedRoleList) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *GetMapRolePermissionsResponseMappedRoleList) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *GetMapRolePermissionsResponseMappedRoleList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetMapRolePermissionsResponseMappedRoleList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMapRolePermissionByIdRequest struct {
	RoleId               int64    `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapRolePermissionByIdRequest) Reset()         { *m = GetMapRolePermissionByIdRequest{} }
func (m *GetMapRolePermissionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapRolePermissionByIdRequest) ProtoMessage()    {}
func (*GetMapRolePermissionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{35}
}
func (m *GetMapRolePermissionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapRolePermissionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapRolePermissionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapRolePermissionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRolePermissionByIdRequest.Merge(m, src)
}
func (m *GetMapRolePermissionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMapRolePermissionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRolePermissionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRolePermissionByIdRequest proto.InternalMessageInfo

func (m *GetMapRolePermissionByIdRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

type GetMapRolePermissionByIdResponse struct {
	RolesAndPermissions  []*RolesAndPermissions `protobuf:"bytes,1,rep,name=rolesAndPermissions,proto3" json:"rolesAndPermissions,omitempty"`
	Code                 int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetMapRolePermissionByIdResponse) Reset()         { *m = GetMapRolePermissionByIdResponse{} }
func (m *GetMapRolePermissionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapRolePermissionByIdResponse) ProtoMessage()    {}
func (*GetMapRolePermissionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{36}
}
func (m *GetMapRolePermissionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapRolePermissionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapRolePermissionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapRolePermissionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRolePermissionByIdResponse.Merge(m, src)
}
func (m *GetMapRolePermissionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMapRolePermissionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRolePermissionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRolePermissionByIdResponse proto.InternalMessageInfo

func (m *GetMapRolePermissionByIdResponse) GetRolesAndPermissions() []*RolesAndPermissions {
	if m != nil {
		return m.RolesAndPermissions
	}
	return nil
}

func (m *GetMapRolePermissionByIdResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type RolesAndPermissions struct {
	RoleId               int64    `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permissionId,proto3" json:"permissionId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsEnabled            bool     `protobuf:"varint,4,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RolesAndPermissions) Reset()         { *m = RolesAndPermissions{} }
func (m *RolesAndPermissions) String() string { return proto.CompactTextString(m) }
func (*RolesAndPermissions) ProtoMessage()    {}
func (*RolesAndPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{37}
}
func (m *RolesAndPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolesAndPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolesAndPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolesAndPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolesAndPermissions.Merge(m, src)
}
func (m *RolesAndPermissions) XXX_Size() int {
	return m.Size()
}
func (m *RolesAndPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_RolesAndPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_RolesAndPermissions proto.InternalMessageInfo

func (m *RolesAndPermissions) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *RolesAndPermissions) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *RolesAndPermissions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RolesAndPermissions) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type DeleteMapRolePermissionRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapRolePermissionRequest) Reset()         { *m = DeleteMapRolePermissionRequest{} }
func (m *DeleteMapRolePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMapRolePermissionRequest) ProtoMessage()    {}
func (*DeleteMapRolePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{38}
}
func (m *DeleteMapRolePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapRolePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapRolePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapRolePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapRolePermissionRequest.Merge(m, src)
}
func (m *DeleteMapRolePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapRolePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapRolePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapRolePermissionRequest proto.InternalMessageInfo

func (m *DeleteMapRolePermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMapRolePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapRolePermissionResponse) Reset()         { *m = DeleteMapRolePermissionResponse{} }
func (m *DeleteMapRolePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMapRolePermissionResponse) ProtoMessage()    {}
func (*DeleteMapRolePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{39}
}
func (m *DeleteMapRolePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapRolePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapRolePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapRolePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapRolePermissionResponse.Merge(m, src)
}
func (m *DeleteMapRolePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapRolePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapRolePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapRolePermissionResponse proto.InternalMessageInfo

func (m *DeleteMapRolePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// MapUserRole
type CreateMapUserRoleRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId               int64    `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapUserRoleRequest) Reset()         { *m = CreateMapUserRoleRequest{} }
func (m *CreateMapUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMapUserRoleRequest) ProtoMessage()    {}
func (*CreateMapUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{40}
}
func (m *CreateMapUserRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapUserRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapUserRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapUserRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapUserRoleRequest.Merge(m, src)
}
func (m *CreateMapUserRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapUserRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapUserRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapUserRoleRequest proto.InternalMessageInfo

func (m *CreateMapUserRoleRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateMapUserRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *CreateMapUserRoleRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreateMapUserRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapUserRoleResponse) Reset()         { *m = CreateMapUserRoleResponse{} }
func (m *CreateMapUserRoleResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMapUserRoleResponse) ProtoMessage()    {}
func (*CreateMapUserRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{41}
}
func (m *CreateMapUserRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapUserRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapUserRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapUserRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapUserRoleResponse.Merge(m, src)
}
func (m *CreateMapUserRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapUserRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapUserRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapUserRoleResponse proto.InternalMessageInfo

func (m *CreateMapUserRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateMapUserRoleRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId               int64    `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapUserRoleRequest) Reset()         { *m = UpdateMapUserRoleRequest{} }
func (m *UpdateMapUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMapUserRoleRequest) ProtoMessage()    {}
func (*UpdateMapUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{42}
}
func (m *UpdateMapUserRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapUserRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapUserRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapUserRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapUserRoleRequest.Merge(m, src)
}
func (m *UpdateMapUserRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapUserRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapUserRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapUserRoleRequest proto.InternalMessageInfo

func (m *UpdateMapUserRoleRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateMapUserRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *UpdateMapUserRoleRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateMapUserRoleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateMapUserRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapUserRoleResponse) Reset()         { *m = UpdateMapUserRoleResponse{} }
func (m *UpdateMapUserRoleResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMapUserRoleResponse) ProtoMessage()    {}
func (*UpdateMapUserRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{43}
}
func (m *UpdateMapUserRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapUserRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapUserRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapUserRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapUserRoleResponse.Merge(m, src)
}
func (m *UpdateMapUserRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapUserRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapUserRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapUserRoleResponse proto.InternalMessageInfo

func (m *UpdateMapUserRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetMapUserRolesRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetMapUserRolesRequest) Reset()         { *m = GetMapUserRolesRequest{} }
func (m *GetMapUserRolesRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapUserRolesRequest) ProtoMessage()    {}
func (*GetMapUserRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{44}
}
func (m *GetMapUserRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapUserRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapUserRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapUserRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapUserRolesRequest.Merge(m, src)
}
func (m *GetMapUserRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMapUserRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapUserRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapUserRolesRequest proto.InternalMessageInfo

func (m *GetMapUserRolesRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetMapUserRolesResponse struct {
	Code                 int64                                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MappedUserRoleLists  []*GetMapUserRolesResponseMappedUserRoleList `protobuf:"bytes,2,rep,name=mappedUserRoleLists,proto3" json:"mappedUserRoleLists,omitempty"`
	PaginationResponse   *PaginationInfoResponse                      `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *GetMapUserRolesResponse) Reset()         { *m = GetMapUserRolesResponse{} }
func (m *GetMapUserRolesResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapUserRolesResponse) ProtoMessage()    {}
func (*GetMapUserRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{45}
}
func (m *GetMapUserRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapUserRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapUserRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapUserRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapUserRolesResponse.Merge(m, src)
}
func (m *GetMapUserRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMapUserRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapUserRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapUserRolesResponse proto.InternalMessageInfo

func (m *GetMapUserRolesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetMapUserRolesResponse) GetMappedUserRoleLists() []*GetMapUserRolesResponseMappedUserRoleList {
	if m != nil {
		return m.MappedUserRoleLists
	}
	return nil
}

func (m *GetMapUserRolesResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetMapUserRolesResponseMappedUserRoleList struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId               int64    `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapUserRolesResponseMappedUserRoleList) Reset() {
	*m = GetMapUserRolesResponseMappedUserRoleList{}
}
func (m *GetMapUserRolesResponseMappedUserRoleList) String() string {
	return proto.CompactTextString(m)
}
func (*GetMapUserRolesResponseMappedUserRoleList) ProtoMessage() {}
func (*GetMapUserRolesResponseMappedUserRoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{45, 0}
}
func (m *GetMapUserRolesResponseMappedUserRoleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapUserRolesResponseMappedUserRoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapUserRolesResponseMappedUserRoleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapUserRolesResponseMappedUserRoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapUserRolesResponseMappedUserRoleList.Merge(m, src)
}
func (m *GetMapUserRolesResponseMappedUserRoleList) XXX_Size() int {
	return m.Size()
}
func (m *GetMapUserRolesResponseMappedUserRoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapUserRolesResponseMappedUserRoleList.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapUserRolesResponseMappedUserRoleList proto.InternalMessageInfo

func (m *GetMapUserRolesResponseMappedUserRoleList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetMapUserRolesResponseMappedUserRoleList) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *GetMapUserRolesResponseMappedUserRoleList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetMapUserRolesResponseMappedUserRoleList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMapUserRoleByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapUserRoleByIdRequest) Reset()         { *m = GetMapUserRoleByIdRequest{} }
func (m *GetMapUserRoleByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapUserRoleByIdRequest) ProtoMessage()    {}
func (*GetMapUserRoleByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{46}
}
func (m *GetMapUserRoleByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapUserRoleByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapUserRoleByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapUserRoleByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapUserRoleByIdRequest.Merge(m, src)
}
func (m *GetMapUserRoleByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMapUserRoleByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapUserRoleByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapUserRoleByIdRequest proto.InternalMessageInfo

func (m *GetMapUserRoleByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMapUserRoleByIdResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId               int64    `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapUserRoleByIdResponse) Reset()         { *m = GetMapUserRoleByIdResponse{} }
func (m *GetMapUserRoleByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapUserRoleByIdResponse) ProtoMessage()    {}
func (*GetMapUserRoleByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{47}
}
func (m *GetMapUserRoleByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapUserRoleByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapUserRoleByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapUserRoleByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapUserRoleByIdResponse.Merge(m, src)
}
func (m *GetMapUserRoleByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMapUserRoleByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapUserRoleByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapUserRoleByIdResponse proto.InternalMessageInfo

func (m *GetMapUserRoleByIdResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetMapUserRoleByIdResponse) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *GetMapUserRoleByIdResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetMapUserRoleByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMapUserRoleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapUserRoleRequest) Reset()         { *m = DeleteMapUserRoleRequest{} }
func (m *DeleteMapUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMapUserRoleRequest) ProtoMessage()    {}
func (*DeleteMapUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{48}
}
func (m *DeleteMapUserRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapUserRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapUserRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapUserRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapUserRoleRequest.Merge(m, src)
}
func (m *DeleteMapUserRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapUserRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapUserRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapUserRoleRequest proto.InternalMessageInfo

func (m *DeleteMapUserRoleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMapUserRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapUserRoleResponse) Reset()         { *m = DeleteMapUserRoleResponse{} }
func (m *DeleteMapUserRoleResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMapUserRoleResponse) ProtoMessage()    {}
func (*DeleteMapUserRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{49}
}
func (m *DeleteMapUserRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapUserRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapUserRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapUserRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapUserRoleResponse.Merge(m, src)
}
func (m *DeleteMapUserRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapUserRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapUserRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapUserRoleResponse proto.InternalMessageInfo

func (m *DeleteMapUserRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateMapUserPermissionRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsRevoked            bool     `protobuf:"varint,4,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapUserPermissionRequest) Reset()         { *m = CreateMapUserPermissionRequest{} }
func (m *CreateMapUserPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMapUserPermissionRequest) ProtoMessage()    {}
func (*CreateMapUserPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{50}
}
func (m *CreateMapUserPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapUserPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapUserPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapUserPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapUserPermissionRequest.Merge(m, src)
}
func (m *CreateMapUserPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapUserPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapUserPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapUserPermissionRequest proto.InternalMessageInfo

func (m *CreateMapUserPermissionRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateMapUserPermissionRequest) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *CreateMapUserPermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateMapUserPermissionRequest) GetIsRevoked() bool {
	if m != nil {
		return m.IsRevoked
	}
	return false
}

type CreateMapUserPermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMapUserPermissionResponse) Reset()         { *m = CreateMapUserPermissionResponse{} }
func (m *CreateMapUserPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMapUserPermissionResponse) ProtoMessage()    {}
func (*CreateMapUserPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{51}
}
func (m *CreateMapUserPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMapUserPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMapUserPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMapUserPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapUserPermissionResponse.Merge(m, src)
}
func (m *CreateMapUserPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateMapUserPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapUserPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapUserPermissionResponse proto.InternalMessageInfo

func (m *CreateMapUserPermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateMapUserPermissionRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsRevoked            bool     `protobuf:"varint,4,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapUserPermissionRequest) Reset()         { *m = UpdateMapUserPermissionRequest{} }
func (m *UpdateMapUserPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMapUserPermissionRequest) ProtoMessage()    {}
func (*UpdateMapUserPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{52}
}
func (m *UpdateMapUserPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapUserPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapUserPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapUserPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapUserPermissionRequest.Merge(m, src)
}
func (m *UpdateMapUserPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapUserPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapUserPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapUserPermissionRequest proto.InternalMessageInfo

func (m *UpdateMapUserPermissionRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateMapUserPermissionRequest) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *UpdateMapUserPermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateMapUserPermissionRequest) GetIsRevoked() bool {
	if m != nil {
		return m.IsRevoked
	}
	return false
}

type UpdateMapUserPermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapUserPermissionResponse) Reset()         { *m = UpdateMapUserPermissionResponse{} }
func (m *UpdateMapUserPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMapUserPermissionResponse) ProtoMessage()    {}
func (*UpdateMapUserPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{53}
}
func (m *UpdateMapUserPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapUserPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapUserPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapUserPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapUserPermissionResponse.Merge(m, src)
}
func (m *UpdateMapUserPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapUserPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapUserPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapUserPermissionResponse proto.InternalMessageInfo

func (m *UpdateMapUserPermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetUserPermissionsByUserIdRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserPermissionsByUserIdRequest) Reset()         { *m = GetUserPermissionsByUserIdRequest{} }
func (m *GetUserPermissionsByUserIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserPermissionsByUserIdRequest) ProtoMessage()    {}
func (*GetUserPermissionsByUserIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{54}
}
func (m *GetUserPermissionsByUserIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserPermissionsByUserIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserPermissionsByUserIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserPermissionsByUserIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserPermissionsByUserIdRequest.Merge(m, src)
}
func (m *GetUserPermissionsByUserIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserPermissionsByUserIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserPermissionsByUserIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserPermissionsByUserIdRequest proto.InternalMessageInfo

func (m *GetUserPermissionsByUserIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserPermissionsByUserIdResponse struct {
	Code                 int64                                                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	UserPermissions      []*GetUserPermissionsByUserIdResponse_UserPermissions `protobuf:"bytes,2,rep,name=userPermissions,proto3" json:"userPermissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *GetUserPermissionsByUserIdResponse) Reset()         { *m = GetUserPermissionsByUserIdResponse{} }
func (m *GetUserPermissionsByUserIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserPermissionsByUserIdResponse) ProtoMessage()    {}
func (*GetUserPermissionsByUserIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{55}
}
func (m *GetUserPermissionsByUserIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserPermissionsByUserIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserPermissionsByUserIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserPermissionsByUserIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserPermissionsByUserIdResponse.Merge(m, src)
}
func (m *GetUserPermissionsByUserIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserPermissionsByUserIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserPermissionsByUserIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserPermissionsByUserIdResponse proto.InternalMessageInfo

func (m *GetUserPermissionsByUserIdResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetUserPermissionsByUserIdResponse) GetUserPermissions() []*GetUserPermissionsByUserIdResponse_UserPermissions {
	if m != nil {
		return m.UserPermissions
	}
	return nil
}

type GetUserPermissionsByUserIdResponse_UserPermissions struct {
	PermissionId         int64    `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) Reset() {
	*m = GetUserPermissionsByUserIdResponse_UserPermissions{}
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) String() string {
	return proto.CompactTextString(m)
}
func (*GetUserPermissionsByUserIdResponse_UserPermissions) ProtoMessage() {}
func (*GetUserPermissionsByUserIdResponse_UserPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{55, 0}
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserPermissionsByUserIdResponse_UserPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserPermissionsByUserIdResponse_UserPermissions.Merge(m, src)
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) XXX_Size() int {
	return m.Size()
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserPermissionsByUserIdResponse_UserPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserPermissionsByUserIdResponse_UserPermissions proto.InternalMessageInfo

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteMapUserPermissionRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PermissionId         int64    `protobuf:"varint,2,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapUserPermissionRequest) Reset()         { *m = DeleteMapUserPermissionRequest{} }
func (m *DeleteMapUserPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMapUserPermissionRequest) ProtoMessage()    {}
func (*DeleteMapUserPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{56}
}
func (m *DeleteMapUserPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapUserPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapUserPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapUserPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapUserPermissionRequest.Merge(m, src)
}
func (m *DeleteMapUserPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapUserPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapUserPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapUserPermissionRequest proto.InternalMessageInfo

func (m *DeleteMapUserPermissionRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteMapUserPermissionRequest) GetPermissionId() int64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

type DeleteMapUserPermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapUserPermissionResponse) Reset()         { *m = DeleteMapUserPermissionResponse{} }
func (m *DeleteMapUserPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMapUserPermissionResponse) ProtoMessage()    {}
func (*DeleteMapUserPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{57}
}
func (m *DeleteMapUserPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMapUserPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMapUserPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMapUserPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapUserPermissionResponse.Merge(m, src)
}
func (m *DeleteMapUserPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMapUserPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapUserPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapUserPermissionResponse proto.InternalMessageInfo

func (m *DeleteMapUserPermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Roles API
type CreateRoleRequest struct {
	RoleName             string   `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRoleRequest) Reset()         { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()    {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{58}
}
func (m *CreateRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleRequest.Merge(m, src)
}
func (m *CreateRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleRequest proto.InternalMessageInfo

func (m *CreateRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *CreateRoleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRoleRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreateRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRoleResponse) Reset()         { *m = CreateRoleResponse{} }
func (m *CreateRoleResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRoleResponse) ProtoMessage()    {}
func (*CreateRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{59}
}
func (m *CreateRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleResponse.Merge(m, src)
}
func (m *CreateRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleResponse proto.InternalMessageInfo

func (m *CreateRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateRoleRequest struct {
	RoleName             string   `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRoleRequest) Reset()         { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()    {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{60}
}
func (m *UpdateRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoleRequest.Merge(m, src)
}
func (m *UpdateRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoleRequest proto.InternalMessageInfo

func (m *UpdateRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UpdateRoleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRoleRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateRoleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRoleResponse) Reset()         { *m = UpdateRoleResponse{} }
func (m *UpdateRoleResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRoleResponse) ProtoMessage()    {}
func (*UpdateRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{61}
}
func (m *UpdateRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoleResponse.Merge(m, src)
}
func (m *UpdateRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoleResponse proto.InternalMessageInfo

func (m *UpdateRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetRolesRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetRolesRequest) Reset()         { *m = GetRolesRequest{} }
func (m *GetRolesRequest) String() string { return proto.CompactTextString(m) }
func (*GetRolesRequest) ProtoMessage()    {}
func (*GetRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{62}
}
func (m *GetRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRolesRequest.Merge(m, src)
}
func (m *GetRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRolesRequest proto.InternalMessageInfo

func (m *GetRolesRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetRolesResponse struct {
	Code                 int64                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roles                []*GetRolesResponse_RoleList `protobuf:"bytes,2,rep,name=Roles,proto3" json:"Roles,omitempty"`
	PaginationResponse   *PaginationInfoResponse      `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetRolesResponse) Reset()         { *m = GetRolesResponse{} }
func (m *GetRolesResponse) String() string { return proto.CompactTextString(m) }
func (*GetRolesResponse) ProtoMessage()    {}
func (*GetRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{63}
}
func (m *GetRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRolesResponse.Merge(m, src)
}
func (m *GetRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRolesResponse proto.InternalMessageInfo

func (m *GetRolesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetRolesResponse) GetRoles() []*GetRolesResponse_RoleList {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GetRolesResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetRolesResponse_RoleList struct {
	RoleName             string   `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRolesResponse_RoleList) Reset()         { *m = GetRolesResponse_RoleList{} }
func (m *GetRolesResponse_RoleList) String() string { return proto.CompactTextString(m) }
func (*GetRolesResponse_RoleList) ProtoMessage()    {}
func (*GetRolesResponse_RoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{63, 0}
}
func (m *GetRolesResponse_RoleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRolesResponse_RoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRolesResponse_RoleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRolesResponse_RoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRolesResponse_RoleList.Merge(m, src)
}
func (m *GetRolesResponse_RoleList) XXX_Size() int {
	return m.Size()
}
func (m *GetRolesResponse_RoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRolesResponse_RoleList.DiscardUnknown(m)
}

var xxx_messageInfo_GetRolesResponse_RoleList proto.InternalMessageInfo

func (m *GetRolesResponse_RoleList) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *GetRolesResponse_RoleList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetRolesResponse_RoleList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetRolesResponse_RoleList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetRoleByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoleByIdRequest) Reset()         { *m = GetRoleByIdRequest{} }
func (m *GetRoleByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetRoleByIdRequest) ProtoMessage()    {}
func (*GetRoleByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{64}
}
func (m *GetRoleByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoleByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoleByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoleByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoleByIdRequest.Merge(m, src)
}
func (m *GetRoleByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRoleByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoleByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoleByIdRequest proto.InternalMessageInfo

func (m *GetRoleByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetRoleByIdResponse struct {
	RoleName             string   `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoleByIdResponse) Reset()         { *m = GetRoleByIdResponse{} }
func (m *GetRoleByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoleByIdResponse) ProtoMessage()    {}
func (*GetRoleByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{65}
}
func (m *GetRoleByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoleByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoleByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoleByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoleByIdResponse.Merge(m, src)
}
func (m *GetRoleByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoleByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoleByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoleByIdResponse proto.InternalMessageInfo

func (m *GetRoleByIdResponse) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *GetRoleByIdResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetRoleByIdResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetRoleByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteRoleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRoleRequest) Reset()         { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()    {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{66}
}
func (m *DeleteRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoleRequest.Merge(m, src)
}
func (m *DeleteRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoleRequest proto.InternalMessageInfo

func (m *DeleteRoleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteRoleResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRoleResponse) Reset()         { *m = DeleteRoleResponse{} }
func (m *DeleteRoleResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRoleResponse) ProtoMessage()    {}
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{67}
}
func (m *DeleteRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoleResponse.Merge(m, src)
}
func (m *DeleteRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoleResponse proto.InternalMessageInfo

func (m *DeleteRoleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Permission API
type CreatePermissionRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePermissionRequest) Reset()         { *m = CreatePermissionRequest{} }
func (m *CreatePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePermissionRequest) ProtoMessage()    {}
func (*CreatePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{68}
}
func (m *CreatePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePermissionRequest.Merge(m, src)
}
func (m *CreatePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePermissionRequest proto.InternalMessageInfo

func (m *CreatePermissionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePermissionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreatePermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreatePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePermissionResponse) Reset()         { *m = CreatePermissionResponse{} }
func (m *CreatePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePermissionResponse) ProtoMessage()    {}
func (*CreatePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{69}
}
func (m *CreatePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePermissionResponse.Merge(m, src)
}
func (m *CreatePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePermissionResponse proto.InternalMessageInfo

func (m *CreatePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdatePermissionRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePermissionRequest) Reset()         { *m = UpdatePermissionRequest{} }
func (m *UpdatePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePermissionRequest) ProtoMessage()    {}
func (*UpdatePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{70}
}
func (m *UpdatePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePermissionRequest.Merge(m, src)
}
func (m *UpdatePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePermissionRequest proto.InternalMessageInfo

func (m *UpdatePermissionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePermissionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdatePermissionRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdatePermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdatePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePermissionResponse) Reset()         { *m = UpdatePermissionResponse{} }
func (m *UpdatePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePermissionResponse) ProtoMessage()    {}
func (*UpdatePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{71}
}
func (m *UpdatePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePermissionResponse.Merge(m, src)
}
func (m *UpdatePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePermissionResponse proto.InternalMessageInfo

func (m *UpdatePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetPermissionsRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetPermissionsRequest) Reset()         { *m = GetPermissionsRequest{} }
func (m *GetPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsRequest) ProtoMessage()    {}
func (*GetPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{72}
}
func (m *GetPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsRequest.Merge(m, src)
}
func (m *GetPermissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsRequest proto.InternalMessageInfo

func (m *GetPermissionsRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetPermissionsResponse struct {
	Code                 int64                                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Permissions          []*GetPermissionsResponse_PermissionList `protobuf:"bytes,2,rep,name=Permissions,proto3" json:"Permissions,omitempty"`
	PaginationResponse   *PaginationInfoResponse                  `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *GetPermissionsResponse) Reset()         { *m = GetPermissionsResponse{} }
func (m *GetPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsResponse) ProtoMessage()    {}
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{73}
}
func (m *GetPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsResponse.Merge(m, src)
}
func (m *GetPermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsResponse proto.InternalMessageInfo

func (m *GetPermissionsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetPermissionsResponse) GetPermissions() []*GetPermissionsResponse_PermissionList {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *GetPermissionsResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetPermissionsResponse_PermissionList struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionsResponse_PermissionList) Reset()         { *m = GetPermissionsResponse_PermissionList{} }
func (m *GetPermissionsResponse_PermissionList) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsResponse_PermissionList) ProtoMessage()    {}
func (*GetPermissionsResponse_PermissionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{73, 0}
}
func (m *GetPermissionsResponse_PermissionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsResponse_PermissionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsResponse_PermissionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsResponse_PermissionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsResponse_PermissionList.Merge(m, src)
}
func (m *GetPermissionsResponse_PermissionList) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionsResponse_PermissionList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsResponse_PermissionList.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsResponse_PermissionList proto.InternalMessageInfo

func (m *GetPermissionsResponse_PermissionList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPermissionsResponse_PermissionList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetPermissionsResponse_PermissionList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetPermissionsResponse_PermissionList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPermissionByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionByIdRequest) Reset()         { *m = GetPermissionByIdRequest{} }
func (m *GetPermissionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetPermissionByIdRequest) ProtoMessage()    {}
func (*GetPermissionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{74}
}
func (m *GetPermissionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionByIdRequest.Merge(m, src)
}
func (m *GetPermissionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionByIdRequest proto.InternalMessageInfo

func (m *GetPermissionByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPermissionByIdResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionByIdResponse) Reset()         { *m = GetPermissionByIdResponse{} }
func (m *GetPermissionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetPermissionByIdResponse) ProtoMessage()    {}
func (*GetPermissionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{75}
}
func (m *GetPermissionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionByIdResponse.Merge(m, src)
}
func (m *GetPermissionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionByIdResponse proto.InternalMessageInfo

func (m *GetPermissionByIdResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPermissionByIdResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetPermissionByIdResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetPermissionByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePermissionRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePermissionRequest) Reset()         { *m = DeletePermissionRequest{} }
func (m *DeletePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePermissionRequest) ProtoMessage()    {}
func (*DeletePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{76}
}
func (m *DeletePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePermissionRequest.Merge(m, src)
}
func (m *DeletePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePermissionRequest proto.InternalMessageInfo

func (m *DeletePermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePermissionResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePermissionResponse) Reset()         { *m = DeletePermissionResponse{} }
func (m *DeletePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePermissionResponse) ProtoMessage()    {}
func (*DeletePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{77}
}
func (m *DeletePermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePermissionResponse.Merge(m, src)
}
func (m *DeletePermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePermissionResponse proto.InternalMessageInfo

func (m *DeletePermissionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateAuditLogRequest struct {
	ActionType           ActionType    `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=oms_user_management.ActionType" json:"action_type,omitempty"`
	AttemptById          int64         `protobuf:"varint,2,opt,name=attempt_by_id,json=attemptById,proto3" json:"attempt_by_id,omitempty"`
	AttemptByType        UserType      `protobuf:"varint,3,opt,name=attempt_by_type,json=attemptByType,proto3,enum=oms_user_management.UserType" json:"attempt_by_type,omitempty"`
	IpAddress            string        `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HttpMethod           HTTPMethods   `protobuf:"varint,5,opt,name=http_method,json=httpMethod,proto3,enum=oms_user_management.HTTPMethods" json:"http_method,omitempty"`
	Endpoint             string        `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	IsSuccess            bool          `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Platform             string        `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceName           string        `protobuf:"bytes,9,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceType           string        `protobuf:"bytes,10,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Description          *types.Struct `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	RequestBody          *types.Struct `protobuf:"bytes,12,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	ResponseBody         *types.Struct `protobuf:"bytes,13,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateAuditLogRequest) Reset()         { *m = CreateAuditLogRequest{} }
func (m *CreateAuditLogRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAuditLogRequest) ProtoMessage()    {}
func (*CreateAuditLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{78}
}
func (m *CreateAuditLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAuditLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAuditLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAuditLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAuditLogRequest.Merge(m, src)
}
func (m *CreateAuditLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAuditLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAuditLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAuditLogRequest proto.InternalMessageInfo

func (m *CreateAuditLogRequest) GetActionType() ActionType {
	if m != nil {
		return m.ActionType
	}
	return ActionType_UNSPECIFIED
}

func (m *CreateAuditLogRequest) GetAttemptById() int64 {
	if m != nil {
		return m.AttemptById
	}
	return 0
}

func (m *CreateAuditLogRequest) GetAttemptByType() UserType {
	if m != nil {
		return m.AttemptByType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *CreateAuditLogRequest) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *CreateAuditLogRequest) GetHttpMethod() HTTPMethods {
	if m != nil {
		return m.HttpMethod
	}
	return HTTPMethods_GET
}

func (m *CreateAuditLogRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *CreateAuditLogRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *CreateAuditLogRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CreateAuditLogRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *CreateAuditLogRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *CreateAuditLogRequest) GetDescription() *types.Struct {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *CreateAuditLogRequest) GetRequestBody() *types.Struct {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *CreateAuditLogRequest) GetResponseBody() *types.Struct {
	if m != nil {
		return m.ResponseBody
	}
	return nil
}

type CreateAuditLogResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAuditLogResponse) Reset()         { *m = CreateAuditLogResponse{} }
func (m *CreateAuditLogResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAuditLogResponse) ProtoMessage()    {}
func (*CreateAuditLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{79}
}
func (m *CreateAuditLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAuditLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAuditLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAuditLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAuditLogResponse.Merge(m, src)
}
func (m *CreateAuditLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAuditLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAuditLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAuditLogResponse proto.InternalMessageInfo

func (m *CreateAuditLogResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetAuditLogsRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetAuditLogsRequest) Reset()         { *m = GetAuditLogsRequest{} }
func (m *GetAuditLogsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuditLogsRequest) ProtoMessage()    {}
func (*GetAuditLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{80}
}
func (m *GetAuditLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuditLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuditLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuditLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuditLogsRequest.Merge(m, src)
}
func (m *GetAuditLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuditLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuditLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuditLogsRequest proto.InternalMessageInfo

func (m *GetAuditLogsRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetAuditLogsResponse struct {
	Code                 int64                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	AuditLogs            []*GetAuditLogsResponseAuditLogList `protobuf:"bytes,2,rep,name=auditLogs,proto3" json:"auditLogs,omitempty"`
	PaginationResponse   *PaginationInfoResponse             `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GetAuditLogsResponse) Reset()         { *m = GetAuditLogsResponse{} }
func (m *GetAuditLogsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuditLogsResponse) ProtoMessage()    {}
func (*GetAuditLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{81}
}
func (m *GetAuditLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuditLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuditLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuditLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuditLogsResponse.Merge(m, src)
}
func (m *GetAuditLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuditLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuditLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuditLogsResponse proto.InternalMessageInfo

func (m *GetAuditLogsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAuditLogsResponse) GetAuditLogs() []*GetAuditLogsResponseAuditLogList {
	if m != nil {
		return m.AuditLogs
	}
	return nil
}

func (m *GetAuditLogsResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetAuditLogsResponseAuditLogList struct {
	ActionType           ActionType    `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=oms_user_management.ActionType" json:"action_type,omitempty"`
	AttemptById          int64         `protobuf:"varint,2,opt,name=attempt_by_id,json=attemptById,proto3" json:"attempt_by_id,omitempty"`
	AttemptByType        UserType      `protobuf:"varint,3,opt,name=attempt_by_type,json=attemptByType,proto3,enum=oms_user_management.UserType" json:"attempt_by_type,omitempty"`
	IpAddress            string        `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HttpMethod           HTTPMethods   `protobuf:"varint,5,opt,name=http_method,json=httpMethod,proto3,enum=oms_user_management.HTTPMethods" json:"http_method,omitempty"`
	Endpoint             string        `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	IsSuccess            bool          `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Platform             string        `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceName           string        `protobuf:"bytes,9,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceType           string        `protobuf:"bytes,10,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Description          *types.Struct `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	RequestBody          *types.Struct `protobuf:"bytes,12,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	ResponseBody         *types.Struct `protobuf:"bytes,13,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Id                   int64         `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAuditLogsResponseAuditLogList) Reset()         { *m = GetAuditLogsResponseAuditLogList{} }
func (m *GetAuditLogsResponseAuditLogList) String() string { return proto.CompactTextString(m) }
func (*GetAuditLogsResponseAuditLogList) ProtoMessage()    {}
func (*GetAuditLogsResponseAuditLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{81, 0}
}
func (m *GetAuditLogsResponseAuditLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuditLogsResponseAuditLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuditLogsResponseAuditLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuditLogsResponseAuditLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuditLogsResponseAuditLogList.Merge(m, src)
}
func (m *GetAuditLogsResponseAuditLogList) XXX_Size() int {
	return m.Size()
}
func (m *GetAuditLogsResponseAuditLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuditLogsResponseAuditLogList.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuditLogsResponseAuditLogList proto.InternalMessageInfo

func (m *GetAuditLogsResponseAuditLogList) GetActionType() ActionType {
	if m != nil {
		return m.ActionType
	}
	return ActionType_UNSPECIFIED
}

func (m *GetAuditLogsResponseAuditLogList) GetAttemptById() int64 {
	if m != nil {
		return m.AttemptById
	}
	return 0
}

func (m *GetAuditLogsResponseAuditLogList) GetAttemptByType() UserType {
	if m != nil {
		return m.AttemptByType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *GetAuditLogsResponseAuditLogList) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *GetAuditLogsResponseAuditLogList) GetHttpMethod() HTTPMethods {
	if m != nil {
		return m.HttpMethod
	}
	return HTTPMethods_GET
}

func (m *GetAuditLogsResponseAuditLogList) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *GetAuditLogsResponseAuditLogList) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *GetAuditLogsResponseAuditLogList) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetAuditLogsResponseAuditLogList) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *GetAuditLogsResponseAuditLogList) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *GetAuditLogsResponseAuditLogList) GetDescription() *types.Struct {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *GetAuditLogsResponseAuditLogList) GetRequestBody() *types.Struct {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *GetAuditLogsResponseAuditLogList) GetResponseBody() *types.Struct {
	if m != nil {
		return m.ResponseBody
	}
	return nil
}

func (m *GetAuditLogsResponseAuditLogList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAuditLogByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAuditLogByIdRequest) Reset()         { *m = GetAuditLogByIdRequest{} }
func (m *GetAuditLogByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuditLogByIdRequest) ProtoMessage()    {}
func (*GetAuditLogByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{82}
}
func (m *GetAuditLogByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuditLogByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuditLogByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuditLogByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuditLogByIdRequest.Merge(m, src)
}
func (m *GetAuditLogByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuditLogByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuditLogByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuditLogByIdRequest proto.InternalMessageInfo

func (m *GetAuditLogByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAuditLogByIdResponse struct {
	ActionType           ActionType    `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=oms_user_management.ActionType" json:"action_type,omitempty"`
	AttemptById          int64         `protobuf:"varint,2,opt,name=attempt_by_id,json=attemptById,proto3" json:"attempt_by_id,omitempty"`
	AttemptByType        UserType      `protobuf:"varint,3,opt,name=attempt_by_type,json=attemptByType,proto3,enum=oms_user_management.UserType" json:"attempt_by_type,omitempty"`
	IpAddress            string        `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HttpMethod           HTTPMethods   `protobuf:"varint,5,opt,name=http_method,json=httpMethod,proto3,enum=oms_user_management.HTTPMethods" json:"http_method,omitempty"`
	Endpoint             string        `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	IsSuccess            bool          `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Platform             string        `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceName           string        `protobuf:"bytes,9,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceType           string        `protobuf:"bytes,10,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Description          *types.Struct `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	RequestBody          *types.Struct `protobuf:"bytes,12,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	ResponseBody         *types.Struct `protobuf:"bytes,13,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Id                   int64         `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAuditLogByIdResponse) Reset()         { *m = GetAuditLogByIdResponse{} }
func (m *GetAuditLogByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuditLogByIdResponse) ProtoMessage()    {}
func (*GetAuditLogByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{83}
}
func (m *GetAuditLogByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuditLogByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuditLogByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuditLogByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuditLogByIdResponse.Merge(m, src)
}
func (m *GetAuditLogByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuditLogByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuditLogByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuditLogByIdResponse proto.InternalMessageInfo

func (m *GetAuditLogByIdResponse) GetActionType() ActionType {
	if m != nil {
		return m.ActionType
	}
	return ActionType_UNSPECIFIED
}

func (m *GetAuditLogByIdResponse) GetAttemptById() int64 {
	if m != nil {
		return m.AttemptById
	}
	return 0
}

func (m *GetAuditLogByIdResponse) GetAttemptByType() UserType {
	if m != nil {
		return m.AttemptByType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (m *GetAuditLogByIdResponse) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *GetAuditLogByIdResponse) GetHttpMethod() HTTPMethods {
	if m != nil {
		return m.HttpMethod
	}
	return HTTPMethods_GET
}

func (m *GetAuditLogByIdResponse) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *GetAuditLogByIdResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *GetAuditLogByIdResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetAuditLogByIdResponse) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *GetAuditLogByIdResponse) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *GetAuditLogByIdResponse) GetDescription() *types.Struct {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *GetAuditLogByIdResponse) GetRequestBody() *types.Struct {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *GetAuditLogByIdResponse) GetResponseBody() *types.Struct {
	if m != nil {
		return m.ResponseBody
	}
	return nil
}

func (m *GetAuditLogByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateBranchRequest struct {
	BranchName           string   `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsActive             bool     `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	BrokerHouseId        int64    `protobuf:"varint,13,opt,name=broker_house_id,json=brokerHouseId,proto3" json:"broker_house_id,omitempty"`
	BranchType           string   `protobuf:"bytes,14,opt,name=branch_type,json=branchType,proto3" json:"branch_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBranchRequest) Reset()         { *m = CreateBranchRequest{} }
func (m *CreateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBranchRequest) ProtoMessage()    {}
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{84}
}
func (m *CreateBranchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBranchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchRequest.Merge(m, src)
}
func (m *CreateBranchRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchRequest proto.InternalMessageInfo

func (m *CreateBranchRequest) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *CreateBranchRequest) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *CreateBranchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateBranchRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateBranchRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateBranchRequest) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *CreateBranchRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateBranchRequest) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *CreateBranchRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreateBranchRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateBranchRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateBranchRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CreateBranchRequest) GetBrokerHouseId() int64 {
	if m != nil {
		return m.BrokerHouseId
	}
	return 0
}

func (m *CreateBranchRequest) GetBranchType() string {
	if m != nil {
		return m.BranchType
	}
	return ""
}

type CreateBranchResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBranchResponse) Reset()         { *m = CreateBranchResponse{} }
func (m *CreateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBranchResponse) ProtoMessage()    {}
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{85}
}
func (m *CreateBranchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBranchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchResponse.Merge(m, src)
}
func (m *CreateBranchResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchResponse proto.InternalMessageInfo

func (m *CreateBranchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateBranchRequest struct {
	BranchName           string   `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsActive             bool     `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	BrokerHouseId        int64    `protobuf:"varint,13,opt,name=broker_house_id,json=brokerHouseId,proto3" json:"broker_house_id,omitempty"`
	BranchType           string   `protobuf:"bytes,14,opt,name=branch_type,json=branchType,proto3" json:"branch_type,omitempty"`
	Id                   int64    `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBranchRequest) Reset()         { *m = UpdateBranchRequest{} }
func (m *UpdateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBranchRequest) ProtoMessage()    {}
func (*UpdateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{86}
}
func (m *UpdateBranchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBranchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBranchRequest.Merge(m, src)
}
func (m *UpdateBranchRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBranchRequest proto.InternalMessageInfo

func (m *UpdateBranchRequest) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *UpdateBranchRequest) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *UpdateBranchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateBranchRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateBranchRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateBranchRequest) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *UpdateBranchRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateBranchRequest) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *UpdateBranchRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateBranchRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateBranchRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateBranchRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UpdateBranchRequest) GetBrokerHouseId() int64 {
	if m != nil {
		return m.BrokerHouseId
	}
	return 0
}

func (m *UpdateBranchRequest) GetBranchType() string {
	if m != nil {
		return m.BranchType
	}
	return ""
}

func (m *UpdateBranchRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateBranchResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBranchResponse) Reset()         { *m = UpdateBranchResponse{} }
func (m *UpdateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBranchResponse) ProtoMessage()    {}
func (*UpdateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{87}
}
func (m *UpdateBranchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBranchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBranchResponse.Merge(m, src)
}
func (m *UpdateBranchResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBranchResponse proto.InternalMessageInfo

func (m *UpdateBranchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetBranchesRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetBranchesRequest) Reset()         { *m = GetBranchesRequest{} }
func (m *GetBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*GetBranchesRequest) ProtoMessage()    {}
func (*GetBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{88}
}
func (m *GetBranchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBranchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchesRequest.Merge(m, src)
}
func (m *GetBranchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchesRequest proto.InternalMessageInfo

func (m *GetBranchesRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetBranchesResponse struct {
	Code                 int64                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Branches             []*GetBranchesResponseBranchList `protobuf:"bytes,2,rep,name=branches,proto3" json:"branches,omitempty"`
	PaginationResponse   *PaginationInfoResponse          `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetBranchesResponse) Reset()         { *m = GetBranchesResponse{} }
func (m *GetBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*GetBranchesResponse) ProtoMessage()    {}
func (*GetBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{89}
}
func (m *GetBranchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBranchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchesResponse.Merge(m, src)
}
func (m *GetBranchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchesResponse proto.InternalMessageInfo

func (m *GetBranchesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBranchesResponse) GetBranches() []*GetBranchesResponseBranchList {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *GetBranchesResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetBranchesResponseBranchList struct {
	BranchName           string   `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsActive             bool     `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	BrokerHouseId        int64    `protobuf:"varint,13,opt,name=broker_house_id,json=brokerHouseId,proto3" json:"broker_house_id,omitempty"`
	BranchType           string   `protobuf:"bytes,14,opt,name=branch_type,json=branchType,proto3" json:"branch_type,omitempty"`
	Id                   int64    `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBranchesResponseBranchList) Reset()         { *m = GetBranchesResponseBranchList{} }
func (m *GetBranchesResponseBranchList) String() string { return proto.CompactTextString(m) }
func (*GetBranchesResponseBranchList) ProtoMessage()    {}
func (*GetBranchesResponseBranchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{89, 0}
}
func (m *GetBranchesResponseBranchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBranchesResponseBranchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBranchesResponseBranchList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBranchesResponseBranchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchesResponseBranchList.Merge(m, src)
}
func (m *GetBranchesResponseBranchList) XXX_Size() int {
	return m.Size()
}
func (m *GetBranchesResponseBranchList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchesResponseBranchList.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchesResponseBranchList proto.InternalMessageInfo

func (m *GetBranchesResponseBranchList) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetBranchesResponseBranchList) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetBranchesResponseBranchList) GetBrokerHouseId() int64 {
	if m != nil {
		return m.BrokerHouseId
	}
	return 0
}

func (m *GetBranchesResponseBranchList) GetBranchType() string {
	if m != nil {
		return m.BranchType
	}
	return ""
}

func (m *GetBranchesResponseBranchList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetBranchByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBranchByIdRequest) Reset()         { *m = GetBranchByIdRequest{} }
func (m *GetBranchByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetBranchByIdRequest) ProtoMessage()    {}
func (*GetBranchByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{90}
}
func (m *GetBranchByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBranchByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBranchByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBranchByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchByIdRequest.Merge(m, src)
}
func (m *GetBranchByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBranchByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchByIdRequest proto.InternalMessageInfo

func (m *GetBranchByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetBranchByIdResponse struct {
	BranchName           string   `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsActive             bool     `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	BrokerHouseId        int64    `protobuf:"varint,13,opt,name=broker_house_id,json=brokerHouseId,proto3" json:"broker_house_id,omitempty"`
	BranchType           string   `protobuf:"bytes,14,opt,name=branch_type,json=branchType,proto3" json:"branch_type,omitempty"`
	Id                   int64    `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBranchByIdResponse) Reset()         { *m = GetBranchByIdResponse{} }
func (m *GetBranchByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetBranchByIdResponse) ProtoMessage()    {}
func (*GetBranchByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{91}
}
func (m *GetBranchByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBranchByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBranchByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBranchByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchByIdResponse.Merge(m, src)
}
func (m *GetBranchByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBranchByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchByIdResponse proto.InternalMessageInfo

func (m *GetBranchByIdResponse) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *GetBranchByIdResponse) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetBranchByIdResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetBranchByIdResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetBranchByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetBranchByIdResponse) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *GetBranchByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetBranchByIdResponse) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *GetBranchByIdResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetBranchByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetBranchByIdResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetBranchByIdResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetBranchByIdResponse) GetBrokerHouseId() int64 {
	if m != nil {
		return m.BrokerHouseId
	}
	return 0
}

func (m *GetBranchByIdResponse) GetBranchType() string {
	if m != nil {
		return m.BranchType
	}
	return ""
}

func (m *GetBranchByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteBranchRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBranchRequest) Reset()         { *m = DeleteBranchRequest{} }
func (m *DeleteBranchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchRequest) ProtoMessage()    {}
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{92}
}
func (m *DeleteBranchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBranchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchRequest.Merge(m, src)
}
func (m *DeleteBranchRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchRequest proto.InternalMessageInfo

func (m *DeleteBranchRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteBranchResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBranchResponse) Reset()         { *m = DeleteBranchResponse{} }
func (m *DeleteBranchResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchResponse) ProtoMessage()    {}
func (*DeleteBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{93}
}
func (m *DeleteBranchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBranchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchResponse.Merge(m, src)
}
func (m *DeleteBranchResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchResponse proto.InternalMessageInfo

func (m *DeleteBranchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateBrokerHouseRequest struct {
	BrokerHouseName      string   `protobuf:"bytes,1,opt,name=broker_house_name,json=brokerHouseName,proto3" json:"broker_house_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBrokerHouseRequest) Reset()         { *m = CreateBrokerHouseRequest{} }
func (m *CreateBrokerHouseRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBrokerHouseRequest) ProtoMessage()    {}
func (*CreateBrokerHouseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{94}
}
func (m *CreateBrokerHouseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrokerHouseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrokerHouseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrokerHouseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrokerHouseRequest.Merge(m, src)
}
func (m *CreateBrokerHouseRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrokerHouseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrokerHouseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrokerHouseRequest proto.InternalMessageInfo

func (m *CreateBrokerHouseRequest) GetBrokerHouseName() string {
	if m != nil {
		return m.BrokerHouseName
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateBrokerHouseRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreateBrokerHouseResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBrokerHouseResponse) Reset()         { *m = CreateBrokerHouseResponse{} }
func (m *CreateBrokerHouseResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBrokerHouseResponse) ProtoMessage()    {}
func (*CreateBrokerHouseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{95}
}
func (m *CreateBrokerHouseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrokerHouseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrokerHouseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrokerHouseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrokerHouseResponse.Merge(m, src)
}
func (m *CreateBrokerHouseResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrokerHouseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrokerHouseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrokerHouseResponse proto.InternalMessageInfo

func (m *CreateBrokerHouseResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateBrokerHouseRequest struct {
	BrokerHouseName      string   `protobuf:"bytes,1,opt,name=broker_house_name,json=brokerHouseName,proto3" json:"broker_house_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBrokerHouseRequest) Reset()         { *m = UpdateBrokerHouseRequest{} }
func (m *UpdateBrokerHouseRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBrokerHouseRequest) ProtoMessage()    {}
func (*UpdateBrokerHouseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{96}
}
func (m *UpdateBrokerHouseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrokerHouseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrokerHouseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBrokerHouseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrokerHouseRequest.Merge(m, src)
}
func (m *UpdateBrokerHouseRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrokerHouseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrokerHouseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrokerHouseRequest proto.InternalMessageInfo

func (m *UpdateBrokerHouseRequest) GetBrokerHouseName() string {
	if m != nil {
		return m.BrokerHouseName
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateBrokerHouseRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateBrokerHouseRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateBrokerHouseResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBrokerHouseResponse) Reset()         { *m = UpdateBrokerHouseResponse{} }
func (m *UpdateBrokerHouseResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBrokerHouseResponse) ProtoMessage()    {}
func (*UpdateBrokerHouseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{97}
}
func (m *UpdateBrokerHouseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBrokerHouseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBrokerHouseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBrokerHouseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBrokerHouseResponse.Merge(m, src)
}
func (m *UpdateBrokerHouseResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBrokerHouseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBrokerHouseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBrokerHouseResponse proto.InternalMessageInfo

func (m *UpdateBrokerHouseResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetBrokerHousesRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetBrokerHousesRequest) Reset()         { *m = GetBrokerHousesRequest{} }
func (m *GetBrokerHousesRequest) String() string { return proto.CompactTextString(m) }
func (*GetBrokerHousesRequest) ProtoMessage()    {}
func (*GetBrokerHousesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{98}
}
func (m *GetBrokerHousesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerHousesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerHousesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerHousesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerHousesRequest.Merge(m, src)
}
func (m *GetBrokerHousesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerHousesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerHousesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerHousesRequest proto.InternalMessageInfo

func (m *GetBrokerHousesRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetBrokerHousesResponse struct {
	Code                 int64                                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	BrokerHouses         []*GetBrokerHousesResponseBrokerHouseList `protobuf:"bytes,2,rep,name=brokerHouses,proto3" json:"brokerHouses,omitempty"`
	PaginationResponse   *PaginationInfoResponse                   `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *GetBrokerHousesResponse) Reset()         { *m = GetBrokerHousesResponse{} }
func (m *GetBrokerHousesResponse) String() string { return proto.CompactTextString(m) }
func (*GetBrokerHousesResponse) ProtoMessage()    {}
func (*GetBrokerHousesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{99}
}
func (m *GetBrokerHousesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerHousesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerHousesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerHousesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerHousesResponse.Merge(m, src)
}
func (m *GetBrokerHousesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerHousesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerHousesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerHousesResponse proto.InternalMessageInfo

func (m *GetBrokerHousesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBrokerHousesResponse) GetBrokerHouses() []*GetBrokerHousesResponseBrokerHouseList {
	if m != nil {
		return m.BrokerHouses
	}
	return nil
}

func (m *GetBrokerHousesResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetBrokerHousesResponseBrokerHouseList struct {
	BrokerHouseName      string   `protobuf:"bytes,1,opt,name=broker_house_name,json=brokerHouseName,proto3" json:"broker_house_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrokerHousesResponseBrokerHouseList) Reset() {
	*m = GetBrokerHousesResponseBrokerHouseList{}
}
func (m *GetBrokerHousesResponseBrokerHouseList) String() string { return proto.CompactTextString(m) }
func (*GetBrokerHousesResponseBrokerHouseList) ProtoMessage()    {}
func (*GetBrokerHousesResponseBrokerHouseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{99, 0}
}
func (m *GetBrokerHousesResponseBrokerHouseList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerHousesResponseBrokerHouseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerHousesResponseBrokerHouseList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerHousesResponseBrokerHouseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerHousesResponseBrokerHouseList.Merge(m, src)
}
func (m *GetBrokerHousesResponseBrokerHouseList) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerHousesResponseBrokerHouseList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerHousesResponseBrokerHouseList.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerHousesResponseBrokerHouseList proto.InternalMessageInfo

func (m *GetBrokerHousesResponseBrokerHouseList) GetBrokerHouseName() string {
	if m != nil {
		return m.BrokerHouseName
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetBrokerHousesResponseBrokerHouseList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetBrokerHouseByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrokerHouseByIdRequest) Reset()         { *m = GetBrokerHouseByIdRequest{} }
func (m *GetBrokerHouseByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetBrokerHouseByIdRequest) ProtoMessage()    {}
func (*GetBrokerHouseByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{100}
}
func (m *GetBrokerHouseByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerHouseByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerHouseByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerHouseByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerHouseByIdRequest.Merge(m, src)
}
func (m *GetBrokerHouseByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerHouseByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerHouseByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerHouseByIdRequest proto.InternalMessageInfo

func (m *GetBrokerHouseByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetBrokerHouseByIdResponse struct {
	BrokerHouseName      string   `protobuf:"bytes,1,opt,name=broker_house_name,json=brokerHouseName,proto3" json:"broker_house_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelephoneNumber      string   `protobuf:"bytes,6,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	EmailAddress         string   `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	ValidCurrency        string   `protobuf:"bytes,8,opt,name=valid_currency,json=validCurrency,proto3" json:"valid_currency,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IsEnabled            bool     `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Id                   int64    `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrokerHouseByIdResponse) Reset()         { *m = GetBrokerHouseByIdResponse{} }
func (m *GetBrokerHouseByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetBrokerHouseByIdResponse) ProtoMessage()    {}
func (*GetBrokerHouseByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{101}
}
func (m *GetBrokerHouseByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBrokerHouseByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBrokerHouseByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBrokerHouseByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrokerHouseByIdResponse.Merge(m, src)
}
func (m *GetBrokerHouseByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBrokerHouseByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrokerHouseByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrokerHouseByIdResponse proto.InternalMessageInfo

func (m *GetBrokerHouseByIdResponse) GetBrokerHouseName() string {
	if m != nil {
		return m.BrokerHouseName
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetTelephoneNumber() string {
	if m != nil {
		return m.TelephoneNumber
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetValidCurrency() string {
	if m != nil {
		return m.ValidCurrency
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetBrokerHouseByIdResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetBrokerHouseByIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteBrokerHouseRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrokerHouseRequest) Reset()         { *m = DeleteBrokerHouseRequest{} }
func (m *DeleteBrokerHouseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBrokerHouseRequest) ProtoMessage()    {}
func (*DeleteBrokerHouseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{102}
}
func (m *DeleteBrokerHouseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrokerHouseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrokerHouseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBrokerHouseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrokerHouseRequest.Merge(m, src)
}
func (m *DeleteBrokerHouseRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrokerHouseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrokerHouseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrokerHouseRequest proto.InternalMessageInfo

func (m *DeleteBrokerHouseRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteBrokerHouseResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBrokerHouseResponse) Reset()         { *m = DeleteBrokerHouseResponse{} }
func (m *DeleteBrokerHouseResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBrokerHouseResponse) ProtoMessage()    {}
func (*DeleteBrokerHouseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{103}
}
func (m *DeleteBrokerHouseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBrokerHouseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBrokerHouseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBrokerHouseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBrokerHouseResponse.Merge(m, src)
}
func (m *DeleteBrokerHouseResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBrokerHouseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBrokerHouseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBrokerHouseResponse proto.InternalMessageInfo

func (m *DeleteBrokerHouseResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Mapping Trader with Team
type CreateTraderMapRequest struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TraderId             int64    `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderMapRequest) Reset()         { *m = CreateTraderMapRequest{} }
func (m *CreateTraderMapRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTraderMapRequest) ProtoMessage()    {}
func (*CreateTraderMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{104}
}
func (m *CreateTraderMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderMapRequest.Merge(m, src)
}
func (m *CreateTraderMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderMapRequest proto.InternalMessageInfo

func (m *CreateTraderMapRequest) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *CreateTraderMapRequest) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *CreateTraderMapRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateTraderMapRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

type CreateTraderMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderMapResponse) Reset()         { *m = CreateTraderMapResponse{} }
func (m *CreateTraderMapResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTraderMapResponse) ProtoMessage()    {}
func (*CreateTraderMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{105}
}
func (m *CreateTraderMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderMapResponse.Merge(m, src)
}
func (m *CreateTraderMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderMapResponse proto.InternalMessageInfo

func (m *CreateTraderMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateTraderMapRequest struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TraderId             int64    `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	Id                   int64    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderMapRequest) Reset()         { *m = UpdateTraderMapRequest{} }
func (m *UpdateTraderMapRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderMapRequest) ProtoMessage()    {}
func (*UpdateTraderMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{106}
}
func (m *UpdateTraderMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderMapRequest.Merge(m, src)
}
func (m *UpdateTraderMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderMapRequest proto.InternalMessageInfo

func (m *UpdateTraderMapRequest) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *UpdateTraderMapRequest) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *UpdateTraderMapRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateTraderMapRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateTraderMapRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateTraderMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderMapResponse) Reset()         { *m = UpdateTraderMapResponse{} }
func (m *UpdateTraderMapResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderMapResponse) ProtoMessage()    {}
func (*UpdateTraderMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{107}
}
func (m *UpdateTraderMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderMapResponse.Merge(m, src)
}
func (m *UpdateTraderMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderMapResponse proto.InternalMessageInfo

func (m *UpdateTraderMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTraderMapRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetTraderMapRequest) Reset()         { *m = GetTraderMapRequest{} }
func (m *GetTraderMapRequest) String() string { return proto.CompactTextString(m) }
func (*GetTraderMapRequest) ProtoMessage()    {}
func (*GetTraderMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{108}
}
func (m *GetTraderMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderMapRequest.Merge(m, src)
}
func (m *GetTraderMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderMapRequest proto.InternalMessageInfo

func (m *GetTraderMapRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetTraderMapResponse struct {
	Code                 int64                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MappedTrader         []*GetTraderMapResponse_TraderMap `protobuf:"bytes,2,rep,name=MappedTrader,proto3" json:"MappedTrader,omitempty"`
	PaginationResponse   *PaginationInfoResponse           `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GetTraderMapResponse) Reset()         { *m = GetTraderMapResponse{} }
func (m *GetTraderMapResponse) String() string { return proto.CompactTextString(m) }
func (*GetTraderMapResponse) ProtoMessage()    {}
func (*GetTraderMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{109}
}
func (m *GetTraderMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderMapResponse.Merge(m, src)
}
func (m *GetTraderMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderMapResponse proto.InternalMessageInfo

func (m *GetTraderMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTraderMapResponse) GetMappedTrader() []*GetTraderMapResponse_TraderMap {
	if m != nil {
		return m.MappedTrader
	}
	return nil
}

func (m *GetTraderMapResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetTraderMapResponse_TraderMap struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TraderId             int64    `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	Id                   int64    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTraderMapResponse_TraderMap) Reset()         { *m = GetTraderMapResponse_TraderMap{} }
func (m *GetTraderMapResponse_TraderMap) String() string { return proto.CompactTextString(m) }
func (*GetTraderMapResponse_TraderMap) ProtoMessage()    {}
func (*GetTraderMapResponse_TraderMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{109, 0}
}
func (m *GetTraderMapResponse_TraderMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderMapResponse_TraderMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderMapResponse_TraderMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderMapResponse_TraderMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderMapResponse_TraderMap.Merge(m, src)
}
func (m *GetTraderMapResponse_TraderMap) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderMapResponse_TraderMap) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderMapResponse_TraderMap.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderMapResponse_TraderMap proto.InternalMessageInfo

func (m *GetTraderMapResponse_TraderMap) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *GetTraderMapResponse_TraderMap) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *GetTraderMapResponse_TraderMap) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetTraderMapResponse_TraderMap) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *GetTraderMapResponse_TraderMap) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderMapRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderMapRequest) Reset()         { *m = DeleteTraderMapRequest{} }
func (m *DeleteTraderMapRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderMapRequest) ProtoMessage()    {}
func (*DeleteTraderMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{110}
}
func (m *DeleteTraderMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderMapRequest.Merge(m, src)
}
func (m *DeleteTraderMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderMapRequest proto.InternalMessageInfo

func (m *DeleteTraderMapRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderMapResponse) Reset()         { *m = DeleteTraderMapResponse{} }
func (m *DeleteTraderMapResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderMapResponse) ProtoMessage()    {}
func (*DeleteTraderMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{111}
}
func (m *DeleteTraderMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderMapResponse.Merge(m, src)
}
func (m *DeleteTraderMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderMapResponse proto.InternalMessageInfo

func (m *DeleteTraderMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Create team of trader
type CreateTraderTeamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	IsDeleted            bool     `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderTeamRequest) Reset()         { *m = CreateTraderTeamRequest{} }
func (m *CreateTraderTeamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTraderTeamRequest) ProtoMessage()    {}
func (*CreateTraderTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{112}
}
func (m *CreateTraderTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderTeamRequest.Merge(m, src)
}
func (m *CreateTraderTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderTeamRequest proto.InternalMessageInfo

func (m *CreateTraderTeamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTraderTeamRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateTraderTeamRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateTraderTeamRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *CreateTraderTeamRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type CreateTraderTeamResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderTeamResponse) Reset()         { *m = CreateTraderTeamResponse{} }
func (m *CreateTraderTeamResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTraderTeamResponse) ProtoMessage()    {}
func (*CreateTraderTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{113}
}
func (m *CreateTraderTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderTeamResponse.Merge(m, src)
}
func (m *CreateTraderTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderTeamResponse proto.InternalMessageInfo

func (m *CreateTraderTeamResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateTraderTeamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	IsDeleted            bool     `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Id                   int64    `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderTeamRequest) Reset()         { *m = UpdateTraderTeamRequest{} }
func (m *UpdateTraderTeamRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderTeamRequest) ProtoMessage()    {}
func (*UpdateTraderTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{114}
}
func (m *UpdateTraderTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderTeamRequest.Merge(m, src)
}
func (m *UpdateTraderTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderTeamRequest proto.InternalMessageInfo

func (m *UpdateTraderTeamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateTraderTeamRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateTraderTeamRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateTraderTeamRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *UpdateTraderTeamRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *UpdateTraderTeamRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateTraderTeamResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderTeamResponse) Reset()         { *m = UpdateTraderTeamResponse{} }
func (m *UpdateTraderTeamResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderTeamResponse) ProtoMessage()    {}
func (*UpdateTraderTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{115}
}
func (m *UpdateTraderTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderTeamResponse.Merge(m, src)
}
func (m *UpdateTraderTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderTeamResponse proto.InternalMessageInfo

func (m *UpdateTraderTeamResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTraderTeamRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetTraderTeamRequest) Reset()         { *m = GetTraderTeamRequest{} }
func (m *GetTraderTeamRequest) String() string { return proto.CompactTextString(m) }
func (*GetTraderTeamRequest) ProtoMessage()    {}
func (*GetTraderTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{116}
}
func (m *GetTraderTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderTeamRequest.Merge(m, src)
}
func (m *GetTraderTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderTeamRequest proto.InternalMessageInfo

func (m *GetTraderTeamRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetTraderTeamResponse struct {
	Code                 int64                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	TradersTeam          []*GetTraderTeamResponse_TraderTeam `protobuf:"bytes,2,rep,name=TradersTeam,proto3" json:"TradersTeam,omitempty"`
	PaginationResponse   *PaginationInfoResponse             `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GetTraderTeamResponse) Reset()         { *m = GetTraderTeamResponse{} }
func (m *GetTraderTeamResponse) String() string { return proto.CompactTextString(m) }
func (*GetTraderTeamResponse) ProtoMessage()    {}
func (*GetTraderTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{117}
}
func (m *GetTraderTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderTeamResponse.Merge(m, src)
}
func (m *GetTraderTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderTeamResponse proto.InternalMessageInfo

func (m *GetTraderTeamResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTraderTeamResponse) GetTradersTeam() []*GetTraderTeamResponse_TraderTeam {
	if m != nil {
		return m.TradersTeam
	}
	return nil
}

func (m *GetTraderTeamResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetTraderTeamResponse_TraderTeam struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.Status" json:"status,omitempty"`
	IsDeleted            bool     `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Id                   int64    `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTraderTeamResponse_TraderTeam) Reset()         { *m = GetTraderTeamResponse_TraderTeam{} }
func (m *GetTraderTeamResponse_TraderTeam) String() string { return proto.CompactTextString(m) }
func (*GetTraderTeamResponse_TraderTeam) ProtoMessage()    {}
func (*GetTraderTeamResponse_TraderTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{117, 0}
}
func (m *GetTraderTeamResponse_TraderTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTraderTeamResponse_TraderTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTraderTeamResponse_TraderTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTraderTeamResponse_TraderTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraderTeamResponse_TraderTeam.Merge(m, src)
}
func (m *GetTraderTeamResponse_TraderTeam) XXX_Size() int {
	return m.Size()
}
func (m *GetTraderTeamResponse_TraderTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraderTeamResponse_TraderTeam.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraderTeamResponse_TraderTeam proto.InternalMessageInfo

func (m *GetTraderTeamResponse_TraderTeam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTraderTeamResponse_TraderTeam) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetTraderTeamResponse_TraderTeam) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetTraderTeamResponse_TraderTeam) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *GetTraderTeamResponse_TraderTeam) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GetTraderTeamResponse_TraderTeam) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderTeamRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderTeamRequest) Reset()         { *m = DeleteTraderTeamRequest{} }
func (m *DeleteTraderTeamRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderTeamRequest) ProtoMessage()    {}
func (*DeleteTraderTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{118}
}
func (m *DeleteTraderTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderTeamRequest.Merge(m, src)
}
func (m *DeleteTraderTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderTeamRequest proto.InternalMessageInfo

func (m *DeleteTraderTeamRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderTeamResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderTeamResponse) Reset()         { *m = DeleteTraderTeamResponse{} }
func (m *DeleteTraderTeamResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderTeamResponse) ProtoMessage()    {}
func (*DeleteTraderTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{119}
}
func (m *DeleteTraderTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderTeamResponse.Merge(m, src)
}
func (m *DeleteTraderTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderTeamResponse proto.InternalMessageInfo

func (m *DeleteTraderTeamResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Response for health check
type HealthCheckResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{120}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type PaginationInfoRequest struct {
	PageToken            int32    `protobuf:"varint,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaginationInfoRequest) Reset()         { *m = PaginationInfoRequest{} }
func (m *PaginationInfoRequest) String() string { return proto.CompactTextString(m) }
func (*PaginationInfoRequest) ProtoMessage()    {}
func (*PaginationInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{121}
}
func (m *PaginationInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaginationInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaginationInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaginationInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginationInfoRequest.Merge(m, src)
}
func (m *PaginationInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *PaginationInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginationInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaginationInfoRequest proto.InternalMessageInfo

func (m *PaginationInfoRequest) GetPageToken() int32 {
	if m != nil {
		return m.PageToken
	}
	return 0
}

func (m *PaginationInfoRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type PaginationInfoResponse struct {
	SelfPageToken        int32    `protobuf:"varint,1,opt,name=self_page_token,json=selfPageToken,proto3" json:"self_page_token,omitempty"`
	FirstPageToken       int32    `protobuf:"varint,2,opt,name=first_page_token,json=firstPageToken,proto3" json:"first_page_token,omitempty"`
	NextPageToken        int32    `protobuf:"varint,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken    int32    `protobuf:"varint,4,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	TotalPageCount       int32    `protobuf:"varint,5,opt,name=total_page_count,json=totalPageCount,proto3" json:"total_page_count,omitempty"`
	TotalRecordCount     int32    `protobuf:"varint,6,opt,name=total_record_count,json=totalRecordCount,proto3" json:"total_record_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaginationInfoResponse) Reset()         { *m = PaginationInfoResponse{} }
func (m *PaginationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PaginationInfoResponse) ProtoMessage()    {}
func (*PaginationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{122}
}
func (m *PaginationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaginationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaginationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaginationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginationInfoResponse.Merge(m, src)
}
func (m *PaginationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *PaginationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaginationInfoResponse proto.InternalMessageInfo

func (m *PaginationInfoResponse) GetSelfPageToken() int32 {
	if m != nil {
		return m.SelfPageToken
	}
	return 0
}

func (m *PaginationInfoResponse) GetFirstPageToken() int32 {
	if m != nil {
		return m.FirstPageToken
	}
	return 0
}

func (m *PaginationInfoResponse) GetNextPageToken() int32 {
	if m != nil {
		return m.NextPageToken
	}
	return 0
}

func (m *PaginationInfoResponse) GetPreviousPageToken() int32 {
	if m != nil {
		return m.PreviousPageToken
	}
	return 0
}

func (m *PaginationInfoResponse) GetTotalPageCount() int32 {
	if m != nil {
		return m.TotalPageCount
	}
	return 0
}

func (m *PaginationInfoResponse) GetTotalRecordCount() int32 {
	if m != nil {
		return m.TotalRecordCount
	}
	return 0
}

type CreateTraderTwsMapRequest struct {
	TwsId                int64     `protobuf:"varint,1,opt,name=tws_id,json=twsId,proto3" json:"tws_id,omitempty"`
	TraderId             int64     `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	Status               TwsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsEnabled            bool      `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsDeleted            bool      `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateTraderTwsMapRequest) Reset()         { *m = CreateTraderTwsMapRequest{} }
func (m *CreateTraderTwsMapRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTraderTwsMapRequest) ProtoMessage()    {}
func (*CreateTraderTwsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{123}
}
func (m *CreateTraderTwsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderTwsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderTwsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderTwsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderTwsMapRequest.Merge(m, src)
}
func (m *CreateTraderTwsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderTwsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderTwsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderTwsMapRequest proto.InternalMessageInfo

func (m *CreateTraderTwsMapRequest) GetTwsId() int64 {
	if m != nil {
		return m.TwsId
	}
	return 0
}

func (m *CreateTraderTwsMapRequest) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *CreateTraderTwsMapRequest) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *CreateTraderTwsMapRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateTraderTwsMapRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type CreateTraderTwsMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTraderTwsMapResponse) Reset()         { *m = CreateTraderTwsMapResponse{} }
func (m *CreateTraderTwsMapResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTraderTwsMapResponse) ProtoMessage()    {}
func (*CreateTraderTwsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{124}
}
func (m *CreateTraderTwsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTraderTwsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTraderTwsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTraderTwsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTraderTwsMapResponse.Merge(m, src)
}
func (m *CreateTraderTwsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTraderTwsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTraderTwsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTraderTwsMapResponse proto.InternalMessageInfo

func (m *CreateTraderTwsMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateTraderTwsMapRequest struct {
	TwsId                int64     `protobuf:"varint,1,opt,name=tws_id,json=twsId,proto3" json:"tws_id,omitempty"`
	TraderId             int64     `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	Status               TwsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsEnabled            bool      `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsDeleted            bool      `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Id                   int64     `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateTraderTwsMapRequest) Reset()         { *m = UpdateTraderTwsMapRequest{} }
func (m *UpdateTraderTwsMapRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderTwsMapRequest) ProtoMessage()    {}
func (*UpdateTraderTwsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{125}
}
func (m *UpdateTraderTwsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderTwsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderTwsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderTwsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderTwsMapRequest.Merge(m, src)
}
func (m *UpdateTraderTwsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderTwsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderTwsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderTwsMapRequest proto.InternalMessageInfo

func (m *UpdateTraderTwsMapRequest) GetTwsId() int64 {
	if m != nil {
		return m.TwsId
	}
	return 0
}

func (m *UpdateTraderTwsMapRequest) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *UpdateTraderTwsMapRequest) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *UpdateTraderTwsMapRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateTraderTwsMapRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *UpdateTraderTwsMapRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateTraderTwsMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTraderTwsMapResponse) Reset()         { *m = UpdateTraderTwsMapResponse{} }
func (m *UpdateTraderTwsMapResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTraderTwsMapResponse) ProtoMessage()    {}
func (*UpdateTraderTwsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{126}
}
func (m *UpdateTraderTwsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTraderTwsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTraderTwsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTraderTwsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTraderTwsMapResponse.Merge(m, src)
}
func (m *UpdateTraderTwsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTraderTwsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTraderTwsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTraderTwsMapResponse proto.InternalMessageInfo

func (m *UpdateTraderTwsMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTradersTwsMapRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetTradersTwsMapRequest) Reset()         { *m = GetTradersTwsMapRequest{} }
func (m *GetTradersTwsMapRequest) String() string { return proto.CompactTextString(m) }
func (*GetTradersTwsMapRequest) ProtoMessage()    {}
func (*GetTradersTwsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{127}
}
func (m *GetTradersTwsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTradersTwsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTradersTwsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTradersTwsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTradersTwsMapRequest.Merge(m, src)
}
func (m *GetTradersTwsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTradersTwsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTradersTwsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTradersTwsMapRequest proto.InternalMessageInfo

func (m *GetTradersTwsMapRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetTradersTwsMapResponse struct {
	Code                 int64                                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	TradersTws           []*GetTradersTwsMapResponse_TraderTws `protobuf:"bytes,2,rep,name=tradersTws,proto3" json:"tradersTws,omitempty"`
	PaginationResponse   *PaginationInfoResponse               `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetTradersTwsMapResponse) Reset()         { *m = GetTradersTwsMapResponse{} }
func (m *GetTradersTwsMapResponse) String() string { return proto.CompactTextString(m) }
func (*GetTradersTwsMapResponse) ProtoMessage()    {}
func (*GetTradersTwsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{128}
}
func (m *GetTradersTwsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTradersTwsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTradersTwsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTradersTwsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTradersTwsMapResponse.Merge(m, src)
}
func (m *GetTradersTwsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTradersTwsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTradersTwsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTradersTwsMapResponse proto.InternalMessageInfo

func (m *GetTradersTwsMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTradersTwsMapResponse) GetTradersTws() []*GetTradersTwsMapResponse_TraderTws {
	if m != nil {
		return m.TradersTws
	}
	return nil
}

func (m *GetTradersTwsMapResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetTradersTwsMapResponse_TraderTws struct {
	TwsId                int64     `protobuf:"varint,1,opt,name=tws_id,json=twsId,proto3" json:"tws_id,omitempty"`
	TraderId             int64     `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	Status               TwsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsEnabled            bool      `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsDeleted            bool      `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Id                   int64     `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetTradersTwsMapResponse_TraderTws) Reset()         { *m = GetTradersTwsMapResponse_TraderTws{} }
func (m *GetTradersTwsMapResponse_TraderTws) String() string { return proto.CompactTextString(m) }
func (*GetTradersTwsMapResponse_TraderTws) ProtoMessage()    {}
func (*GetTradersTwsMapResponse_TraderTws) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{128, 0}
}
func (m *GetTradersTwsMapResponse_TraderTws) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTradersTwsMapResponse_TraderTws) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTradersTwsMapResponse_TraderTws.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTradersTwsMapResponse_TraderTws) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTradersTwsMapResponse_TraderTws.Merge(m, src)
}
func (m *GetTradersTwsMapResponse_TraderTws) XXX_Size() int {
	return m.Size()
}
func (m *GetTradersTwsMapResponse_TraderTws) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTradersTwsMapResponse_TraderTws.DiscardUnknown(m)
}

var xxx_messageInfo_GetTradersTwsMapResponse_TraderTws proto.InternalMessageInfo

func (m *GetTradersTwsMapResponse_TraderTws) GetTwsId() int64 {
	if m != nil {
		return m.TwsId
	}
	return 0
}

func (m *GetTradersTwsMapResponse_TraderTws) GetTraderId() int64 {
	if m != nil {
		return m.TraderId
	}
	return 0
}

func (m *GetTradersTwsMapResponse_TraderTws) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *GetTradersTwsMapResponse_TraderTws) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetTradersTwsMapResponse_TraderTws) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GetTradersTwsMapResponse_TraderTws) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderTwsMapRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderTwsMapRequest) Reset()         { *m = DeleteTraderTwsMapRequest{} }
func (m *DeleteTraderTwsMapRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderTwsMapRequest) ProtoMessage()    {}
func (*DeleteTraderTwsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{129}
}
func (m *DeleteTraderTwsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderTwsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderTwsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderTwsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderTwsMapRequest.Merge(m, src)
}
func (m *DeleteTraderTwsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderTwsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderTwsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderTwsMapRequest proto.InternalMessageInfo

func (m *DeleteTraderTwsMapRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTraderTwsMapResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTraderTwsMapResponse) Reset()         { *m = DeleteTraderTwsMapResponse{} }
func (m *DeleteTraderTwsMapResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTraderTwsMapResponse) ProtoMessage()    {}
func (*DeleteTraderTwsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{130}
}
func (m *DeleteTraderTwsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTraderTwsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTraderTwsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTraderTwsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTraderTwsMapResponse.Merge(m, src)
}
func (m *DeleteTraderTwsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTraderTwsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTraderTwsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTraderTwsMapResponse proto.InternalMessageInfo

func (m *DeleteTraderTwsMapResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// TWS Creation
type CreateTwsRequest struct {
	TwsCode              string    `protobuf:"bytes,1,opt,name=tws_code,json=twsCode,proto3" json:"tws_code,omitempty"`
	IsEnabled            bool      `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               TwsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsActive             bool      `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsDeleted            bool      `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateTwsRequest) Reset()         { *m = CreateTwsRequest{} }
func (m *CreateTwsRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTwsRequest) ProtoMessage()    {}
func (*CreateTwsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{131}
}
func (m *CreateTwsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTwsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTwsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTwsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTwsRequest.Merge(m, src)
}
func (m *CreateTwsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTwsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTwsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTwsRequest proto.InternalMessageInfo

func (m *CreateTwsRequest) GetTwsCode() string {
	if m != nil {
		return m.TwsCode
	}
	return ""
}

func (m *CreateTwsRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateTwsRequest) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *CreateTwsRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CreateTwsRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type CreateTwsResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTwsResponse) Reset()         { *m = CreateTwsResponse{} }
func (m *CreateTwsResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTwsResponse) ProtoMessage()    {}
func (*CreateTwsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{132}
}
func (m *CreateTwsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTwsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTwsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTwsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTwsResponse.Merge(m, src)
}
func (m *CreateTwsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTwsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTwsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTwsResponse proto.InternalMessageInfo

func (m *CreateTwsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateTwsRequest struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TwsCode              string    `protobuf:"bytes,2,opt,name=tws_code,json=twsCode,proto3" json:"tws_code,omitempty"`
	IsEnabled            bool      `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               TwsStatus `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsActive             bool      `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsDeleted            bool      `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateTwsRequest) Reset()         { *m = UpdateTwsRequest{} }
func (m *UpdateTwsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTwsRequest) ProtoMessage()    {}
func (*UpdateTwsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{133}
}
func (m *UpdateTwsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTwsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTwsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTwsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTwsRequest.Merge(m, src)
}
func (m *UpdateTwsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTwsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTwsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTwsRequest proto.InternalMessageInfo

func (m *UpdateTwsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateTwsRequest) GetTwsCode() string {
	if m != nil {
		return m.TwsCode
	}
	return ""
}

func (m *UpdateTwsRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *UpdateTwsRequest) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *UpdateTwsRequest) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UpdateTwsRequest) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type UpdateTwsResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTwsResponse) Reset()         { *m = UpdateTwsResponse{} }
func (m *UpdateTwsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTwsResponse) ProtoMessage()    {}
func (*UpdateTwsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{134}
}
func (m *UpdateTwsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTwsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTwsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTwsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTwsResponse.Merge(m, src)
}
func (m *UpdateTwsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTwsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTwsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTwsResponse proto.InternalMessageInfo

func (m *UpdateTwsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTwsRequest struct {
	PaginationRequest    *PaginationInfoRequest `protobuf:"bytes,1,opt,name=pagination_request,json=paginationRequest,proto3" json:"pagination_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetTwsRequest) Reset()         { *m = GetTwsRequest{} }
func (m *GetTwsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTwsRequest) ProtoMessage()    {}
func (*GetTwsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{135}
}
func (m *GetTwsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwsRequest.Merge(m, src)
}
func (m *GetTwsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTwsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwsRequest proto.InternalMessageInfo

func (m *GetTwsRequest) GetPaginationRequest() *PaginationInfoRequest {
	if m != nil {
		return m.PaginationRequest
	}
	return nil
}

type GetTwsResponse struct {
	Code                 int64                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Tws                  []*GetTwsResponseTwsList `protobuf:"bytes,2,rep,name=tws,proto3" json:"tws,omitempty"`
	PaginationResponse   *PaginationInfoResponse  `protobuf:"bytes,3,opt,name=pagination_response,json=paginationResponse,proto3" json:"pagination_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetTwsResponse) Reset()         { *m = GetTwsResponse{} }
func (m *GetTwsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTwsResponse) ProtoMessage()    {}
func (*GetTwsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{136}
}
func (m *GetTwsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwsResponse.Merge(m, src)
}
func (m *GetTwsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTwsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwsResponse proto.InternalMessageInfo

func (m *GetTwsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTwsResponse) GetTws() []*GetTwsResponseTwsList {
	if m != nil {
		return m.Tws
	}
	return nil
}

func (m *GetTwsResponse) GetPaginationResponse() *PaginationInfoResponse {
	if m != nil {
		return m.PaginationResponse
	}
	return nil
}

type GetTwsResponseTwsList struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TwsCode              string    `protobuf:"bytes,2,opt,name=tws_code,json=twsCode,proto3" json:"tws_code,omitempty"`
	IsEnabled            bool      `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Status               TwsStatus `protobuf:"varint,4,opt,name=status,proto3,enum=oms_user_management.TwsStatus" json:"status,omitempty"`
	IsActive             bool      `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsDeleted            bool      `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetTwsResponseTwsList) Reset()         { *m = GetTwsResponseTwsList{} }
func (m *GetTwsResponseTwsList) String() string { return proto.CompactTextString(m) }
func (*GetTwsResponseTwsList) ProtoMessage()    {}
func (*GetTwsResponseTwsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{136, 0}
}
func (m *GetTwsResponseTwsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwsResponseTwsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwsResponseTwsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwsResponseTwsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwsResponseTwsList.Merge(m, src)
}
func (m *GetTwsResponseTwsList) XXX_Size() int {
	return m.Size()
}
func (m *GetTwsResponseTwsList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwsResponseTwsList.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwsResponseTwsList proto.InternalMessageInfo

func (m *GetTwsResponseTwsList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetTwsResponseTwsList) GetTwsCode() string {
	if m != nil {
		return m.TwsCode
	}
	return ""
}

func (m *GetTwsResponseTwsList) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *GetTwsResponseTwsList) GetStatus() TwsStatus {
	if m != nil {
		return m.Status
	}
	return TwsStatus_ASSIGNED
}

func (m *GetTwsResponseTwsList) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetTwsResponseTwsList) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type DeleteTwsRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTwsRequest) Reset()         { *m = DeleteTwsRequest{} }
func (m *DeleteTwsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTwsRequest) ProtoMessage()    {}
func (*DeleteTwsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{137}
}
func (m *DeleteTwsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTwsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTwsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTwsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTwsRequest.Merge(m, src)
}
func (m *DeleteTwsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTwsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTwsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTwsRequest proto.InternalMessageInfo

func (m *DeleteTwsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTwsResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTwsResponse) Reset()         { *m = DeleteTwsResponse{} }
func (m *DeleteTwsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTwsResponse) ProtoMessage()    {}
func (*DeleteTwsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_928c265d3b854e52, []int{138}
}
func (m *DeleteTwsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTwsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTwsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTwsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTwsResponse.Merge(m, src)
}
func (m *DeleteTwsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTwsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTwsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTwsResponse proto.InternalMessageInfo

func (m *DeleteTwsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("oms_user_management.PermissionType", PermissionType_name, PermissionType_value)
	proto.RegisterEnum("oms_user_management.HTTPMethods", HTTPMethods_name, HTTPMethods_value)
	proto.RegisterEnum("oms_user_management.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("oms_user_management.Status", Status_name, Status_value)
	proto.RegisterEnum("oms_user_management.TwsStatus", TwsStatus_name, TwsStatus_value)
	proto.RegisterEnum("oms_user_management.TradeRole", TradeRole_name, TradeRole_value)
	proto.RegisterEnum("oms_user_management.UserType", UserType_name, UserType_value)
	proto.RegisterType((*CreateEmployeeRequest)(nil), "oms_user_management.CreateEmployeeRequest")
	proto.RegisterType((*CreateEmployeeResponse)(nil), "oms_user_management.CreateEmployeeResponse")
	proto.RegisterType((*UpdateEmployeeRequest)(nil), "oms_user_management.UpdateEmployeeRequest")
	proto.RegisterType((*UpdateEmployeeResponse)(nil), "oms_user_management.UpdateEmployeeResponse")
	proto.RegisterType((*GetEmployeeByIdRequest)(nil), "oms_user_management.GetEmployeeByIdRequest")
	proto.RegisterType((*GetEmployeeByIdResponse)(nil), "oms_user_management.GetEmployeeByIdResponse")
	proto.RegisterType((*CreateBrokerAdminRequest)(nil), "oms_user_management.CreateBrokerAdminRequest")
	proto.RegisterType((*CreateBrokerAdminResponse)(nil), "oms_user_management.CreateBrokerAdminResponse")
	proto.RegisterType((*UpdateBrokerAdminRequest)(nil), "oms_user_management.UpdateBrokerAdminRequest")
	proto.RegisterType((*UpdateBrokerAdminResponse)(nil), "oms_user_management.UpdateBrokerAdminResponse")
	proto.RegisterType((*GetBrokerAdminByIdRequest)(nil), "oms_user_management.GetBrokerAdminByIdRequest")
	proto.RegisterType((*GetBrokerAdminByIdResponse)(nil), "oms_user_management.GetBrokerAdminByIdResponse")
	proto.RegisterType((*DeleteBrokerAdminRequest)(nil), "oms_user_management.DeleteBrokerAdminRequest")
	proto.RegisterType((*DeleteBrokerAdminResponse)(nil), "oms_user_management.DeleteBrokerAdminResponse")
	proto.RegisterType((*CreateTraderRequest)(nil), "oms_user_management.CreateTraderRequest")
	proto.RegisterType((*CreateTraderResponse)(nil), "oms_user_management.CreateTraderResponse")
	proto.RegisterType((*UpdateTraderRequest)(nil), "oms_user_management.UpdateTraderRequest")
	proto.RegisterType((*UpdateTraderResponse)(nil), "oms_user_management.UpdateTraderResponse")
	proto.RegisterType((*GetTraderByIdRequest)(nil), "oms_user_management.GetTraderByIdRequest")
	proto.RegisterType((*GetTraderByIdResponse)(nil), "oms_user_management.GetTraderByIdResponse")
	proto.RegisterType((*GetInvestorsRequest)(nil), "oms_user_management.GetInvestorsRequest")
	proto.RegisterType((*UserWithInvestorType)(nil), "oms_user_management.UserWithInvestorType")
	proto.RegisterType((*GetInvestorsResponse)(nil), "oms_user_management.GetInvestorsResponse")
	proto.RegisterType((*GetInvestorByIdRequest)(nil), "oms_user_management.GetInvestorByIdRequest")
	proto.RegisterType((*GetInvestorByIdResponse)(nil), "oms_user_management.GetInvestorByIdResponse")
	proto.RegisterType((*UpdateInvestorRequest)(nil), "oms_user_management.UpdateInvestorRequest")
	proto.RegisterType((*UpdateInvestorResponse)(nil), "oms_user_management.UpdateInvestorResponse")
	proto.RegisterType((*CreateInvestorRequest)(nil), "oms_user_management.CreateInvestorRequest")
	proto.RegisterType((*CreateInvestorResponse)(nil), "oms_user_management.CreateInvestorResponse")
	proto.RegisterType((*CreateMapRolePermissionRequest)(nil), "oms_user_management.CreateMapRolePermissionRequest")
	proto.RegisterType((*CreateMapRolePermissionResponse)(nil), "oms_user_management.CreateMapRolePermissionResponse")
	proto.RegisterType((*UpdateMapRolePermissionRequest)(nil), "oms_user_management.UpdateMapRolePermissionRequest")
	proto.RegisterType((*UpdateMapRolePermissionResponse)(nil), "oms_user_management.UpdateMapRolePermissionResponse")
	proto.RegisterType((*GetMapRolePermissionsRequest)(nil), "oms_user_management.GetMapRolePermissionsRequest")
	proto.RegisterType((*GetMapRolePermissionsResponse)(nil), "oms_user_management.GetMapRolePermissionsResponse")
	proto.RegisterType((*GetMapRolePermissionsResponseMappedRoleList)(nil), "oms_user_management.GetMapRolePermissionsResponse.mappedRoleList")
	proto.RegisterType((*GetMapRolePermissionByIdRequest)(nil), "oms_user_management.GetMapRolePermissionByIdRequest")
	proto.RegisterType((*GetMapRolePermissionByIdResponse)(nil), "oms_user_management.GetMapRolePermissionByIdResponse")
	proto.RegisterType((*RolesAndPermissions)(nil), "oms_user_management.RolesAndPermissions")
	proto.RegisterType((*DeleteMapRolePermissionRequest)(nil), "oms_user_management.DeleteMapRolePermissionRequest")
	proto.RegisterType((*DeleteMapRolePermissionResponse)(nil), "oms_user_management.DeleteMapRolePermissionResponse")
	proto.RegisterType((*CreateMapUserRoleRequest)(nil), "oms_user_management.CreateMapUserRoleRequest")
	proto.RegisterType((*CreateMapUserRoleResponse)(nil), "oms_user_management.CreateMapUserRoleResponse")
	proto.RegisterType((*UpdateMapUserRoleRequest)(nil), "oms_user_management.UpdateMapUserRoleRequest")
	proto.RegisterType((*UpdateMapUserRoleResponse)(nil), "oms_user_management.UpdateMapUserRoleResponse")
	proto.RegisterType((*GetMapUserRolesRequest)(nil), "oms_user_management.GetMapUserRolesRequest")
	proto.RegisterType((*GetMapUserRolesResponse)(nil), "oms_user_management.GetMapUserRolesResponse")
	proto.RegisterType((*GetMapUserRolesResponseMappedUserRoleList)(nil), "oms_user_management.GetMapUserRolesResponse.mappedUserRoleList")
	proto.RegisterType((*GetMapUserRoleByIdRequest)(nil), "oms_user_management.GetMapUserRoleByIdRequest")
	proto.RegisterType((*GetMapUserRoleByIdResponse)(nil), "oms_user_management.GetMapUserRoleByIdResponse")
	proto.RegisterType((*DeleteMapUserRoleRequest)(nil), "oms_user_management.DeleteMapUserRoleRequest")
	proto.RegisterType((*DeleteMapUserRoleResponse)(nil), "oms_user_management.DeleteMapUserRoleResponse")
	proto.RegisterType((*CreateMapUserPermissionRequest)(nil), "oms_user_management.CreateMapUserPermissionRequest")
	proto.RegisterType((*CreateMapUserPermissionResponse)(nil), "oms_user_management.CreateMapUserPermissionResponse")
	proto.RegisterType((*UpdateMapUserPermissionRequest)(nil), "oms_user_management.UpdateMapUserPermissionRequest")
	proto.RegisterType((*UpdateMapUserPermissionResponse)(nil), "oms_user_management.UpdateMapUserPermissionResponse")
	proto.RegisterType((*GetUserPermissionsByUserIdRequest)(nil), "oms_user_management.GetUserPermissionsByUserIdRequest")
	proto.RegisterType((*GetUserPermissionsByUserIdResponse)(nil), "oms_user_management.GetUserPermissionsByUserIdResponse")
	proto.RegisterType((*GetUserPermissionsByUserIdResponse_UserPermissions)(nil), "oms_user_management.GetUserPermissionsByUserIdResponse.UserPermissions")
	proto.RegisterType((*DeleteMapUserPermissionRequest)(nil), "oms_user_management.DeleteMapUserPermissionRequest")
	proto.RegisterType((*DeleteMapUserPermissionResponse)(nil), "oms_user_management.DeleteMapUserPermissionResponse")
	proto.RegisterType((*CreateRoleRequest)(nil), "oms_user_management.CreateRoleRequest")
	proto.RegisterType((*CreateRoleResponse)(nil), "oms_user_management.CreateRoleResponse")
	proto.RegisterType((*UpdateRoleRequest)(nil), "oms_user_management.UpdateRoleRequest")
	proto.RegisterType((*UpdateRoleResponse)(nil), "oms_user_management.UpdateRoleResponse")
	proto.RegisterType((*GetRolesRequest)(nil), "oms_user_management.GetRolesRequest")
	proto.RegisterType((*GetRolesResponse)(nil), "oms_user_management.GetRolesResponse")
	proto.RegisterType((*GetRolesResponse_RoleList)(nil), "oms_user_management.GetRolesResponse.RoleList")
	proto.RegisterType((*GetRoleByIdRequest)(nil), "oms_user_management.GetRoleByIdRequest")
	proto.RegisterType((*GetRoleByIdResponse)(nil), "oms_user_management.GetRoleByIdResponse")
	proto.RegisterType((*DeleteRoleRequest)(nil), "oms_user_management.DeleteRoleRequest")
	proto.RegisterType((*DeleteRoleResponse)(nil), "oms_user_management.DeleteRoleResponse")
	proto.RegisterType((*CreatePermissionRequest)(nil), "oms_user_management.CreatePermissionRequest")
	proto.RegisterType((*CreatePermissionResponse)(nil), "oms_user_management.CreatePermissionResponse")
	proto.RegisterType((*UpdatePermissionRequest)(nil), "oms_user_management.UpdatePermissionRequest")
	proto.RegisterType((*UpdatePermissionResponse)(nil), "oms_user_management.UpdatePermissionResponse")
	proto.RegisterType((*GetPermissionsRequest)(nil), "oms_user_management.GetPermissionsRequest")
	proto.RegisterType((*GetPermissionsResponse)(nil), "oms_user_management.GetPermissionsResponse")
	proto.RegisterType((*GetPermissionsResponse_PermissionList)(nil), "oms_user_management.GetPermissionsResponse.PermissionList")
	proto.RegisterType((*GetPermissionByIdRequest)(nil), "oms_user_management.GetPermissionByIdRequest")
	proto.RegisterType((*GetPermissionByIdResponse)(nil), "oms_user_management.GetPermissionByIdResponse")
	proto.RegisterType((*DeletePermissionRequest)(nil), "oms_user_management.DeletePermissionRequest")
	proto.RegisterType((*DeletePermissionResponse)(nil), "oms_user_management.DeletePermissionResponse")
	proto.RegisterType((*CreateAuditLogRequest)(nil), "oms_user_management.CreateAuditLogRequest")
	proto.RegisterType((*CreateAuditLogResponse)(nil), "oms_user_management.CreateAuditLogResponse")
	proto.RegisterType((*GetAuditLogsRequest)(nil), "oms_user_management.GetAuditLogsRequest")
	proto.RegisterType((*GetAuditLogsResponse)(nil), "oms_user_management.GetAuditLogsResponse")
	proto.RegisterType((*GetAuditLogsResponseAuditLogList)(nil), "oms_user_management.GetAuditLogsResponse.auditLogList")
	proto.RegisterType((*GetAuditLogByIdRequest)(nil), "oms_user_management.GetAuditLogByIdRequest")
	proto.RegisterType((*GetAuditLogByIdResponse)(nil), "oms_user_management.GetAuditLogByIdResponse")
	proto.RegisterType((*CreateBranchRequest)(nil), "oms_user_management.CreateBranchRequest")
	proto.RegisterType((*CreateBranchResponse)(nil), "oms_user_management.CreateBranchResponse")
	proto.RegisterType((*UpdateBranchRequest)(nil), "oms_user_management.UpdateBranchRequest")
	proto.RegisterType((*UpdateBranchResponse)(nil), "oms_user_management.UpdateBranchResponse")
	proto.RegisterType((*GetBranchesRequest)(nil), "oms_user_management.GetBranchesRequest")
	proto.RegisterType((*GetBranchesResponse)(nil), "oms_user_management.GetBranchesResponse")
	proto.RegisterType((*GetBranchesResponseBranchList)(nil), "oms_user_management.GetBranchesResponse.branchList")
	proto.RegisterType((*GetBranchByIdRequest)(nil), "oms_user_management.GetBranchByIdRequest")
	proto.RegisterType((*GetBranchByIdResponse)(nil), "oms_user_management.GetBranchByIdResponse")
	proto.RegisterType((*DeleteBranchRequest)(nil), "oms_user_management.DeleteBranchRequest")
	proto.RegisterType((*DeleteBranchResponse)(nil), "oms_user_management.DeleteBranchResponse")
	proto.RegisterType((*CreateBrokerHouseRequest)(nil), "oms_user_management.CreateBrokerHouseRequest")
	proto.RegisterType((*CreateBrokerHouseResponse)(nil), "oms_user_management.CreateBrokerHouseResponse")
	proto.RegisterType((*UpdateBrokerHouseRequest)(nil), "oms_user_management.UpdateBrokerHouseRequest")
	proto.RegisterType((*UpdateBrokerHouseResponse)(nil), "oms_user_management.UpdateBrokerHouseResponse")
	proto.RegisterType((*GetBrokerHousesRequest)(nil), "oms_user_management.GetBrokerHousesRequest")
	proto.RegisterType((*GetBrokerHousesResponse)(nil), "oms_user_management.GetBrokerHousesResponse")
	proto.RegisterType((*GetBrokerHousesResponseBrokerHouseList)(nil), "oms_user_management.GetBrokerHousesResponse.brokerHouseList")
	proto.RegisterType((*GetBrokerHouseByIdRequest)(nil), "oms_user_management.GetBrokerHouseByIdRequest")
	proto.RegisterType((*GetBrokerHouseByIdResponse)(nil), "oms_user_management.GetBrokerHouseByIdResponse")
	proto.RegisterType((*DeleteBrokerHouseRequest)(nil), "oms_user_management.DeleteBrokerHouseRequest")
	proto.RegisterType((*DeleteBrokerHouseResponse)(nil), "oms_user_management.DeleteBrokerHouseResponse")
	proto.RegisterType((*CreateTraderMapRequest)(nil), "oms_user_management.CreateTraderMapRequest")
	proto.RegisterType((*CreateTraderMapResponse)(nil), "oms_user_management.CreateTraderMapResponse")
	proto.RegisterType((*UpdateTraderMapRequest)(nil), "oms_user_management.UpdateTraderMapRequest")
	proto.RegisterType((*UpdateTraderMapResponse)(nil), "oms_user_management.UpdateTraderMapResponse")
	proto.RegisterType((*GetTraderMapRequest)(nil), "oms_user_management.GetTraderMapRequest")
	proto.RegisterType((*GetTraderMapResponse)(nil), "oms_user_management.GetTraderMapResponse")
	proto.RegisterType((*GetTraderMapResponse_TraderMap)(nil), "oms_user_management.GetTraderMapResponse.TraderMap")
	proto.RegisterType((*DeleteTraderMapRequest)(nil), "oms_user_management.DeleteTraderMapRequest")
	proto.RegisterType((*DeleteTraderMapResponse)(nil), "oms_user_management.DeleteTraderMapResponse")
	proto.RegisterType((*CreateTraderTeamRequest)(nil), "oms_user_management.CreateTraderTeamRequest")
	proto.RegisterType((*CreateTraderTeamResponse)(nil), "oms_user_management.CreateTraderTeamResponse")
	proto.RegisterType((*UpdateTraderTeamRequest)(nil), "oms_user_management.UpdateTraderTeamRequest")
	proto.RegisterType((*UpdateTraderTeamResponse)(nil), "oms_user_management.UpdateTraderTeamResponse")
	proto.RegisterType((*GetTraderTeamRequest)(nil), "oms_user_management.GetTraderTeamRequest")
	proto.RegisterType((*GetTraderTeamResponse)(nil), "oms_user_management.GetTraderTeamResponse")
	proto.RegisterType((*GetTraderTeamResponse_TraderTeam)(nil), "oms_user_management.GetTraderTeamResponse.TraderTeam")
	proto.RegisterType((*DeleteTraderTeamRequest)(nil), "oms_user_management.DeleteTraderTeamRequest")
	proto.RegisterType((*DeleteTraderTeamResponse)(nil), "oms_user_management.DeleteTraderTeamResponse")
	proto.RegisterType((*HealthCheckResponse)(nil), "oms_user_management.HealthCheckResponse")
	proto.RegisterType((*PaginationInfoRequest)(nil), "oms_user_management.PaginationInfoRequest")
	proto.RegisterType((*PaginationInfoResponse)(nil), "oms_user_management.PaginationInfoResponse")
	proto.RegisterType((*CreateTraderTwsMapRequest)(nil), "oms_user_management.CreateTraderTwsMapRequest")
	proto.RegisterType((*CreateTraderTwsMapResponse)(nil), "oms_user_management.CreateTraderTwsMapResponse")
	proto.RegisterType((*UpdateTraderTwsMapRequest)(nil), "oms_user_management.UpdateTraderTwsMapRequest")
	proto.RegisterType((*UpdateTraderTwsMapResponse)(nil), "oms_user_management.UpdateTraderTwsMapResponse")
	proto.RegisterType((*GetTradersTwsMapRequest)(nil), "oms_user_management.GetTradersTwsMapRequest")
	proto.RegisterType((*GetTradersTwsMapResponse)(nil), "oms_user_management.GetTradersTwsMapResponse")
	proto.RegisterType((*GetTradersTwsMapResponse_TraderTws)(nil), "oms_user_management.GetTradersTwsMapResponse.TraderTws")
	proto.RegisterType((*DeleteTraderTwsMapRequest)(nil), "oms_user_management.DeleteTraderTwsMapRequest")
	proto.RegisterType((*DeleteTraderTwsMapResponse)(nil), "oms_user_management.DeleteTraderTwsMapResponse")
	proto.RegisterType((*CreateTwsRequest)(nil), "oms_user_management.CreateTwsRequest")
	proto.RegisterType((*CreateTwsResponse)(nil), "oms_user_management.CreateTwsResponse")
	proto.RegisterType((*UpdateTwsRequest)(nil), "oms_user_management.UpdateTwsRequest")
	proto.RegisterType((*UpdateTwsResponse)(nil), "oms_user_management.UpdateTwsResponse")
	proto.RegisterType((*GetTwsRequest)(nil), "oms_user_management.GetTwsRequest")
	proto.RegisterType((*GetTwsResponse)(nil), "oms_user_management.GetTwsResponse")
	proto.RegisterType((*GetTwsResponseTwsList)(nil), "oms_user_management.GetTwsResponse.twsList")
	proto.RegisterType((*DeleteTwsRequest)(nil), "oms_user_management.DeleteTwsRequest")
	proto.RegisterType((*DeleteTwsResponse)(nil), "oms_user_management.DeleteTwsResponse")
}

func init() { proto.RegisterFile("oms-user-management.proto", fileDescriptor_928c265d3b854e52) }

var fileDescriptor_928c265d3b854e52 = []byte{
	// 5407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6b, 0x6c, 0x1c, 0xc7,
	0x7d, 0xf7, 0xf2, 0xf8, 0x38, 0xfe, 0x8f, 0x8f, 0xe3, 0x50, 0x8f, 0xf3, 0xd9, 0x96, 0xe4, 0xb5,
	0x25, 0x51, 0x47, 0xf1, 0x28, 0x53, 0x96, 0x9c, 0xc8, 0x4e, 0x13, 0x8a, 0xbc, 0x50, 0xd7, 0x4a,
	0x24, 0x7b, 0x3c, 0x59, 0xb0, 0x90, 0xf6, 0xb2, 0xbc, 0x1b, 0x91, 0x5b, 0xdd, 0xdd, 0x9e, 0x77,
	0x97, 0x64, 0x18, 0xc3, 0x41, 0xfa, 0x48, 0x80, 0x3e, 0x52, 0xb4, 0x29, 0xda, 0x02, 0x69, 0xd2,
	0x16, 0x2e, 0xdc, 0x34, 0x41, 0x82, 0x02, 0x05, 0xfa, 0xa9, 0x5f, 0xd2, 0xc2, 0x69, 0xfa, 0xa5,
	0x40, 0xd0, 0xa0, 0x5f, 0x8a, 0x02, 0x2d, 0x8c, 0x7e, 0x29, 0xfa, 0xa9, 0x45, 0x8b, 0x02, 0x0d,
	0x02, 0x14, 0x3b, 0x33, 0xbb, 0x3b, 0xfb, 0x98, 0xd9, 0x3d, 0xdb, 0x64, 0xa4, 0xf8, 0xbe, 0x08,
	0xba, 0xe1, 0x7f, 0x66, 0xfe, 0x33, 0xff, 0xdf, 0xff, 0x31, 0xaf, 0xff, 0xc2, 0x93, 0x46, 0xc7,
	0x5a, 0xd8, 0xb3, 0xb0, 0xb9, 0xd0, 0xd1, 0xba, 0xda, 0x0e, 0xee, 0xe0, 0xae, 0x5d, 0xee, 0x99,
	0x86, 0x6d, 0xa0, 0x59, 0xa3, 0x63, 0x35, 0x9c, 0x3f, 0x35, 0xfc, 0x3f, 0x15, 0x9f, 0xda, 0x31,
	0x8c, 0x9d, 0x36, 0x5e, 0x24, 0x24, 0xdb, 0x7b, 0x0f, 0x16, 0x71, 0xa7, 0x67, 0x1f, 0xd2, 0x1a,
	0xc5, 0xa7, 0xd9, 0x1f, 0xb5, 0x9e, 0xbe, 0xa8, 0x75, 0xbb, 0x86, 0xad, 0xd9, 0xba, 0xd1, 0xb5,
	0x42, 0x7f, 0xf5, 0xaa, 0x5a, 0xb6, 0xb9, 0xd7, 0x64, 0xbd, 0xa9, 0x5f, 0x1e, 0x86, 0x93, 0x2b,
	0x26, 0xd6, 0x6c, 0x5c, 0xe9, 0xf4, 0xda, 0xc6, 0x21, 0xc6, 0x35, 0xfc, 0xfa, 0x1e, 0xb6, 0x6c,
	0xf4, 0x14, 0x8c, 0x13, 0x2e, 0xba, 0x5a, 0x07, 0x17, 0x94, 0x73, 0xca, 0xdc, 0x78, 0x2d, 0xeb,
	0x14, 0xac, 0x6b, 0x1d, 0x8c, 0x4e, 0xc3, 0x98, 0xb6, 0x67, 0xef, 0x36, 0xf4, 0x56, 0x61, 0xe8,
	0x9c, 0x32, 0x97, 0xa9, 0x8d, 0x3a, 0x3f, 0xab, 0x2d, 0x74, 0x83, 0xd5, 0xb2, 0x0f, 0x7b, 0xb8,
	0x90, 0x39, 0xa7, 0xcc, 0x4d, 0x2d, 0x3d, 0x53, 0x8e, 0x19, 0x51, 0xd9, 0xf9, 0x5d, 0x3f, 0xec,
	0x61, 0xda, 0xa8, 0xf3, 0x3f, 0xa7, 0xc7, 0xa6, 0xd6, 0x6d, 0xb4, 0x8d, 0x1d, 0xbd, 0x5b, 0x18,
	0x3e, 0xa7, 0xcc, 0x65, 0x6b, 0xd9, 0xa6, 0xd6, 0xbd, 0xed, 0xfc, 0x46, 0x79, 0xc8, 0x74, 0xf5,
	0x56, 0x61, 0x84, 0x30, 0xe2, 0xfc, 0x17, 0x9d, 0x85, 0x9c, 0x6e, 0x35, 0xf6, 0xb1, 0xa9, 0x3f,
	0xd0, 0x71, 0xab, 0x30, 0x4a, 0x2a, 0x80, 0x6e, 0xbd, 0xca, 0x4a, 0xd0, 0x33, 0x00, 0xba, 0xd5,
	0xc0, 0x5d, 0x6d, 0xbb, 0x8d, 0x5b, 0x85, 0x31, 0xf2, 0xf7, 0x71, 0xdd, 0xaa, 0xd0, 0x02, 0xf4,
	0x1c, 0x4c, 0xe2, 0x8e, 0xa6, 0xb7, 0x1b, 0x5a, 0xab, 0x65, 0x62, 0xcb, 0x2a, 0x64, 0x49, 0xdb,
	0x13, 0xa4, 0x70, 0x99, 0x96, 0xa1, 0x67, 0x61, 0xa2, 0xb7, 0x6b, 0x74, 0x71, 0xa3, 0xbb, 0xd7,
	0xd9, 0xc6, 0x66, 0x61, 0x9c, 0xd0, 0xe4, 0x48, 0xd9, 0x3a, 0x29, 0x72, 0x48, 0x9a, 0xc6, 0x5e,
	0xd7, 0x36, 0x0f, 0x1b, 0x4d, 0xa3, 0x85, 0x0b, 0x40, 0x49, 0x58, 0xd9, 0x8a, 0xd1, 0x22, 0xd3,
	0x45, 0xc6, 0xaf, 0xb7, 0x0a, 0x39, 0x3a, 0x5d, 0xce, 0xcf, 0x6a, 0x0b, 0x5d, 0x85, 0x51, 0xcb,
	0xd6, 0xec, 0x3d, 0xab, 0x30, 0x41, 0xe6, 0xea, 0xa9, 0xd8, 0xb9, 0xda, 0x22, 0x24, 0x35, 0x46,
	0xea, 0xcc, 0xd3, 0xb6, 0xa9, 0x75, 0x9b, 0x64, 0xfa, 0x27, 0x49, 0x7b, 0x59, 0x5a, 0x50, 0x6d,
	0xa1, 0x73, 0x90, 0x6b, 0x61, 0x4b, 0xdf, 0xe9, 0x12, 0x10, 0x14, 0xa6, 0x28, 0x33, 0x5c, 0x11,
	0xa3, 0x68, 0x9a, 0x7a, 0x8f, 0x50, 0x4c, 0x7b, 0x14, 0x6e, 0x91, 0x7a, 0x19, 0x4e, 0x85, 0x31,
	0x61, 0xf5, 0x8c, 0xae, 0x85, 0x11, 0x82, 0x61, 0x32, 0x46, 0x85, 0xf4, 0x4a, 0xfe, 0x4f, 0x20,
	0x74, 0xb7, 0xd7, 0x1a, 0x40, 0x68, 0x00, 0xa1, 0x00, 0x84, 0xc2, 0x98, 0x90, 0x40, 0xe8, 0x05,
	0x38, 0xb5, 0x86, 0x6d, 0x97, 0xf4, 0xe6, 0x61, 0xb5, 0xe5, 0x42, 0x88, 0x1b, 0xb6, 0xc2, 0x0f,
	0x5b, 0xfd, 0xcb, 0x21, 0x38, 0x1d, 0xa9, 0xc3, 0xba, 0x10, 0x55, 0x0a, 0x02, 0x72, 0x28, 0x04,
	0xc8, 0xf7, 0x83, 0xbb, 0x08, 0x10, 0x86, 0x53, 0x00, 0x61, 0x24, 0x19, 0x08, 0xa3, 0x51, 0x20,
	0x04, 0x44, 0x37, 0x26, 0x17, 0x5d, 0x36, 0x22, 0x3a, 0xf5, 0x3f, 0x87, 0xa1, 0x40, 0x95, 0xfb,
	0xa6, 0x69, 0x3c, 0xc4, 0xe6, 0x72, 0xab, 0xa3, 0x77, 0x07, 0x0a, 0xfb, 0x58, 0x2b, 0xec, 0x53,
	0x30, 0xae, 0x5b, 0x0d, 0xad, 0x69, 0xeb, 0xfb, 0x98, 0xa8, 0x6b, 0xb6, 0x96, 0xd5, 0xad, 0x65,
	0xf2, 0xdb, 0xf9, 0xa3, 0x89, 0xb5, 0x56, 0xc3, 0xe8, 0xb6, 0x0f, 0x89, 0xa6, 0x66, 0x6b, 0x59,
	0xa7, 0x60, 0xa3, 0xdb, 0x3e, 0x44, 0x73, 0x90, 0xd7, 0xad, 0x86, 0x6e, 0x19, 0x6d, 0xcd, 0xc6,
	0x2d, 0xc2, 0x44, 0x21, 0x4f, 0x68, 0xa6, 0x74, 0xab, 0xca, 0x8a, 0xef, 0x5a, 0xd8, 0x74, 0x05,
	0x65, 0x9b, 0x5a, 0x0b, 0x17, 0x66, 0x3c, 0x41, 0xd5, 0x9d, 0xdf, 0x6c, 0xd6, 0x5b, 0xb8, 0x8d,
	0x6d, 0xdc, 0x2a, 0x20, 0x77, 0xd6, 0x57, 0x69, 0x81, 0xba, 0x08, 0x4f, 0xc6, 0x40, 0x4e, 0x62,
	0x0f, 0x1c, 0x90, 0x52, 0xf3, 0x31, 0x00, 0xe9, 0x00, 0xa4, 0xc7, 0x06, 0xd2, 0x18, 0xc8, 0x49,
	0x40, 0xfa, 0x22, 0x3c, 0xb9, 0x86, 0x6d, 0x8e, 0x3a, 0x95, 0xdf, 0xfa, 0xbf, 0x21, 0x28, 0xc6,
	0x55, 0x7b, 0x5f, 0xae, 0x2b, 0x82, 0x98, 0x4c, 0x0a, 0xc4, 0x0c, 0x27, 0x23, 0x66, 0x24, 0xc1,
	0xfd, 0x8c, 0x46, 0x65, 0xec, 0x8b, 0x71, 0x2c, 0x24, 0xc6, 0x80, 0x70, 0xb2, 0x21, 0xe1, 0x04,
	0xd0, 0x31, 0x1e, 0x42, 0x47, 0x1c, 0x00, 0x20, 0x16, 0x00, 0x41, 0x19, 0xe7, 0xc2, 0x32, 0x2e,
	0x41, 0x81, 0xfe, 0x37, 0xc6, 0xac, 0x4c, 0xc1, 0x90, 0x37, 0xe9, 0x43, 0x3a, 0xc1, 0x43, 0x0c,
	0xad, 0x04, 0x0f, 0xff, 0x3e, 0x0c, 0xb3, 0xd4, 0xcc, 0x91, 0x21, 0x99, 0x03, 0x7b, 0xf5, 0x21,
	0xb5, 0x57, 0xe7, 0x61, 0xaa, 0xad, 0x37, 0x71, 0xb7, 0xe9, 0x0d, 0x36, 0x4f, 0x46, 0x32, 0xc9,
	0x4a, 0xd9, 0x70, 0xdf, 0x8f, 0xb1, 0x2a, 0xc1, 0x89, 0x20, 0xd4, 0x12, 0x70, 0x49, 0x2d, 0xdb,
	0x00, 0x97, 0x03, 0x5c, 0x1e, 0x39, 0x2e, 0x83, 0x50, 0x93, 0xe0, 0x72, 0x11, 0x4e, 0xac, 0x61,
	0x9b, 0x12, 0xa6, 0x72, 0x9d, 0x3f, 0x18, 0x82, 0x93, 0xa1, 0x1a, 0x3f, 0xf9, 0x5e, 0x33, 0x2a,
	0xb4, 0x6c, 0xa2, 0xd0, 0xc6, 0x65, 0xce, 0x15, 0x82, 0x90, 0x51, 0x3f, 0x0e, 0xb3, 0x6b, 0xd8,
	0xae, 0x76, 0xf7, 0xb1, 0x65, 0x1b, 0xa6, 0xe5, 0x4a, 0x01, 0xc1, 0x70, 0x4f, 0xdb, 0xa1, 0x12,
	0x1b, 0xa9, 0x91, 0xff, 0xa3, 0x13, 0x30, 0xd2, 0xd6, 0x3b, 0xba, 0x4d, 0x66, 0x72, 0xa4, 0x46,
	0x7f, 0xa8, 0xdf, 0x1c, 0x82, 0x13, 0x8e, 0xf3, 0xbd, 0xa7, 0xdb, 0xbb, 0x6e, 0x33, 0x44, 0xdd,
	0x1f, 0x79, 0xa9, 0x3c, 0x0f, 0x53, 0x3d, 0x53, 0xef, 0x68, 0xe6, 0x61, 0xc3, 0x3e, 0xb0, 0x7c,
	0xd1, 0x4c, 0xb0, 0xd2, 0xfa, 0x81, 0x55, 0x25, 0x66, 0xa8, 0xd9, 0xd6, 0x71, 0xd7, 0xa6, 0xed,
	0x8c, 0x91, 0x76, 0x80, 0x16, 0x91, 0x66, 0x4a, 0x30, 0xb3, 0x6d, 0x34, 0xb4, 0x26, 0x69, 0x3a,
	0x28, 0xa5, 0xe9, 0x6d, 0x63, 0x99, 0x96, 0x53, 0xae, 0xd4, 0xcf, 0x2b, 0x04, 0xf5, 0xdc, 0x74,
	0x33, 0x08, 0xaf, 0xc1, 0xb8, 0xee, 0x16, 0x16, 0x94, 0x73, 0x99, 0xb9, 0xdc, 0xd2, 0xa5, 0x58,
	0x5b, 0x11, 0x37, 0xd5, 0x35, 0xbf, 0xae, 0xc3, 0xae, 0x6d, 0xd8, 0x5a, 0xbb, 0x41, 0xba, 0x65,
	0xd6, 0x1b, 0x48, 0xd1, 0x8a, 0x53, 0xc2, 0x36, 0x5b, 0xdc, 0xea, 0xa9, 0x34, 0xef, 0xdb, 0x74,
	0xb3, 0x25, 0x58, 0xe7, 0x71, 0xd1, 0xbd, 0x1f, 0x83, 0x94, 0xbf, 0x3e, 0xe2, 0x6e, 0x89, 0xba,
	0x53, 0x36, 0x70, 0xba, 0xc7, 0xe8, 0x74, 0xa3, 0x12, 0x9f, 0x88, 0x91, 0xf8, 0x1c, 0xe4, 0x2d,
	0xdc, 0x34, 0xba, 0x2d, 0x8e, 0x8e, 0x3a, 0xdb, 0x29, 0xaf, 0x9c, 0x52, 0xc6, 0x8a, 0x7e, 0x2a,
	0x56, 0xf4, 0x9c, 0xc3, 0x9f, 0xee, 0xcb, 0xe1, 0xfb, 0x1e, 0x20, 0x2f, 0x5b, 0x37, 0xf5, 0xe7,
	0x8f, 0xc3, 0xa8, 0x9e, 0x0d, 0xa3, 0xda, 0xdf, 0xa7, 0xf5, 0x81, 0x2a, 0x71, 0xd9, 0x0e, 0xae,
	0x69, 0xdc, 0x39, 0xc0, 0xf5, 0x00, 0xd7, 0x8f, 0x32, 0xae, 0xff, 0x5a, 0x71, 0xcf, 0xb0, 0x22,
	0xc0, 0x4e, 0xe7, 0xb0, 0x32, 0x21, 0x0c, 0x47, 0xe7, 0x7e, 0x38, 0xd9, 0x8b, 0x8c, 0xa4, 0xf3,
	0x22, 0xa3, 0xf1, 0x5e, 0xe4, 0x4d, 0x38, 0x43, 0x87, 0x70, 0x47, 0xeb, 0xd5, 0x8c, 0x36, 0xde,
	0xc4, 0x66, 0x47, 0xb7, 0x2c, 0xdd, 0xe8, 0x72, 0x0e, 0xdb, 0x34, 0xda, 0x98, 0x1b, 0x8a, 0xf3,
	0xb3, 0x4a, 0xd0, 0xda, 0xf3, 0xa8, 0x7d, 0xbd, 0x9b, 0xf0, 0x0b, 0xab, 0x61, 0xc4, 0x67, 0x42,
	0x88, 0x57, 0xaf, 0xc1, 0x59, 0x61, 0xf7, 0x12, 0x1b, 0xf1, 0x25, 0x05, 0xce, 0x50, 0x93, 0xf2,
	0x63, 0x61, 0x9b, 0xed, 0xe3, 0x0c, 0x7b, 0xfb, 0x38, 0xd7, 0xe0, 0xac, 0x90, 0x1d, 0xc9, 0x30,
	0x0e, 0xe1, 0xe9, 0x35, 0x6c, 0x47, 0xea, 0x78, 0xf1, 0xf1, 0x6b, 0x80, 0x7a, 0xda, 0x8e, 0x4e,
	0x4f, 0x55, 0x1a, 0x26, 0x2d, 0x25, 0x2d, 0xe4, 0x96, 0x4a, 0xb1, 0xba, 0xb1, 0xe9, 0x91, 0x57,
	0xbb, 0x0f, 0x0c, 0xd6, 0x4e, 0x6d, 0xc6, 0x6f, 0x85, 0x15, 0xa9, 0xbf, 0x9a, 0x81, 0x67, 0x04,
	0x7d, 0x8b, 0x19, 0x46, 0x07, 0x70, 0xb2, 0xa3, 0xf5, 0x7a, 0xb8, 0xc5, 0x0d, 0xd0, 0x68, 0x63,
	0xab, 0x30, 0x44, 0x82, 0xc9, 0xe5, 0x58, 0x9e, 0xa4, 0xdd, 0x94, 0x69, 0x7b, 0xce, 0x5f, 0x6f,
	0xeb, 0x96, 0x5d, 0x8b, 0x6f, 0x1f, 0x7d, 0x0a, 0x66, 0x03, 0x33, 0x41, 0x2b, 0x13, 0xc1, 0xe4,
	0x96, 0xe6, 0x53, 0x4d, 0x05, 0xad, 0x52, 0x43, 0xfc, 0x5c, 0xd0, 0xb2, 0xe2, 0x9b, 0x30, 0x15,
	0x64, 0xe3, 0x78, 0xd1, 0x73, 0x03, 0xce, 0xc6, 0xcd, 0x51, 0x28, 0x6a, 0x8e, 0xe5, 0x47, 0xfd,
	0xb2, 0x02, 0xe7, 0xc4, 0x95, 0x99, 0x28, 0xef, 0xc3, 0xac, 0x43, 0x6e, 0x2d, 0x77, 0xb9, 0x89,
	0x75, 0x57, 0x00, 0x73, 0xb1, 0xb3, 0x57, 0x8b, 0xd2, 0xd7, 0xe2, 0x1a, 0xf1, 0x60, 0x42, 0x97,
	0x6b, 0x14, 0xd7, 0xbf, 0xac, 0xc0, 0x6c, 0x4c, 0x03, 0xe8, 0x14, 0x30, 0xb6, 0x43, 0x93, 0xaa,
	0x42, 0x60, 0xfe, 0x62, 0xe7, 0x14, 0xc1, 0x30, 0x67, 0x33, 0xc9, 0xff, 0xd1, 0xd3, 0xe0, 0xcf,
	0x2a, 0x73, 0xcf, 0x9c, 0x6d, 0xb9, 0x02, 0x67, 0xa8, 0x29, 0x17, 0xda, 0x88, 0xf0, 0x76, 0xec,
	0x35, 0x38, 0x2b, 0xac, 0x21, 0x51, 0xe3, 0x87, 0xee, 0x69, 0xe7, 0x1d, 0xad, 0xe7, 0xac, 0x9c,
	0x9c, 0xaa, 0x49, 0xcb, 0x1d, 0x5e, 0xa2, 0x43, 0x81, 0xc9, 0x48, 0xb0, 0x98, 0xde, 0x39, 0x57,
	0xa0, 0x33, 0x09, 0x77, 0x6f, 0xb8, 0xc7, 0x5c, 0xc7, 0xc0, 0x5d, 0x04, 0xda, 0xde, 0x81, 0x47,
	0x5a, 0x6e, 0x2d, 0xb2, 0x70, 0xe4, 0xa8, 0x8f, 0xc3, 0x18, 0xfe, 0x0f, 0x5d, 0x7a, 0x06, 0x7b,
	0x95, 0x98, 0xc1, 0xd7, 0x61, 0x96, 0xda, 0x0b, 0x97, 0xdc, 0xb1, 0x19, 0xae, 0x11, 0xfc, 0xb8,
	0xc4, 0x08, 0x46, 0x9a, 0x2f, 0x47, 0xdb, 0xa9, 0xc5, 0xb5, 0x7d, 0xc4, 0x06, 0x70, 0x0f, 0x50,
	0xb4, 0xd3, 0xa3, 0x47, 0xc7, 0x3c, 0x39, 0xdd, 0xe2, 0xe6, 0x85, 0x37, 0x79, 0x61, 0xe5, 0x7c,
	0x93, 0x9c, 0x69, 0x45, 0x88, 0x93, 0x02, 0xae, 0x0f, 0x8a, 0x57, 0xef, 0x58, 0x27, 0x46, 0x8d,
	0x84, 0xc7, 0x3a, 0x69, 0x51, 0xff, 0x55, 0x85, 0x0b, 0xc3, 0x9c, 0x1a, 0xb1, 0xf1, 0x4c, 0xfc,
	0x00, 0x3f, 0x08, 0x8f, 0x44, 0xff, 0x6c, 0xe2, 0x7d, 0xe3, 0x21, 0x6f, 0x49, 0x6b, 0xb4, 0x20,
	0x10, 0xa5, 0x85, 0xb9, 0x4b, 0x18, 0x55, 0x40, 0xfb, 0x1f, 0xb9, 0x51, 0x09, 0xb9, 0x93, 0x8c,
	0xea, 0x15, 0x78, 0x76, 0x0d, 0xdb, 0xc1, 0x0a, 0xd6, 0xcd, 0xc3, 0xbb, 0x84, 0xef, 0xc4, 0x5d,
	0xae, 0xff, 0x55, 0x40, 0x95, 0x55, 0x97, 0x5a, 0x9d, 0xe9, 0xbd, 0x60, 0x35, 0x66, 0x71, 0xd6,
	0x44, 0x16, 0x27, 0xa1, 0x97, 0x72, 0xe8, 0xef, 0xb5, 0x70, 0xfb, 0xc5, 0x9f, 0x86, 0xe9, 0x10,
	0x4d, 0x54, 0x30, 0x8a, 0xc4, 0x59, 0x0f, 0xf9, 0xce, 0x5a, 0xfd, 0x79, 0xce, 0x1d, 0x1f, 0x01,
	0x18, 0x02, 0xce, 0xbb, 0x0f, 0x71, 0xbe, 0x0e, 0x33, 0x14, 0xdb, 0xbc, 0x42, 0x3b, 0x6b, 0x4a,
	0xc7, 0x68, 0xf0, 0x3b, 0x0d, 0x4e, 0x01, 0x59, 0xa5, 0x85, 0x2e, 0xa6, 0x0d, 0x45, 0x2e, 0xa6,
	0x25, 0xb9, 0xf0, 0x39, 0x40, 0x7c, 0x97, 0x12, 0xe6, 0x7e, 0x51, 0x81, 0x19, 0x8a, 0xd1, 0x63,
	0xe3, 0x2e, 0x62, 0xf8, 0xe6, 0x00, 0xf1, 0x2c, 0x48, 0xb8, 0x6d, 0xc3, 0xf4, 0x1a, 0xb6, 0x8f,
	0xcb, 0x69, 0xbf, 0x33, 0x04, 0x79, 0xbf, 0x3b, 0x89, 0xde, 0xac, 0xc2, 0x08, 0xbf, 0x48, 0x29,
	0x8b, 0xb4, 0x25, 0xe8, 0x98, 0x3d, 0x77, 0x3c, 0x72, 0x1c, 0x2b, 0x90, 0xcf, 0x40, 0xd6, 0x73,
	0xbb, 0xc7, 0x2b, 0xde, 0xe7, 0x01, 0xb1, 0xb1, 0xcb, 0x9c, 0xaf, 0x13, 0xd1, 0x07, 0xc8, 0xd8,
	0x7c, 0x1f, 0x2f, 0xaf, 0xcf, 0xc1, 0x0c, 0x55, 0x71, 0x99, 0xf3, 0x9d, 0x03, 0xc4, 0x13, 0x49,
	0xf0, 0xda, 0x85, 0xd3, 0x54, 0x0f, 0xa3, 0xa6, 0xc8, 0x35, 0x60, 0x0a, 0xb7, 0xda, 0x78, 0xdf,
	0x7a, 0x5f, 0x76, 0xd7, 0x09, 0x29, 0x4d, 0xd3, 0xe7, 0xe0, 0x34, 0xd5, 0xbc, 0xe3, 0xe1, 0x2f,
	0x32, 0xdd, 0x65, 0x77, 0xe5, 0x90, 0x92, 0x5f, 0x93, 0x1c, 0x9d, 0x1e, 0xef, 0x3e, 0xc6, 0xbf,
	0x0c, 0x91, 0x05, 0x43, 0xda, 0x0d, 0x8c, 0x4f, 0x41, 0x2e, 0xea, 0x3f, 0x6f, 0x88, 0x2c, 0x42,
	0xdc, 0x7e, 0x85, 0x5f, 0x46, 0xac, 0x03, 0xdf, 0xdc, 0x91, 0x07, 0xe9, 0x53, 0xc1, 0xce, 0x8f,
	0x07, 0x05, 0x25, 0x28, 0x04, 0xa6, 0x42, 0x66, 0x26, 0x3e, 0xaf, 0x90, 0x88, 0x5e, 0xb0, 0x0d,
	0x71, 0x2c, 0xec, 0x5e, 0x82, 0xd3, 0x54, 0xfd, 0x93, 0x97, 0xfb, 0x65, 0x37, 0xa4, 0x4f, 0x89,
	0xef, 0xff, 0xf6, 0xde, 0xb1, 0x2c, 0xef, 0xb5, 0x74, 0xfb, 0xb6, 0xb1, 0xe3, 0xb6, 0xfc, 0x09,
	0xc8, 0x69, 0x4d, 0x22, 0x74, 0x72, 0xca, 0xa0, 0x90, 0xdd, 0xeb, 0xb3, 0xb1, 0x02, 0xa7, 0x74,
	0xe4, 0x9c, 0x01, 0xfc, 0xff, 0x23, 0x15, 0x26, 0x35, 0xdb, 0xc6, 0x9d, 0x9e, 0xdd, 0xd8, 0x3e,
	0xf4, 0x43, 0x9c, 0x1c, 0x2b, 0x74, 0xe6, 0x11, 0x55, 0x60, 0x9a, 0xa3, 0x49, 0x7f, 0x9e, 0x31,
	0xe9, 0x35, 0x42, 0xba, 0x72, 0x26, 0xb4, 0x17, 0xba, 0x44, 0x3e, 0xae, 0xf7, 0xdc, 0xf3, 0x85,
	0x65, 0xc8, 0xed, 0xda, 0x76, 0xaf, 0xd1, 0xc1, 0xf6, 0xae, 0x41, 0x8f, 0x37, 0xa6, 0x96, 0xce,
	0xc5, 0xf6, 0x70, 0xab, 0x5e, 0xdf, 0xbc, 0x43, 0xc8, 0xac, 0x1a, 0x38, 0x95, 0xe8, 0x0f, 0x54,
	0x84, 0x2c, 0xee, 0xb6, 0x7a, 0x86, 0xde, 0xb5, 0xd9, 0xbe, 0xb3, 0xf7, 0x9b, 0x89, 0xd3, 0xda,
	0x6b, 0x36, 0x9d, 0xde, 0xbd, 0x23, 0x90, 0x2d, 0x5a, 0xe0, 0x54, 0xed, 0xb5, 0x35, 0xfb, 0x81,
	0x61, 0x76, 0xd8, 0xe9, 0x87, 0xf7, 0x1b, 0x9d, 0x75, 0xb0, 0xb2, 0xaf, 0x37, 0x99, 0xbb, 0xa1,
	0x07, 0x1f, 0x40, 0x8b, 0x88, 0xc3, 0xf1, 0x09, 0xc8, 0xe4, 0x00, 0x4f, 0x40, 0x86, 0xfe, 0xd1,
	0x20, 0xda, 0x72, 0x44, 0x31, 0x4f, 0x97, 0xe9, 0xeb, 0xa5, 0xb2, 0xfb, 0x7a, 0xa9, 0xbc, 0x45,
	0x5e, 0x2f, 0x05, 0x61, 0x78, 0x03, 0x26, 0x98, 0xe1, 0x6a, 0x6c, 0x1b, 0xad, 0x43, 0x72, 0x2a,
	0x22, 0xab, 0xcb, 0x88, 0x6f, 0x1a, 0xad, 0x43, 0xf4, 0x0a, 0x4c, 0xba, 0xc6, 0x80, 0x56, 0x9e,
	0x94, 0x57, 0x9e, 0x70, 0xa9, 0x9d, 0xda, 0xfe, 0x4b, 0x19, 0x1f, 0x75, 0x12, 0x90, 0xf6, 0x88,
	0xa3, 0x76, 0x49, 0x8f, 0xc3, 0x04, 0xff, 0xf3, 0x28, 0xb9, 0x6e, 0xc0, 0x75, 0x29, 0x31, 0xc0,
	0x75, 0x18, 0xd7, 0x5c, 0x42, 0x66, 0x7e, 0xaf, 0x8b, 0xcc, 0x6f, 0xa4, 0xc5, 0xb2, 0x5b, 0x95,
	0x98, 0x5e, 0xbf, 0xa1, 0x23, 0x36, 0xbc, 0x3f, 0x1c, 0x86, 0x09, 0xbe, 0xe7, 0x81, 0xba, 0x0f,
	0xd4, 0xfd, 0xc8, 0xd4, 0x9d, 0x79, 0xa9, 0x29, 0x2e, 0x9e, 0x3d, 0xc5, 0xe9, 0x82, 0xcc, 0xfb,
	0x7e, 0x71, 0x84, 0x6c, 0x63, 0x06, 0x49, 0x99, 0x2e, 0x0e, 0x20, 0x3b, 0x80, 0xec, 0xb1, 0x41,
	0xf6, 0x3f, 0x32, 0xee, 0x2d, 0xf5, 0x9b, 0xe4, 0xfe, 0xa1, 0x0b, 0xd8, 0xb3, 0x90, 0x63, 0x37,
	0x14, 0xb9, 0x38, 0x10, 0x68, 0x11, 0x99, 0x9e, 0x67, 0x00, 0xac, 0x5d, 0xc3, 0xb4, 0xf9, 0xfb,
	0x5c, 0xe3, 0xa4, 0x24, 0x6e, 0x41, 0x99, 0x89, 0x06, 0x8b, 0x05, 0x18, 0x0b, 0xc2, 0xc6, 0xfd,
	0x99, 0xe6, 0x61, 0xdc, 0x25, 0xc8, 0xdb, 0xb8, 0x8d, 0x03, 0x64, 0xec, 0xd8, 0xdc, 0x2b, 0x67,
	0xa4, 0x91, 0x9b, 0x1a, 0x63, 0x31, 0x37, 0x35, 0xce, 0xc3, 0xd4, 0xbe, 0xd6, 0xd6, 0x5b, 0x8d,
	0xe6, 0x9e, 0x69, 0xe2, 0x6e, 0xf3, 0xd0, 0xbd, 0x56, 0x49, 0x4a, 0x57, 0x58, 0x21, 0x3a, 0xe5,
	0xdd, 0x7a, 0xa0, 0x78, 0x71, 0x2f, 0x36, 0xa4, 0xb8, 0xc5, 0x11, 0x8c, 0x8d, 0x73, 0xe1, 0xd8,
	0x38, 0x70, 0x27, 0x73, 0x22, 0x74, 0x8d, 0xf7, 0x02, 0x4c, 0x6f, 0x93, 0x57, 0x07, 0x8d, 0x5d,
	0x63, 0xcf, 0xc2, 0xfe, 0x0d, 0x8e, 0x49, 0x5a, 0x7c, 0xcb, 0x29, 0xa5, 0xd7, 0x0d, 0x98, 0xd0,
	0x08, 0x64, 0xa7, 0x78, 0xa1, 0x39, 0x90, 0xf5, 0xef, 0x89, 0xbb, 0xc2, 0x96, 0x44, 0x27, 0x3f,
	0xcc, 0xb8, 0xf7, 0xc4, 0x07, 0xc8, 0xf8, 0x89, 0x47, 0x06, 0xb3, 0x0b, 0xd3, 0xdc, 0x52, 0xf2,
	0x44, 0x50, 0xf8, 0x12, 0xa4, 0x18, 0x64, 0x5f, 0x8a, 0x12, 0x1e, 0xcb, 0x7e, 0xe2, 0xdf, 0x8f,
	0x90, 0xc8, 0xd9, 0xef, 0x51, 0x12, 0xc5, 0x6e, 0x00, 0xbb, 0x59, 0xed, 0xed, 0x2a, 0x5e, 0x15,
	0x05, 0xb1, 0xe1, 0xf6, 0xca, 0xb4, 0x22, 0x89, 0x60, 0xbd, 0x46, 0x8e, 0x38, 0x80, 0xfd, 0xaf,
	0x0c, 0x80, 0xdf, 0xed, 0x40, 0xd9, 0x3e, 0x14, 0xca, 0x76, 0x81, 0xac, 0xca, 0x28, 0xfc, 0x64,
	0x51, 0xe3, 0x8f, 0x32, 0x64, 0xdb, 0x8e, 0x27, 0x64, 0xc8, 0x1f, 0xe0, 0xe4, 0xc3, 0x80, 0x93,
	0xf3, 0x30, 0xeb, 0xbe, 0x41, 0xe4, 0x3d, 0x72, 0x18, 0x26, 0x25, 0x38, 0x11, 0x24, 0x93, 0xd8,
	0xee, 0xdf, 0xcd, 0x04, 0xdf, 0xff, 0x13, 0xde, 0xdc, 0x86, 0x4b, 0x30, 0x13, 0x18, 0x08, 0x87,
	0xad, 0x69, 0x6e, 0x28, 0x03, 0x80, 0x7d, 0xe0, 0x00, 0x0b, 0xbf, 0x91, 0x67, 0x62, 0x91, 0x08,
	0xf2, 0xed, 0x4c, 0xf0, 0x8d, 0xfc, 0x40, 0x90, 0x8f, 0x86, 0xa5, 0xa0, 0xca, 0x39, 0x11, 0xbd,
	0x66, 0x95, 0x56, 0xb0, 0xf4, 0x9a, 0x15, 0x47, 0x7d, 0x1c, 0x11, 0xd6, 0x6f, 0xd0, 0xfd, 0x89,
	0x60, 0xaf, 0x92, 0x28, 0xeb, 0xd3, 0x30, 0xc1, 0xe1, 0xc8, 0x8d, 0xb4, 0x5e, 0x11, 0x47, 0x5a,
	0xd1, 0x76, 0xcb, 0x5c, 0x03, 0x24, 0xe4, 0x0a, 0xb4, 0x78, 0xc4, 0x61, 0xd7, 0x57, 0x33, 0x30,
	0x1d, 0xea, 0x7f, 0xa0, 0x34, 0x8f, 0x8e, 0xd2, 0xcc, 0x73, 0xb9, 0x15, 0xc8, 0xa4, 0xcb, 0xa2,
	0xa4, 0xaf, 0x67, 0xb8, 0x94, 0x0a, 0x1c, 0x35, 0x83, 0xef, 0x40, 0xac, 0x8f, 0x8c, 0x58, 0x43,
	0xf9, 0x17, 0x02, 0x2e, 0x2b, 0x21, 0xff, 0x42, 0xb2, 0xdd, 0x7c, 0xcb, 0x7b, 0xf2, 0x41, 0x5f,
	0x08, 0xdf, 0xd1, 0x7a, 0xdc, 0xed, 0x25, 0x1b, 0x6b, 0x1d, 0xee, 0xf6, 0x92, 0xf3, 0x93, 0x3e,
	0xf9, 0x20, 0xef, 0x4f, 0x4c, 0x7f, 0xd3, 0x34, 0x4b, 0x0b, 0x92, 0xaf, 0xb0, 0xf9, 0x2f, 0x62,
	0x86, 0x53, 0xbf, 0x88, 0x51, 0x17, 0xdc, 0x7b, 0x0d, 0x1c, 0x8f, 0x92, 0x31, 0xfd, 0x85, 0xe2,
	0xbe, 0xcf, 0x7a, 0x74, 0xc7, 0xc4, 0x24, 0x37, 0xe2, 0x49, 0x6e, 0xc1, 0xbd, 0x1b, 0x91, 0x6e,
	0x8c, 0xf4, 0x54, 0x2c, 0x32, 0xbe, 0xa3, 0x7d, 0x60, 0x71, 0x22, 0xd8, 0xa5, 0xc4, 0xd3, 0xdd,
	0x83, 0x89, 0x3b, 0xe4, 0xfe, 0x2d, 0x25, 0x4f, 0xda, 0x53, 0x88, 0x34, 0x5a, 0xf6, 0x4b, 0x02,
	0x0d, 0x1d, 0xb1, 0x83, 0x7b, 0x5b, 0x81, 0x71, 0xaf, 0xe7, 0x47, 0x18, 0x2c, 0x73, 0x70, 0x8a,
	0xaa, 0x79, 0x04, 0x00, 0x61, 0x83, 0xb0, 0xe0, 0xde, 0x1e, 0x48, 0x07, 0xab, 0xbf, 0x51, 0x82,
	0xaa, 0x56, 0xc7, 0x5a, 0xe7, 0x48, 0xaf, 0xe8, 0xbc, 0xa7, 0xe9, 0x08, 0xbe, 0x73, 0x1b, 0x09,
	0xe7, 0x53, 0xf0, 0xae, 0x25, 0xf1, 0x63, 0x90, 0x0c, 0xfa, 0x1f, 0x94, 0xa0, 0xee, 0x3d, 0x8e,
	0x83, 0x66, 0x82, 0x1f, 0x8d, 0xde, 0x75, 0x4a, 0x39, 0x09, 0xaf, 0x73, 0xda, 0xcd, 0x4f, 0xc0,
	0x11, 0x5a, 0x94, 0x6f, 0x66, 0xb8, 0xd4, 0x14, 0x49, 0x0c, 0xa2, 0x7b, 0x90, 0xa3, 0x94, 0x96,
	0x43, 0xca, 0x2c, 0xca, 0x35, 0xb9, 0x45, 0xe1, 0x1b, 0x2d, 0x73, 0x45, 0x7c, 0x4b, 0x47, 0x6c,
	0x52, 0xbe, 0xab, 0x00, 0xf8, 0x3d, 0x3f, 0xbe, 0x78, 0xba, 0x14, 0x34, 0x24, 0x3c, 0x44, 0x84,
	0xd7, 0x90, 0x52, 0x42, 0x6f, 0x01, 0x66, 0x6f, 0x61, 0xad, 0x6d, 0xef, 0xae, 0xec, 0xe2, 0xe6,
	0x43, 0x8f, 0xd4, 0x8f, 0xb0, 0x14, 0x3e, 0xc2, 0x52, 0xb7, 0xe0, 0x64, 0x2c, 0xc4, 0x9c, 0x11,
	0xf5, 0xb4, 0x1d, 0xdc, 0xb0, 0x8d, 0x87, 0xb8, 0xcb, 0x72, 0x70, 0x8c, 0x3b, 0x25, 0x75, 0xa7,
	0xc0, 0xb1, 0xda, 0xe4, 0xcf, 0x96, 0xfe, 0x59, 0xf7, 0x75, 0x57, 0xd6, 0x29, 0xd8, 0xd2, 0x3f,
	0x8b, 0xd5, 0xaf, 0x0c, 0xc1, 0xa9, 0x78, 0xa9, 0xa2, 0x0b, 0x30, 0x6d, 0xe1, 0xf6, 0x83, 0x46,
	0xa4, 0xed, 0x49, 0xa7, 0x78, 0xd3, 0x6b, 0x7f, 0x0e, 0xf2, 0x0f, 0x74, 0xd3, 0xb2, 0x79, 0x42,
	0xda, 0xcd, 0x14, 0x29, 0xf7, 0x29, 0x2f, 0xc0, 0x74, 0x17, 0x7f, 0x26, 0x40, 0x98, 0xa1, 0x2d,
	0x3a, 0xc5, 0x3e, 0x5d, 0x19, 0x66, 0x7b, 0x26, 0xde, 0xd7, 0x8d, 0x3d, 0x8b, 0xa7, 0x1d, 0x26,
	0xb4, 0x33, 0xee, 0x9f, 0x02, 0x1c, 0xd0, 0x2c, 0x16, 0x84, 0x98, 0xa6, 0xb2, 0x18, 0xa1, 0x1c,
	0x90, 0x72, 0x87, 0x92, 0xa4, 0xb3, 0x40, 0x97, 0x01, 0x51, 0x4a, 0x13, 0x37, 0x0d, 0xb3, 0xc5,
	0x68, 0x47, 0x09, 0x2d, 0x6d, 0xa3, 0x46, 0xfe, 0x40, 0x93, 0x5f, 0x7c, 0x57, 0x71, 0xf7, 0x59,
	0x98, 0x44, 0x0f, 0x2c, 0xce, 0xe5, 0x9c, 0x84, 0x51, 0xf6, 0xb8, 0x97, 0x0a, 0x75, 0xc4, 0x26,
	0xaf, 0x7a, 0xa5, 0x4e, 0xf2, 0xba, 0x27, 0x5b, 0x7a, 0x9c, 0x7e, 0x26, 0x16, 0xb1, 0xf5, 0x03,
	0x2b, 0x16, 0xb4, 0x58, 0xf0, 0x42, 0x2e, 0xc9, 0x31, 0x5c, 0x81, 0x62, 0xdc, 0x30, 0x24, 0xd0,
	0xfc, 0x47, 0xc5, 0xdd, 0x88, 0x78, 0xac, 0x47, 0x1e, 0xd1, 0xe6, 0x2b, 0x50, 0x8c, 0x1b, 0x96,
	0x64, 0x26, 0x6c, 0xb2, 0xd5, 0xe1, 0xda, 0xcd, 0xc0, 0x34, 0x1c, 0xa1, 0x8b, 0xf8, 0x76, 0x86,
	0x5c, 0xd6, 0x0c, 0x75, 0x2b, 0xf5, 0x12, 0x60, 0x7b, 0xc4, 0xcc, 0x49, 0xbc, 0x24, 0x77, 0x12,
	0xa1, 0x66, 0xcb, 0xde, 0x94, 0xd4, 0xb8, 0xa6, 0x8e, 0xde, 0x4b, 0x8c, 0x7b, 0xfd, 0x3e, 0xc6,
	0xb8, 0x9a, 0x77, 0xd7, 0x9f, 0x71, 0xea, 0x12, 0xf6, 0x13, 0x57, 0xa0, 0x18, 0x47, 0x2c, 0x01,
	0xe1, 0x77, 0x14, 0xc8, 0x33, 0x0d, 0x3e, 0xf0, 0x36, 0xf8, 0x9e, 0x84, 0xac, 0x33, 0x5b, 0x1e,
	0xf1, 0x78, 0x6d, 0xcc, 0x3e, 0xb0, 0x62, 0x56, 0xda, 0x43, 0xe1, 0xc1, 0xbd, 0xd7, 0x39, 0x0b,
	0x9c, 0x6b, 0x0c, 0x87, 0xce, 0x35, 0x12, 0x6c, 0xd0, 0x45, 0xf7, 0x79, 0x0e, 0x19, 0x81, 0x64,
	0xac, 0xdf, 0x57, 0x20, 0xcf, 0x74, 0xd4, 0x1f, 0x6b, 0x68, 0x0a, 0x03, 0x63, 0x1f, 0x92, 0x8d,
	0x3d, 0x23, 0x1e, 0xfb, 0xf0, 0x7b, 0x1f, 0xfb, 0x88, 0x74, 0xec, 0xa3, 0x31, 0x63, 0xe7, 0x46,
	0x24, 0x19, 0xfb, 0x2f, 0xc0, 0xa4, 0xa3, 0x9e, 0x07, 0xc7, 0xb1, 0x89, 0xfb, 0xeb, 0x19, 0x98,
	0x72, 0x3b, 0x93, 0x18, 0x96, 0x8f, 0x41, 0xc6, 0xf6, 0x2c, 0xca, 0xbc, 0xd0, 0xa2, 0xf8, 0xad,
	0x94, 0xed, 0x03, 0x8b, 0xec, 0xd0, 0x3a, 0xf5, 0x8e, 0xd8, 0x7c, 0x7c, 0x4f, 0x81, 0x31, 0xd6,
	0xdd, 0x63, 0x0e, 0x11, 0x15, 0xf2, 0xcc, 0x26, 0x08, 0x41, 0xef, 0xc0, 0x88, 0xa3, 0x11, 0xcb,
	0xac, 0x74, 0x99, 0x7f, 0x60, 0x40, 0xce, 0x0a, 0x8b, 0x70, 0xea, 0xee, 0xfa, 0xd6, 0x66, 0x65,
	0xa5, 0xfa, 0xc9, 0x6a, 0x65, 0xb5, 0xe1, 0xff, 0x35, 0xff, 0x44, 0xa9, 0x05, 0x39, 0xee, 0x76,
	0x1d, 0x1a, 0x83, 0xcc, 0x5a, 0xa5, 0x9e, 0x7f, 0x02, 0x65, 0x61, 0x78, 0x73, 0x63, 0xab, 0x9e,
	0x57, 0x9c, 0xa2, 0xcd, 0xbb, 0xf5, 0xfc, 0x10, 0x02, 0x18, 0x5d, 0xad, 0xdc, 0xae, 0xd4, 0x2b,
	0xf9, 0x0c, 0xca, 0xc1, 0xd8, 0xc6, 0x66, 0xbd, 0xba, 0xb1, 0xbe, 0x95, 0x1f, 0x76, 0x7e, 0xac,
	0x6c, 0xac, 0xaf, 0x57, 0x56, 0xea, 0xf9, 0x11, 0xa7, 0xe2, 0xad, 0xca, 0xf2, 0x6a, 0x7e, 0x14,
	0x8d, 0xc3, 0x48, 0xbd, 0xb6, 0xbc, 0x52, 0xc9, 0x8f, 0x95, 0x0c, 0xe0, 0xef, 0x20, 0x4e, 0x43,
	0x8e, 0xe3, 0x27, 0xff, 0x84, 0x43, 0x79, 0x7b, 0x63, 0xad, 0xba, 0x9e, 0x57, 0x9c, 0x4e, 0x6e,
	0x6f, 0xac, 0x6d, 0x90, 0x0e, 0x67, 0x61, 0x7a, 0xe5, 0xd6, 0xf2, 0xfa, 0x5a, 0xa5, 0xb1, 0xb9,
	0xbc, 0xb5, 0x75, 0x6f, 0xa3, 0xb6, 0x9a, 0xcf, 0x38, 0xb4, 0x1b, 0xb5, 0xd5, 0x4a, 0x8d, 0xf6,
	0xbb, 0x5a, 0xd9, 0xdc, 0xd8, 0xaa, 0x3a, 0xfd, 0x4e, 0x40, 0xf6, 0x5e, 0xb5, 0x7e, 0x6b, 0xb5,
	0xb6, 0x7c, 0x2f, 0x3f, 0x5a, 0x7a, 0x16, 0x46, 0xa9, 0x7c, 0x1c, 0xa2, 0xcd, 0xca, 0xfa, 0x6a,
	0x75, 0x7d, 0x2d, 0xff, 0x84, 0xd3, 0xfa, 0xf2, 0x4a, 0xbd, 0xfa, 0x6a, 0x25, 0xaf, 0x94, 0x2e,
	0xc1, 0xb8, 0x27, 0x45, 0xa7, 0xf6, 0xf2, 0xd6, 0x56, 0x75, 0x6d, 0x9d, 0xf0, 0x33, 0x05, 0x70,
	0x77, 0xdd, 0xfb, 0xad, 0x94, 0xce, 0x31, 0x3f, 0x55, 0x33, 0xda, 0x98, 0x0d, 0x6b, 0xb5, 0x42,
	0x27, 0xe9, 0xd5, 0x6a, 0xe5, 0x5e, 0x5e, 0x29, 0x35, 0xc0, 0x4f, 0x37, 0xf4, 0x24, 0x9c, 0xbc,
	0xbb, 0x55, 0xa9, 0x35, 0xea, 0xaf, 0x6d, 0x56, 0x1a, 0xc1, 0x81, 0x4e, 0x40, 0xb6, 0xba, 0xfe,
	0x6a, 0x65, 0xab, 0xbe, 0x51, 0xa3, 0x63, 0x25, 0x2d, 0xd5, 0xf2, 0x43, 0x28, 0x0f, 0x13, 0x37,
	0x6b, 0x1b, 0x3f, 0x53, 0xa9, 0x35, 0x96, 0x57, 0xef, 0x54, 0xd7, 0xf3, 0x19, 0x87, 0xb6, 0x72,
	0x67, 0xf3, 0xf6, 0xc6, 0x6b, 0x95, 0x4a, 0x7e, 0x78, 0xe9, 0x9d, 0x75, 0x98, 0xd9, 0xe8, 0x58,
	0x77, 0x2d, 0x6c, 0xde, 0xf1, 0x60, 0x88, 0x7e, 0x45, 0x81, 0x1c, 0xb7, 0x8a, 0x40, 0xa7, 0x22,
	0x37, 0xfd, 0x2a, 0x9d, 0x9e, 0x7d, 0x58, 0x8c, 0xcf, 0x0e, 0x11, 0xb3, 0xfe, 0x50, 0xaf, 0xfe,
	0xd2, 0x0f, 0xfe, 0xed, 0x77, 0x86, 0x16, 0xd4, 0x39, 0xf2, 0x8d, 0x90, 0xfd, 0x17, 0x16, 0x63,
	0x3e, 0x3f, 0xb2, 0xb8, 0x4b, 0x2a, 0x2e, 0x34, 0x9d, 0x9a, 0x37, 0x94, 0x12, 0x7a, 0x5b, 0x81,
	0xe9, 0x50, 0x8c, 0x89, 0xe2, 0x1f, 0xe8, 0x09, 0x03, 0xea, 0xe2, 0x62, 0x6a, 0x7a, 0xc6, 0xe9,
	0x0b, 0x84, 0xd3, 0x79, 0xf5, 0x82, 0x8c, 0x53, 0x1a, 0x29, 0x2c, 0xd8, 0x07, 0x96, 0xc3, 0xe7,
	0x1f, 0x2b, 0xd4, 0xc4, 0xfa, 0x01, 0xce, 0xe5, 0x94, 0x51, 0x12, 0xe5, 0x71, 0xa1, 0xaf, 0x98,
	0x4a, 0x5d, 0x22, 0x1c, 0x5e, 0x46, 0x25, 0x19, 0x87, 0x3b, 0xd8, 0x5e, 0xf0, 0xb9, 0x44, 0xdf,
	0x52, 0x60, 0x3a, 0x14, 0xa4, 0x0a, 0xa6, 0x52, 0x18, 0xa1, 0x0b, 0xa6, 0x52, 0x1c, 0xfa, 0xaa,
	0x1f, 0x21, 0x8c, 0x2e, 0x15, 0x17, 0x64, 0x8c, 0xee, 0x91, 0xfa, 0x0b, 0xc1, 0x19, 0xfd, 0x86,
	0x02, 0xd3, 0xa1, 0x70, 0x46, 0xc0, 0xae, 0x30, 0x42, 0x12, 0xb0, 0x2b, 0x0e, 0x92, 0xd4, 0x6b,
	0x84, 0xdd, 0xc5, 0x92, 0x94, 0x5d, 0x6a, 0x6c, 0xf9, 0xa9, 0xfd, 0x3d, 0x05, 0x80, 0xe1, 0x09,
	0x6b, 0x1d, 0x81, 0xe8, 0x05, 0xfb, 0x80, 0x02, 0xd1, 0x8b, 0x76, 0xdc, 0xd4, 0x79, 0xc2, 0xe2,
	0x79, 0xf5, 0x9c, 0x14, 0x9c, 0x58, 0xeb, 0x38, 0x93, 0xf8, 0x35, 0x05, 0x80, 0x49, 0x47, 0xcc,
	0x98, 0x60, 0xaf, 0x4e, 0xc0, 0x98, 0x68, 0x17, 0xcc, 0xc5, 0x64, 0xf1, 0x62, 0x1a, 0x51, 0x33,
	0xfe, 0x7e, 0x4b, 0x81, 0xac, 0x03, 0x72, 0xac, 0x75, 0x2c, 0x74, 0x29, 0xcd, 0xe6, 0x13, 0x65,
	0xad, 0x94, 0x7e, 0x9f, 0x4a, 0x5d, 0x20, 0x7c, 0x5d, 0x44, 0xe7, 0x13, 0x75, 0x85, 0x70, 0xf1,
	0x15, 0x05, 0x80, 0x21, 0x44, 0x3c, 0x65, 0x82, 0xad, 0x1b, 0xc1, 0x94, 0x89, 0x76, 0x6f, 0xd4,
	0x45, 0xc2, 0xda, 0xa5, 0xd2, 0xc5, 0x34, 0x70, 0x73, 0xb8, 0x79, 0x4b, 0x81, 0x49, 0x2f, 0xd3,
	0x02, 0xe1, 0x6f, 0x3e, 0x11, 0x3d, 0x9c, 0x3e, 0x5c, 0x4e, 0x47, 0xcc, 0xb8, 0xbb, 0x4e, 0xb8,
	0xbb, 0xa2, 0xce, 0xcb, 0xb8, 0xeb, 0x68, 0x3d, 0x4f, 0x13, 0x98, 0x50, 0xbf, 0xa1, 0xc0, 0xa4,
	0x97, 0x38, 0x41, 0xc2, 0x64, 0xfc, 0x99, 0x52, 0xf1, 0x72, 0x3a, 0x62, 0xc6, 0xe4, 0xc7, 0x08,
	0x93, 0x2f, 0x15, 0x97, 0x52, 0xa0, 0x2e, 0x86, 0xd7, 0x3f, 0x54, 0x48, 0xb4, 0xca, 0xce, 0x44,
	0x08, 0x00, 0xe6, 0x52, 0x9c, 0xaa, 0x50, 0x4e, 0x2f, 0xa5, 0x3e, 0x7f, 0x51, 0x5f, 0x22, 0x6c,
	0xbe, 0x80, 0x16, 0x93, 0x40, 0x18, 0xe2, 0xd1, 0x99, 0xcc, 0xbc, 0x97, 0xb6, 0x80, 0xf1, 0x28,
	0x98, 0xcf, 0xf8, 0x23, 0x8c, 0xe2, 0xe5, 0x74, 0xc4, 0x8c, 0xd1, 0x1b, 0x84, 0xd1, 0x17, 0x4b,
	0x4b, 0x29, 0x20, 0x19, 0xe6, 0xf5, 0x8b, 0x0a, 0x8c, 0x7b, 0x8b, 0x31, 0x74, 0x5e, 0x06, 0x36,
	0x2f, 0x1a, 0x2d, 0x5e, 0x48, 0x22, 0x63, 0x8c, 0x95, 0x08, 0x63, 0xcf, 0xab, 0x67, 0xa5, 0x76,
	0x8f, 0xfa, 0x8e, 0x2f, 0x29, 0x30, 0xee, 0xad, 0x8c, 0x04, 0x8c, 0x84, 0xd7, 0x82, 0x02, 0x46,
	0x22, 0x0b, 0x2c, 0x37, 0x3a, 0x28, 0x5e, 0x48, 0x63, 0xe7, 0x28, 0x3f, 0x9f, 0x83, 0x51, 0xba,
	0x98, 0x41, 0xaa, 0x74, 0xa5, 0x43, 0x19, 0x79, 0x2e, 0xc5, 0x6a, 0xc8, 0x75, 0x03, 0xe8, 0xb9,
	0x44, 0xab, 0x76, 0x60, 0xa1, 0x5f, 0x53, 0x60, 0xdc, 0x0b, 0xf1, 0x05, 0xf3, 0x11, 0x5e, 0x26,
	0x08, 0xe6, 0x23, 0xb2, 0x52, 0x50, 0xcb, 0x84, 0x93, 0xb9, 0xd2, 0x85, 0x34, 0x46, 0xec, 0xc0,
	0x42, 0x7f, 0xa0, 0xc0, 0x54, 0xf0, 0xbd, 0x22, 0x2a, 0x49, 0x30, 0x10, 0x7a, 0x4a, 0x5b, 0x9c,
	0x4f, 0x45, 0xcb, 0x78, 0xbb, 0x42, 0x78, 0x2b, 0xa9, 0x52, 0xdb, 0x4f, 0x9e, 0xee, 0x2d, 0xb4,
	0x8d, 0x1d, 0x47, 0x54, 0xbf, 0xaf, 0xc0, 0x04, 0xff, 0xb4, 0x50, 0x6c, 0x0e, 0xc2, 0x4f, 0x28,
	0xc5, 0xe6, 0x20, 0xf2, 0x4e, 0x31, 0x7d, 0xfc, 0xe6, 0xf1, 0x66, 0xa1, 0x3f, 0x52, 0x48, 0xfa,
	0x0c, 0xfe, 0xf5, 0x16, 0x9a, 0x4f, 0xea, 0x92, 0xbb, 0xb2, 0x52, 0xbc, 0x9c, 0x8e, 0x38, 0x08,
	0x73, 0x74, 0x29, 0x35, 0x8b, 0x0e, 0xcc, 0xc0, 0x4f, 0x5c, 0x82, 0x64, 0x9a, 0xcd, 0x25, 0x68,
	0x28, 0x5e, 0x4c, 0xa4, 0xeb, 0x27, 0xf4, 0x31, 0x8d, 0x36, 0x76, 0x04, 0xf9, 0xdb, 0x5e, 0xe8,
	0x23, 0x61, 0x26, 0x92, 0x3b, 0x45, 0xc0, 0x4c, 0x34, 0xc1, 0x49, 0x5f, 0xe1, 0x8e, 0xcb, 0xd3,
	0x17, 0x68, 0xb8, 0x43, 0x13, 0x86, 0x3c, 0x9f, 0x90, 0x67, 0x84, 0xf2, 0x73, 0x3e, 0x55, 0x36,
	0x12, 0xf5, 0x32, 0xe1, 0xe6, 0x02, 0x7a, 0x3e, 0x49, 0x5a, 0x0e, 0x2b, 0xe8, 0xcf, 0x14, 0xc8,
	0x71, 0xd9, 0x3a, 0xd0, 0x45, 0x59, 0x27, 0x3c, 0x84, 0xe6, 0x92, 0x09, 0x19, 0x43, 0x9f, 0x24,
	0x0c, 0x7d, 0x02, 0x9d, 0x74, 0x19, 0xda, 0x31, 0x7b, 0x4d, 0x1b, 0x5b, 0x54, 0x40, 0xf7, 0x13,
	0xc2, 0x31, 0x87, 0x66, 0xf1, 0x0d, 0xbd, 0xf5, 0x26, 0xfa, 0x4d, 0x2f, 0x1c, 0x93, 0x88, 0x31,
	0x92, 0xf4, 0x43, 0x20, 0xc6, 0x68, 0xde, 0x8f, 0xbe, 0x42, 0x30, 0x32, 0x77, 0x6f, 0x79, 0x7b,
	0xa6, 0xfe, 0x6e, 0x87, 0x34, 0xe2, 0x8f, 0xe4, 0x19, 0x90, 0x46, 0xfc, 0xd1, 0x54, 0x03, 0xe9,
	0x96, 0xa3, 0x7e, 0x3d, 0x16, 0x82, 0xe5, 0xc3, 0xa9, 0x39, 0xa4, 0xd1, 0x7f, 0x5a, 0x26, 0x45,
	0xf9, 0x3e, 0xfa, 0x5a, 0xe8, 0x05, 0x79, 0xfd, 0x1a, 0x0d, 0xc1, 0xf8, 0x3c, 0x19, 0xa5, 0x54,
	0x09, 0x37, 0x64, 0xfe, 0x20, 0x3e, 0x39, 0x47, 0x7a, 0xbb, 0xcb, 0x4d, 0xdb, 0xdf, 0x2a, 0x30,
	0x13, 0xc9, 0x59, 0x81, 0x16, 0x92, 0xbb, 0xe5, 0x15, 0xa7, 0x9c, 0x96, 0x9c, 0x31, 0x5a, 0x23,
	0x8c, 0xde, 0x46, 0x4f, 0x45, 0xd4, 0xc7, 0xaf, 0x70, 0x7f, 0x01, 0xcd, 0xa7, 0x83, 0x04, 0x55,
	0xa5, 0x3f, 0xf5, 0x42, 0xc9, 0x44, 0x50, 0x08, 0x32, 0x64, 0x48, 0xd7, 0x37, 0x31, 0xa0, 0xe8,
	0x67, 0x39, 0xcd, 0xf1, 0xf4, 0x1d, 0xef, 0xd6, 0x4c, 0x24, 0x55, 0x17, 0xba, 0x2a, 0xd1, 0x1d,
	0x51, 0xe2, 0xb0, 0xe2, 0x8b, 0xfd, 0x55, 0x0a, 0x86, 0xc2, 0xea, 0x62, 0xd2, 0xfa, 0x87, 0x94,
	0xf5, 0x02, 0xa0, 0xfe, 0x9e, 0x77, 0x07, 0x26, 0xed, 0x10, 0xe4, 0x89, 0xf0, 0x04, 0x43, 0x48,
	0xc8, 0x4f, 0xa7, 0x2e, 0x93, 0x21, 0xbc, 0x5c, 0xbc, 0x9e, 0x72, 0x75, 0x14, 0x33, 0x92, 0x2f,
	0xd0, 0x6f, 0x85, 0x09, 0x52, 0xc5, 0xa1, 0xeb, 0x7d, 0xe7, 0x96, 0xa3, 0xe3, 0x79, 0xe9, 0x3d,
	0xe6, 0xa4, 0x53, 0xf7, 0xc9, 0x90, 0x7a, 0xe8, 0x4a, 0x9f, 0x52, 0xb1, 0xee, 0xbf, 0x82, 0x6e,
	0xf4, 0x5b, 0x67, 0xf1, 0x0d, 0x96, 0x70, 0xee, 0x4d, 0xf4, 0x8e, 0xe2, 0xde, 0xd8, 0x48, 0x2b,
	0x51, 0x79, 0x36, 0x3b, 0x81, 0x44, 0x13, 0x52, 0xd4, 0xa9, 0x3f, 0x45, 0x86, 0xff, 0x91, 0xd2,
	0xf5, 0x94, 0xeb, 0xb3, 0xd0, 0x88, 0x1c, 0xd7, 0x3f, 0x13, 0xc9, 0x0f, 0x8b, 0x16, 0x92, 0x15,
	0x84, 0xf7, 0xae, 0xe5, 0xb4, 0xe4, 0x8c, 0xe9, 0x17, 0x09, 0xd3, 0x65, 0xf5, 0x52, 0xaa, 0xf9,
	0x77, 0xa3, 0xa5, 0x3f, 0xf7, 0x92, 0xdb, 0x25, 0xb3, 0x2a, 0xca, 0x60, 0x5b, 0x2c, 0xa7, 0x25,
	0x67, 0xac, 0xbe, 0x4c, 0x58, 0xbd, 0x56, 0xbc, 0xd2, 0x8f, 0xc6, 0xb8, 0x1c, 0xff, 0x09, 0x0d,
	0xd1, 0xf9, 0x44, 0xae, 0xe2, 0x10, 0x3d, 0x26, 0x87, 0xad, 0x38, 0x44, 0x8f, 0xcb, 0x0d, 0xeb,
	0x9a, 0x57, 0xb4, 0x90, 0x66, 0x53, 0xc1, 0x63, 0x14, 0xfd, 0x93, 0x42, 0x9e, 0xce, 0x86, 0x32,
	0xa5, 0xa2, 0x72, 0x8a, 0xbe, 0x79, 0x97, 0xb6, 0x98, 0x9a, 0x9e, 0xb1, 0xdb, 0x24, 0xec, 0xfe,
	0x1c, 0x4a, 0x8f, 0x82, 0xfb, 0x57, 0x50, 0x39, 0x35, 0x31, 0x75, 0x72, 0xdf, 0x52, 0xdc, 0xd3,
	0xac, 0x64, 0xd0, 0x88, 0xf2, 0xb5, 0x16, 0xcb, 0x69, 0xc9, 0x83, 0xc1, 0x4f, 0xe9, 0x4a, 0x3f,
	0x4a, 0x49, 0x64, 0x11, 0x70, 0x75, 0xc1, 0x94, 0xd2, 0x49, 0xae, 0x2e, 0x36, 0x65, 0x75, 0x92,
	0xab, 0x8b, 0xcf, 0x5a, 0x9d, 0xde, 0xd5, 0x39, 0x4c, 0xcb, 0x5c, 0x5d, 0xaa, 0x21, 0xc8, 0x33,
	0xf3, 0x27, 0xb9, 0x3a, 0xc1, 0x10, 0xfa, 0x75, 0x75, 0x31, 0x23, 0xf9, 0x2b, 0x85, 0x5c, 0xa0,
	0x8c, 0x26, 0xa3, 0x47, 0x2f, 0xf4, 0x93, 0xb8, 0x9e, 0x8e, 0x62, 0xa9, 0xff, 0x5c, 0xf7, 0xae,
	0xf1, 0x41, 0x57, 0xd3, 0x28, 0x74, 0x68, 0x00, 0xe8, 0x47, 0x0a, 0xb9, 0xdb, 0x13, 0x9b, 0xe9,
	0x1d, 0xbd, 0x98, 0x9a, 0x1b, 0x5e, 0xc5, 0xaf, 0xf5, 0x59, 0x8b, 0x0d, 0xc3, 0x26, 0xc3, 0xe8,
	0xa2, 0x7e, 0xd1, 0x74, 0xff, 0x65, 0xf4, 0xd1, 0x3e, 0xab, 0x2c, 0xbe, 0xc1, 0x92, 0x37, 0x87,
	0x1c, 0x74, 0x2a, 0x1c, 0xca, 0xb3, 0xbf, 0x27, 0x39, 0x68, 0x01, 0x0e, 0xfb, 0x75, 0xd0, 0x64,
	0x40, 0x1c, 0xab, 0xba, 0xbb, 0x3b, 0xe6, 0x7e, 0x33, 0x44, 0xba, 0x3b, 0x16, 0xfa, 0x04, 0x8e,
	0x74, 0x77, 0x2c, 0xf2, 0x11, 0x12, 0x1d, 0xa6, 0x82, 0xdf, 0xdd, 0x11, 0x74, 0x15, 0xfb, 0x15,
	0xa9, 0xe2, 0x7c, 0x2a, 0x5a, 0xd6, 0x15, 0x4d, 0xfd, 0xca, 0x7f, 0xbb, 0x4b, 0xec, 0x18, 0x63,
	0xbe, 0x0a, 0x26, 0x76, 0x8c, 0xb1, 0x9f, 0x03, 0x6b, 0x92, 0x3d, 0x3c, 0xef, 0xfb, 0x66, 0xe2,
	0x3d, 0xbc, 0xf0, 0x17, 0xe7, 0xc4, 0x7b, 0x78, 0xd1, 0x8f, 0xa5, 0x35, 0x61, 0x82, 0x3f, 0x39,
	0x11, 0x74, 0x12, 0xf3, 0x31, 0x56, 0x41, 0x27, 0xb1, 0xdf, 0xd2, 0x6c, 0xc2, 0x04, 0x7f, 0xf2,
	0x21, 0xe8, 0x24, 0xe6, 0xcb, 0x9a, 0x82, 0x4e, 0x62, 0x3f, 0x8c, 0xf8, 0x80, 0x3b, 0xbb, 0x26,
	0xa2, 0x49, 0x38, 0xd8, 0xe0, 0x05, 0x53, 0x4a, 0x43, 0xca, 0xfa, 0x31, 0xdd, 0xd0, 0x93, 0xfb,
	0x9a, 0xad, 0x34, 0xf4, 0x8c, 0x7e, 0x21, 0x57, 0x1a, 0x7a, 0xc6, 0x7d, 0x24, 0xd7, 0x74, 0x63,
	0xc8, 0xe4, 0x3e, 0x45, 0x1f, 0xfb, 0x96, 0xc6, 0x90, 0x71, 0x7d, 0xee, 0xb1, 0xd4, 0x24, 0x81,
	0xaf, 0x2b, 0x8b, 0xe3, 0xab, 0xf8, 0xaf, 0x37, 0x8b, 0xe3, 0x2b, 0xd1, 0x67, 0x9b, 0x3d, 0xcb,
	0x51, 0xe9, 0xf4, 0xda, 0xc6, 0x21, 0xc6, 0x52, 0xcb, 0xe1, 0x12, 0xa5, 0xb1, 0x1c, 0x3e, 0x6d,
	0xd8, 0x72, 0x24, 0x74, 0x15, 0x24, 0x4a, 0x63, 0x39, 0x22, 0x5d, 0x51, 0xcb, 0xe1, 0x16, 0xcb,
	0x2d, 0x07, 0x4f, 0x95, 0x68, 0x39, 0x82, 0xc4, 0x61, 0xa5, 0xa6, 0x59, 0x0c, 0xa4, 0x4a, 0x1d,
	0xc8, 0x87, 0x20, 0x55, 0xea, 0x50, 0x4a, 0x04, 0x4f, 0xa9, 0xa5, 0x9d, 0xc4, 0xa4, 0x41, 0x92,
	0x2a, 0x75, 0xa8, 0x13, 0xaa, 0xd4, 0x7e, 0xd6, 0x0e, 0xb1, 0x52, 0x47, 0x52, 0x80, 0x88, 0x95,
	0x3a, 0x26, 0x09, 0xc8, 0xa7, 0xc9, 0x56, 0xb2, 0x9b, 0xc5, 0x46, 0xbc, 0x95, 0x1c, 0xca, 0xd4,
	0x23, 0xde, 0x4a, 0x8e, 0x24, 0xd8, 0x69, 0xc2, 0x04, 0x9f, 0x59, 0x42, 0x30, 0x5d, 0x31, 0x39,
	0x2a, 0x04, 0xd3, 0x15, 0x9b, 0xa6, 0x22, 0x64, 0x9b, 0xc8, 0x4b, 0xcf, 0x14, 0xb6, 0x89, 0x7f,
	0x3d, 0x9a, 0xc2, 0x36, 0x05, 0x1f, 0x90, 0x86, 0x6c, 0x93, 0xac, 0x4f, 0x51, 0x92, 0x85, 0x14,
	0xb6, 0x29, 0xd8, 0x27, 0x6f, 0x9b, 0xbc, 0x67, 0xca, 0x49, 0xb6, 0x29, 0xfc, 0xfa, 0x39, 0xc9,
	0x36, 0x45, 0xdf, 0x3f, 0x53, 0x2d, 0xe6, 0x5f, 0xe0, 0x8b, 0xb5, 0x38, 0x26, 0xeb, 0x80, 0x58,
	0x8b, 0x63, 0x93, 0x05, 0x98, 0xee, 0x1a, 0x30, 0x79, 0x62, 0x45, 0x4f, 0x81, 0xa5, 0x6b, 0xc0,
	0x98, 0x89, 0xbd, 0xf9, 0xb3, 0x7f, 0xf7, 0xee, 0x19, 0xe5, 0xfb, 0xef, 0x9e, 0x51, 0xfe, 0xf5,
	0xdd, 0x33, 0xca, 0xfd, 0x95, 0x1d, 0xdd, 0x6e, 0x6b, 0xdb, 0x65, 0x1b, 0x37, 0x77, 0xb1, 0x6d,
	0x1a, 0xdd, 0x7d, 0xdc, 0xb5, 0xf7, 0x4c, 0x6c, 0x95, 0x9b, 0x46, 0x67, 0xb1, 0x69, 0x98, 0x38,
	0x36, 0x2e, 0xec, 0x3d, 0xdc, 0x21, 0x3b, 0xbd, 0x2f, 0x3b, 0xff, 0x6c, 0x8f, 0x92, 0xbb, 0x76,
	0x57, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc0, 0x75, 0xad, 0xa9, 0x8b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OmsUserManagementClient is the client API for OmsUserManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OmsUserManagementClient interface {
	// Health check method
	HealthCheck(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Mapping TWS with Trader
	CreateTraderTws(ctx context.Context, in *CreateTraderTwsMapRequest, opts ...grpc.CallOption) (*CreateTraderTwsMapResponse, error)
	GetTradersTws(ctx context.Context, in *GetTradersTwsMapRequest, opts ...grpc.CallOption) (*GetTradersTwsMapResponse, error)
	UpdateTraderTws(ctx context.Context, in *UpdateTraderTwsMapRequest, opts ...grpc.CallOption) (*UpdateTraderTwsMapResponse, error)
	DeleteTraderTws(ctx context.Context, in *DeleteTraderTwsMapRequest, opts ...grpc.CallOption) (*DeleteTraderTwsMapResponse, error)
	// Team API
	CreateTeam(ctx context.Context, in *CreateTraderTeamRequest, opts ...grpc.CallOption) (*CreateTraderTeamResponse, error)
	UpdateTeam(ctx context.Context, in *UpdateTraderTeamRequest, opts ...grpc.CallOption) (*UpdateTraderTeamResponse, error)
	GetTeams(ctx context.Context, in *GetTraderTeamRequest, opts ...grpc.CallOption) (*GetTraderTeamResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTraderTeamRequest, opts ...grpc.CallOption) (*DeleteTraderTeamResponse, error)
	// Mapping trader with team Creation
	CreateMapTeam(ctx context.Context, in *CreateTraderMapRequest, opts ...grpc.CallOption) (*CreateTraderMapResponse, error)
	UpdateMapTeam(ctx context.Context, in *UpdateTraderMapRequest, opts ...grpc.CallOption) (*UpdateTraderMapResponse, error)
	GetMappedTeams(ctx context.Context, in *GetTraderMapRequest, opts ...grpc.CallOption) (*GetTraderMapResponse, error)
	DeleteMappedTeam(ctx context.Context, in *DeleteTraderMapRequest, opts ...grpc.CallOption) (*DeleteTraderMapResponse, error)
	CreateTws(ctx context.Context, in *CreateTwsRequest, opts ...grpc.CallOption) (*CreateTwsResponse, error)
	UpdateTws(ctx context.Context, in *UpdateTwsRequest, opts ...grpc.CallOption) (*UpdateTwsResponse, error)
	GetTws(ctx context.Context, in *GetTwsRequest, opts ...grpc.CallOption) (*GetTwsResponse, error)
	DeleteTws(ctx context.Context, in *DeleteTwsRequest, opts ...grpc.CallOption) (*DeleteTwsResponse, error)
	// Audit logs API's
	CreateAuditLog(ctx context.Context, in *CreateAuditLogRequest, opts ...grpc.CallOption) (*CreateAuditLogResponse, error)
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	GetAuditLogById(ctx context.Context, in *GetAuditLogByIdRequest, opts ...grpc.CallOption) (*GetAuditLogByIdResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRoleById(ctx context.Context, in *GetRoleByIdRequest, opts ...grpc.CallOption) (*GetRoleByIdResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	GetPermissionById(ctx context.Context, in *GetPermissionByIdRequest, opts ...grpc.CallOption) (*GetPermissionByIdResponse, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	CreateMapUserPermission(ctx context.Context, in *CreateMapUserPermissionRequest, opts ...grpc.CallOption) (*CreateMapUserPermissionResponse, error)
	UpdateMapUserPermission(ctx context.Context, in *UpdateMapUserPermissionRequest, opts ...grpc.CallOption) (*UpdateMapUserPermissionResponse, error)
	GetUserPermissionsByUserId(ctx context.Context, in *GetUserPermissionsByUserIdRequest, opts ...grpc.CallOption) (*GetUserPermissionsByUserIdResponse, error)
	DeleteMapUserPermission(ctx context.Context, in *DeleteMapUserPermissionRequest, opts ...grpc.CallOption) (*DeleteMapUserPermissionResponse, error)
	CreateMapUserRole(ctx context.Context, in *CreateMapUserRoleRequest, opts ...grpc.CallOption) (*CreateMapUserRoleResponse, error)
	UpdateMapUserRole(ctx context.Context, in *UpdateMapUserRoleRequest, opts ...grpc.CallOption) (*UpdateMapUserRoleResponse, error)
	GetMapUserRoles(ctx context.Context, in *GetMapUserRolesRequest, opts ...grpc.CallOption) (*GetMapUserRolesResponse, error)
	GetMapUserRoleById(ctx context.Context, in *GetMapUserRoleByIdRequest, opts ...grpc.CallOption) (*GetMapUserRoleByIdResponse, error)
	DeleteMapUserRole(ctx context.Context, in *DeleteMapUserRoleRequest, opts ...grpc.CallOption) (*DeleteMapUserRoleResponse, error)
	CreateMapRolePermission(ctx context.Context, in *CreateMapRolePermissionRequest, opts ...grpc.CallOption) (*CreateMapRolePermissionResponse, error)
	UpdateMapRolePermission(ctx context.Context, in *UpdateMapRolePermissionRequest, opts ...grpc.CallOption) (*UpdateMapRolePermissionResponse, error)
	GetMapRolePermissions(ctx context.Context, in *GetMapRolePermissionsRequest, opts ...grpc.CallOption) (*GetMapRolePermissionsResponse, error)
	GetMapRolePermissionById(ctx context.Context, in *GetMapRolePermissionByIdRequest, opts ...grpc.CallOption) (*GetMapRolePermissionByIdResponse, error)
	DeleteMapRolePermission(ctx context.Context, in *DeleteMapRolePermissionRequest, opts ...grpc.CallOption) (*DeleteMapRolePermissionResponse, error)
	// INVESTORS API
	CreateInvestor(ctx context.Context, in *CreateInvestorRequest, opts ...grpc.CallOption) (*CreateInvestorResponse, error)
	UpdateInvestor(ctx context.Context, in *UpdateInvestorRequest, opts ...grpc.CallOption) (*UpdateInvestorResponse, error)
	GetInvestorById(ctx context.Context, in *GetInvestorByIdRequest, opts ...grpc.CallOption) (*GetInvestorByIdResponse, error)
	GetInvestors(ctx context.Context, in *GetInvestorsRequest, opts ...grpc.CallOption) (*GetInvestorsResponse, error)
	// Traders API
	CreateTrader(ctx context.Context, in *CreateTraderRequest, opts ...grpc.CallOption) (*CreateTraderResponse, error)
	UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error)
	GetTraderById(ctx context.Context, in *GetTraderByIdRequest, opts ...grpc.CallOption) (*GetTraderByIdResponse, error)
	// Broker Admins API
	CreateBrokerAdmin(ctx context.Context, in *CreateBrokerAdminRequest, opts ...grpc.CallOption) (*CreateBrokerAdminResponse, error)
	UpdateBrokerAdmin(ctx context.Context, in *UpdateBrokerAdminRequest, opts ...grpc.CallOption) (*UpdateBrokerAdminResponse, error)
	GetBrokerAdminById(ctx context.Context, in *GetBrokerAdminByIdRequest, opts ...grpc.CallOption) (*GetBrokerAdminByIdResponse, error)
	// Employee API's
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error)
	UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*UpdateEmployeeResponse, error)
	GetEmployeeById(ctx context.Context, in *GetEmployeeByIdRequest, opts ...grpc.CallOption) (*GetEmployeeByIdResponse, error)
	// Branch API's
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error)
	GetBranchById(ctx context.Context, in *GetBranchByIdRequest, opts ...grpc.CallOption) (*GetBranchByIdResponse, error)
	GetBranches(ctx context.Context, in *GetBranchesRequest, opts ...grpc.CallOption) (*GetBranchesResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	// Broker Houses API's
	CreateBrokerHouse(ctx context.Context, in *CreateBrokerHouseRequest, opts ...grpc.CallOption) (*CreateBrokerHouseResponse, error)
	UpdateBrokerHouse(ctx context.Context, in *UpdateBrokerHouseRequest, opts ...grpc.CallOption) (*UpdateBrokerHouseResponse, error)
	GetBrokerHouseById(ctx context.Context, in *GetBrokerHouseByIdRequest, opts ...grpc.CallOption) (*GetBrokerHouseByIdResponse, error)
	GetBrokerHouses(ctx context.Context, in *GetBrokerHousesRequest, opts ...grpc.CallOption) (*GetBrokerHousesResponse, error)
	DeleteBrokerHouse(ctx context.Context, in *DeleteBrokerHouseRequest, opts ...grpc.CallOption) (*DeleteBrokerHouseResponse, error)
}

type omsUserManagementClient struct {
	cc *grpc.ClientConn
}

func NewOmsUserManagementClient(cc *grpc.ClientConn) OmsUserManagementClient {
	return &omsUserManagementClient{cc}
}

func (c *omsUserManagementClient) HealthCheck(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateTraderTws(ctx context.Context, in *CreateTraderTwsMapRequest, opts ...grpc.CallOption) (*CreateTraderTwsMapResponse, error) {
	out := new(CreateTraderTwsMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateTraderTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetTradersTws(ctx context.Context, in *GetTradersTwsMapRequest, opts ...grpc.CallOption) (*GetTradersTwsMapResponse, error) {
	out := new(GetTradersTwsMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetTradersTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateTraderTws(ctx context.Context, in *UpdateTraderTwsMapRequest, opts ...grpc.CallOption) (*UpdateTraderTwsMapResponse, error) {
	out := new(UpdateTraderTwsMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateTraderTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteTraderTws(ctx context.Context, in *DeleteTraderTwsMapRequest, opts ...grpc.CallOption) (*DeleteTraderTwsMapResponse, error) {
	out := new(DeleteTraderTwsMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteTraderTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateTeam(ctx context.Context, in *CreateTraderTeamRequest, opts ...grpc.CallOption) (*CreateTraderTeamResponse, error) {
	out := new(CreateTraderTeamResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateTeam(ctx context.Context, in *UpdateTraderTeamRequest, opts ...grpc.CallOption) (*UpdateTraderTeamResponse, error) {
	out := new(UpdateTraderTeamResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetTeams(ctx context.Context, in *GetTraderTeamRequest, opts ...grpc.CallOption) (*GetTraderTeamResponse, error) {
	out := new(GetTraderTeamResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteTeam(ctx context.Context, in *DeleteTraderTeamRequest, opts ...grpc.CallOption) (*DeleteTraderTeamResponse, error) {
	out := new(DeleteTraderTeamResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateMapTeam(ctx context.Context, in *CreateTraderMapRequest, opts ...grpc.CallOption) (*CreateTraderMapResponse, error) {
	out := new(CreateTraderMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateMapTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateMapTeam(ctx context.Context, in *UpdateTraderMapRequest, opts ...grpc.CallOption) (*UpdateTraderMapResponse, error) {
	out := new(UpdateTraderMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateMapTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetMappedTeams(ctx context.Context, in *GetTraderMapRequest, opts ...grpc.CallOption) (*GetTraderMapResponse, error) {
	out := new(GetTraderMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetMappedTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteMappedTeam(ctx context.Context, in *DeleteTraderMapRequest, opts ...grpc.CallOption) (*DeleteTraderMapResponse, error) {
	out := new(DeleteTraderMapResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteMappedTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateTws(ctx context.Context, in *CreateTwsRequest, opts ...grpc.CallOption) (*CreateTwsResponse, error) {
	out := new(CreateTwsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateTws(ctx context.Context, in *UpdateTwsRequest, opts ...grpc.CallOption) (*UpdateTwsResponse, error) {
	out := new(UpdateTwsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetTws(ctx context.Context, in *GetTwsRequest, opts ...grpc.CallOption) (*GetTwsResponse, error) {
	out := new(GetTwsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteTws(ctx context.Context, in *DeleteTwsRequest, opts ...grpc.CallOption) (*DeleteTwsResponse, error) {
	out := new(DeleteTwsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteTws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateAuditLog(ctx context.Context, in *CreateAuditLogRequest, opts ...grpc.CallOption) (*CreateAuditLogResponse, error) {
	out := new(CreateAuditLogResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetAuditLogById(ctx context.Context, in *GetAuditLogByIdRequest, opts ...grpc.CallOption) (*GetAuditLogByIdResponse, error) {
	out := new(GetAuditLogByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetAuditLogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetRoleById(ctx context.Context, in *GetRoleByIdRequest, opts ...grpc.CallOption) (*GetRoleByIdResponse, error) {
	out := new(GetRoleByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error) {
	out := new(CreatePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionResponse, error) {
	out := new(UpdatePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetPermissionById(ctx context.Context, in *GetPermissionByIdRequest, opts ...grpc.CallOption) (*GetPermissionByIdResponse, error) {
	out := new(GetPermissionByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetPermissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateMapUserPermission(ctx context.Context, in *CreateMapUserPermissionRequest, opts ...grpc.CallOption) (*CreateMapUserPermissionResponse, error) {
	out := new(CreateMapUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateMapUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateMapUserPermission(ctx context.Context, in *UpdateMapUserPermissionRequest, opts ...grpc.CallOption) (*UpdateMapUserPermissionResponse, error) {
	out := new(UpdateMapUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateMapUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetUserPermissionsByUserId(ctx context.Context, in *GetUserPermissionsByUserIdRequest, opts ...grpc.CallOption) (*GetUserPermissionsByUserIdResponse, error) {
	out := new(GetUserPermissionsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetUserPermissionsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteMapUserPermission(ctx context.Context, in *DeleteMapUserPermissionRequest, opts ...grpc.CallOption) (*DeleteMapUserPermissionResponse, error) {
	out := new(DeleteMapUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteMapUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateMapUserRole(ctx context.Context, in *CreateMapUserRoleRequest, opts ...grpc.CallOption) (*CreateMapUserRoleResponse, error) {
	out := new(CreateMapUserRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateMapUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateMapUserRole(ctx context.Context, in *UpdateMapUserRoleRequest, opts ...grpc.CallOption) (*UpdateMapUserRoleResponse, error) {
	out := new(UpdateMapUserRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateMapUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetMapUserRoles(ctx context.Context, in *GetMapUserRolesRequest, opts ...grpc.CallOption) (*GetMapUserRolesResponse, error) {
	out := new(GetMapUserRolesResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetMapUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetMapUserRoleById(ctx context.Context, in *GetMapUserRoleByIdRequest, opts ...grpc.CallOption) (*GetMapUserRoleByIdResponse, error) {
	out := new(GetMapUserRoleByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetMapUserRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteMapUserRole(ctx context.Context, in *DeleteMapUserRoleRequest, opts ...grpc.CallOption) (*DeleteMapUserRoleResponse, error) {
	out := new(DeleteMapUserRoleResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteMapUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateMapRolePermission(ctx context.Context, in *CreateMapRolePermissionRequest, opts ...grpc.CallOption) (*CreateMapRolePermissionResponse, error) {
	out := new(CreateMapRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateMapRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateMapRolePermission(ctx context.Context, in *UpdateMapRolePermissionRequest, opts ...grpc.CallOption) (*UpdateMapRolePermissionResponse, error) {
	out := new(UpdateMapRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateMapRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetMapRolePermissions(ctx context.Context, in *GetMapRolePermissionsRequest, opts ...grpc.CallOption) (*GetMapRolePermissionsResponse, error) {
	out := new(GetMapRolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetMapRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetMapRolePermissionById(ctx context.Context, in *GetMapRolePermissionByIdRequest, opts ...grpc.CallOption) (*GetMapRolePermissionByIdResponse, error) {
	out := new(GetMapRolePermissionByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetMapRolePermissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteMapRolePermission(ctx context.Context, in *DeleteMapRolePermissionRequest, opts ...grpc.CallOption) (*DeleteMapRolePermissionResponse, error) {
	out := new(DeleteMapRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteMapRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateInvestor(ctx context.Context, in *CreateInvestorRequest, opts ...grpc.CallOption) (*CreateInvestorResponse, error) {
	out := new(CreateInvestorResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateInvestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateInvestor(ctx context.Context, in *UpdateInvestorRequest, opts ...grpc.CallOption) (*UpdateInvestorResponse, error) {
	out := new(UpdateInvestorResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateInvestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetInvestorById(ctx context.Context, in *GetInvestorByIdRequest, opts ...grpc.CallOption) (*GetInvestorByIdResponse, error) {
	out := new(GetInvestorByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetInvestorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetInvestors(ctx context.Context, in *GetInvestorsRequest, opts ...grpc.CallOption) (*GetInvestorsResponse, error) {
	out := new(GetInvestorsResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetInvestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateTrader(ctx context.Context, in *CreateTraderRequest, opts ...grpc.CallOption) (*CreateTraderResponse, error) {
	out := new(CreateTraderResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error) {
	out := new(UpdateTraderResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetTraderById(ctx context.Context, in *GetTraderByIdRequest, opts ...grpc.CallOption) (*GetTraderByIdResponse, error) {
	out := new(GetTraderByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetTraderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateBrokerAdmin(ctx context.Context, in *CreateBrokerAdminRequest, opts ...grpc.CallOption) (*CreateBrokerAdminResponse, error) {
	out := new(CreateBrokerAdminResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateBrokerAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateBrokerAdmin(ctx context.Context, in *UpdateBrokerAdminRequest, opts ...grpc.CallOption) (*UpdateBrokerAdminResponse, error) {
	out := new(UpdateBrokerAdminResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateBrokerAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetBrokerAdminById(ctx context.Context, in *GetBrokerAdminByIdRequest, opts ...grpc.CallOption) (*GetBrokerAdminByIdResponse, error) {
	out := new(GetBrokerAdminByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetBrokerAdminById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error) {
	out := new(CreateEmployeeResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*UpdateEmployeeResponse, error) {
	out := new(UpdateEmployeeResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetEmployeeById(ctx context.Context, in *GetEmployeeByIdRequest, opts ...grpc.CallOption) (*GetEmployeeByIdResponse, error) {
	out := new(GetEmployeeByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error) {
	out := new(UpdateBranchResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetBranchById(ctx context.Context, in *GetBranchByIdRequest, opts ...grpc.CallOption) (*GetBranchByIdResponse, error) {
	out := new(GetBranchByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetBranchById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetBranches(ctx context.Context, in *GetBranchesRequest, opts ...grpc.CallOption) (*GetBranchesResponse, error) {
	out := new(GetBranchesResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) CreateBrokerHouse(ctx context.Context, in *CreateBrokerHouseRequest, opts ...grpc.CallOption) (*CreateBrokerHouseResponse, error) {
	out := new(CreateBrokerHouseResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/CreateBrokerHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) UpdateBrokerHouse(ctx context.Context, in *UpdateBrokerHouseRequest, opts ...grpc.CallOption) (*UpdateBrokerHouseResponse, error) {
	out := new(UpdateBrokerHouseResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/UpdateBrokerHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetBrokerHouseById(ctx context.Context, in *GetBrokerHouseByIdRequest, opts ...grpc.CallOption) (*GetBrokerHouseByIdResponse, error) {
	out := new(GetBrokerHouseByIdResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetBrokerHouseById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) GetBrokerHouses(ctx context.Context, in *GetBrokerHousesRequest, opts ...grpc.CallOption) (*GetBrokerHousesResponse, error) {
	out := new(GetBrokerHousesResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/GetBrokerHouses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsUserManagementClient) DeleteBrokerHouse(ctx context.Context, in *DeleteBrokerHouseRequest, opts ...grpc.CallOption) (*DeleteBrokerHouseResponse, error) {
	out := new(DeleteBrokerHouseResponse)
	err := c.cc.Invoke(ctx, "/oms_user_management.OmsUserManagement/DeleteBrokerHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsUserManagementServer is the server API for OmsUserManagement service.
type OmsUserManagementServer interface {
	// Health check method
	HealthCheck(context.Context, *types.Empty) (*HealthCheckResponse, error)
	// Mapping TWS with Trader
	CreateTraderTws(context.Context, *CreateTraderTwsMapRequest) (*CreateTraderTwsMapResponse, error)
	GetTradersTws(context.Context, *GetTradersTwsMapRequest) (*GetTradersTwsMapResponse, error)
	UpdateTraderTws(context.Context, *UpdateTraderTwsMapRequest) (*UpdateTraderTwsMapResponse, error)
	DeleteTraderTws(context.Context, *DeleteTraderTwsMapRequest) (*DeleteTraderTwsMapResponse, error)
	// Team API
	CreateTeam(context.Context, *CreateTraderTeamRequest) (*CreateTraderTeamResponse, error)
	UpdateTeam(context.Context, *UpdateTraderTeamRequest) (*UpdateTraderTeamResponse, error)
	GetTeams(context.Context, *GetTraderTeamRequest) (*GetTraderTeamResponse, error)
	DeleteTeam(context.Context, *DeleteTraderTeamRequest) (*DeleteTraderTeamResponse, error)
	// Mapping trader with team Creation
	CreateMapTeam(context.Context, *CreateTraderMapRequest) (*CreateTraderMapResponse, error)
	UpdateMapTeam(context.Context, *UpdateTraderMapRequest) (*UpdateTraderMapResponse, error)
	GetMappedTeams(context.Context, *GetTraderMapRequest) (*GetTraderMapResponse, error)
	DeleteMappedTeam(context.Context, *DeleteTraderMapRequest) (*DeleteTraderMapResponse, error)
	CreateTws(context.Context, *CreateTwsRequest) (*CreateTwsResponse, error)
	UpdateTws(context.Context, *UpdateTwsRequest) (*UpdateTwsResponse, error)
	GetTws(context.Context, *GetTwsRequest) (*GetTwsResponse, error)
	DeleteTws(context.Context, *DeleteTwsRequest) (*DeleteTwsResponse, error)
	// Audit logs API's
	CreateAuditLog(context.Context, *CreateAuditLogRequest) (*CreateAuditLogResponse, error)
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	GetAuditLogById(context.Context, *GetAuditLogByIdRequest) (*GetAuditLogByIdResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	GetRoleById(context.Context, *GetRoleByIdRequest) (*GetRoleByIdResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	GetPermissionById(context.Context, *GetPermissionByIdRequest) (*GetPermissionByIdResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	CreateMapUserPermission(context.Context, *CreateMapUserPermissionRequest) (*CreateMapUserPermissionResponse, error)
	UpdateMapUserPermission(context.Context, *UpdateMapUserPermissionRequest) (*UpdateMapUserPermissionResponse, error)
	GetUserPermissionsByUserId(context.Context, *GetUserPermissionsByUserIdRequest) (*GetUserPermissionsByUserIdResponse, error)
	DeleteMapUserPermission(context.Context, *DeleteMapUserPermissionRequest) (*DeleteMapUserPermissionResponse, error)
	CreateMapUserRole(context.Context, *CreateMapUserRoleRequest) (*CreateMapUserRoleResponse, error)
	UpdateMapUserRole(context.Context, *UpdateMapUserRoleRequest) (*UpdateMapUserRoleResponse, error)
	GetMapUserRoles(context.Context, *GetMapUserRolesRequest) (*GetMapUserRolesResponse, error)
	GetMapUserRoleById(context.Context, *GetMapUserRoleByIdRequest) (*GetMapUserRoleByIdResponse, error)
	DeleteMapUserRole(context.Context, *DeleteMapUserRoleRequest) (*DeleteMapUserRoleResponse, error)
	CreateMapRolePermission(context.Context, *CreateMapRolePermissionRequest) (*CreateMapRolePermissionResponse, error)
	UpdateMapRolePermission(context.Context, *UpdateMapRolePermissionRequest) (*UpdateMapRolePermissionResponse, error)
	GetMapRolePermissions(context.Context, *GetMapRolePermissionsRequest) (*GetMapRolePermissionsResponse, error)
	GetMapRolePermissionById(context.Context, *GetMapRolePermissionByIdRequest) (*GetMapRolePermissionByIdResponse, error)
	DeleteMapRolePermission(context.Context, *DeleteMapRolePermissionRequest) (*DeleteMapRolePermissionResponse, error)
	// INVESTORS API
	CreateInvestor(context.Context, *CreateInvestorRequest) (*CreateInvestorResponse, error)
	UpdateInvestor(context.Context, *UpdateInvestorRequest) (*UpdateInvestorResponse, error)
	GetInvestorById(context.Context, *GetInvestorByIdRequest) (*GetInvestorByIdResponse, error)
	GetInvestors(context.Context, *GetInvestorsRequest) (*GetInvestorsResponse, error)
	// Traders API
	CreateTrader(context.Context, *CreateTraderRequest) (*CreateTraderResponse, error)
	UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error)
	GetTraderById(context.Context, *GetTraderByIdRequest) (*GetTraderByIdResponse, error)
	// Broker Admins API
	CreateBrokerAdmin(context.Context, *CreateBrokerAdminRequest) (*CreateBrokerAdminResponse, error)
	UpdateBrokerAdmin(context.Context, *UpdateBrokerAdminRequest) (*UpdateBrokerAdminResponse, error)
	GetBrokerAdminById(context.Context, *GetBrokerAdminByIdRequest) (*GetBrokerAdminByIdResponse, error)
	// Employee API's
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeResponse, error)
	UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*UpdateEmployeeResponse, error)
	GetEmployeeById(context.Context, *GetEmployeeByIdRequest) (*GetEmployeeByIdResponse, error)
	// Branch API's
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error)
	GetBranchById(context.Context, *GetBranchByIdRequest) (*GetBranchByIdResponse, error)
	GetBranches(context.Context, *GetBranchesRequest) (*GetBranchesResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	// Broker Houses API's
	CreateBrokerHouse(context.Context, *CreateBrokerHouseRequest) (*CreateBrokerHouseResponse, error)
	UpdateBrokerHouse(context.Context, *UpdateBrokerHouseRequest) (*UpdateBrokerHouseResponse, error)
	GetBrokerHouseById(context.Context, *GetBrokerHouseByIdRequest) (*GetBrokerHouseByIdResponse, error)
	GetBrokerHouses(context.Context, *GetBrokerHousesRequest) (*GetBrokerHousesResponse, error)
	DeleteBrokerHouse(context.Context, *DeleteBrokerHouseRequest) (*DeleteBrokerHouseResponse, error)
}

// UnimplementedOmsUserManagementServer can be embedded to have forward compatible implementations.
type UnimplementedOmsUserManagementServer struct {
}

func (*UnimplementedOmsUserManagementServer) HealthCheck(ctx context.Context, req *types.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateTraderTws(ctx context.Context, req *CreateTraderTwsMapRequest) (*CreateTraderTwsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTraderTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetTradersTws(ctx context.Context, req *GetTradersTwsMapRequest) (*GetTradersTwsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradersTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateTraderTws(ctx context.Context, req *UpdateTraderTwsMapRequest) (*UpdateTraderTwsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTraderTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteTraderTws(ctx context.Context, req *DeleteTraderTwsMapRequest) (*DeleteTraderTwsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTraderTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateTeam(ctx context.Context, req *CreateTraderTeamRequest) (*CreateTraderTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateTeam(ctx context.Context, req *UpdateTraderTeamRequest) (*UpdateTraderTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetTeams(ctx context.Context, req *GetTraderTeamRequest) (*GetTraderTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteTeam(ctx context.Context, req *DeleteTraderTeamRequest) (*DeleteTraderTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateMapTeam(ctx context.Context, req *CreateTraderMapRequest) (*CreateTraderMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateMapTeam(ctx context.Context, req *UpdateTraderMapRequest) (*UpdateTraderMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetMappedTeams(ctx context.Context, req *GetTraderMapRequest) (*GetTraderMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappedTeams not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteMappedTeam(ctx context.Context, req *DeleteTraderMapRequest) (*DeleteTraderMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMappedTeam not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateTws(ctx context.Context, req *CreateTwsRequest) (*CreateTwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateTws(ctx context.Context, req *UpdateTwsRequest) (*UpdateTwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetTws(ctx context.Context, req *GetTwsRequest) (*GetTwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteTws(ctx context.Context, req *DeleteTwsRequest) (*DeleteTwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTws not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateAuditLog(ctx context.Context, req *CreateAuditLogRequest) (*CreateAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditLog not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetAuditLogs(ctx context.Context, req *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetAuditLogById(ctx context.Context, req *GetAuditLogByIdRequest) (*GetAuditLogByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogById not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateRole(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateRole(ctx context.Context, req *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetRoles(ctx context.Context, req *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetRoleById(ctx context.Context, req *GetRoleByIdRequest) (*GetRoleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteRole(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreatePermission(ctx context.Context, req *CreatePermissionRequest) (*CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdatePermission(ctx context.Context, req *UpdatePermissionRequest) (*UpdatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetPermissions(ctx context.Context, req *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetPermissionById(ctx context.Context, req *GetPermissionByIdRequest) (*GetPermissionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionById not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeletePermission(ctx context.Context, req *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateMapUserPermission(ctx context.Context, req *CreateMapUserPermissionRequest) (*CreateMapUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapUserPermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateMapUserPermission(ctx context.Context, req *UpdateMapUserPermissionRequest) (*UpdateMapUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapUserPermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetUserPermissionsByUserId(ctx context.Context, req *GetUserPermissionsByUserIdRequest) (*GetUserPermissionsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionsByUserId not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteMapUserPermission(ctx context.Context, req *DeleteMapUserPermissionRequest) (*DeleteMapUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapUserPermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateMapUserRole(ctx context.Context, req *CreateMapUserRoleRequest) (*CreateMapUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapUserRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateMapUserRole(ctx context.Context, req *UpdateMapUserRoleRequest) (*UpdateMapUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapUserRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetMapUserRoles(ctx context.Context, req *GetMapUserRolesRequest) (*GetMapUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapUserRoles not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetMapUserRoleById(ctx context.Context, req *GetMapUserRoleByIdRequest) (*GetMapUserRoleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapUserRoleById not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteMapUserRole(ctx context.Context, req *DeleteMapUserRoleRequest) (*DeleteMapUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapUserRole not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateMapRolePermission(ctx context.Context, req *CreateMapRolePermissionRequest) (*CreateMapRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapRolePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateMapRolePermission(ctx context.Context, req *UpdateMapRolePermissionRequest) (*UpdateMapRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapRolePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetMapRolePermissions(ctx context.Context, req *GetMapRolePermissionsRequest) (*GetMapRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapRolePermissions not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetMapRolePermissionById(ctx context.Context, req *GetMapRolePermissionByIdRequest) (*GetMapRolePermissionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapRolePermissionById not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteMapRolePermission(ctx context.Context, req *DeleteMapRolePermissionRequest) (*DeleteMapRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapRolePermission not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateInvestor(ctx context.Context, req *CreateInvestorRequest) (*CreateInvestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvestor not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateInvestor(ctx context.Context, req *UpdateInvestorRequest) (*UpdateInvestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvestor not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetInvestorById(ctx context.Context, req *GetInvestorByIdRequest) (*GetInvestorByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorById not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetInvestors(ctx context.Context, req *GetInvestorsRequest) (*GetInvestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestors not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateTrader(ctx context.Context, req *CreateTraderRequest) (*CreateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrader not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateTrader(ctx context.Context, req *UpdateTraderRequest) (*UpdateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrader not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetTraderById(ctx context.Context, req *GetTraderByIdRequest) (*GetTraderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraderById not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateBrokerAdmin(ctx context.Context, req *CreateBrokerAdminRequest) (*CreateBrokerAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerAdmin not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateBrokerAdmin(ctx context.Context, req *UpdateBrokerAdminRequest) (*UpdateBrokerAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrokerAdmin not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetBrokerAdminById(ctx context.Context, req *GetBrokerAdminByIdRequest) (*GetBrokerAdminByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerAdminById not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateEmployee(ctx context.Context, req *CreateEmployeeRequest) (*CreateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateEmployee(ctx context.Context, req *UpdateEmployeeRequest) (*UpdateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetEmployeeById(ctx context.Context, req *GetEmployeeByIdRequest) (*GetEmployeeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateBranch(ctx context.Context, req *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateBranch(ctx context.Context, req *UpdateBranchRequest) (*UpdateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetBranchById(ctx context.Context, req *GetBranchByIdRequest) (*GetBranchByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchById not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetBranches(ctx context.Context, req *GetBranchesRequest) (*GetBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranches not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteBranch(ctx context.Context, req *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedOmsUserManagementServer) CreateBrokerHouse(ctx context.Context, req *CreateBrokerHouseRequest) (*CreateBrokerHouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerHouse not implemented")
}
func (*UnimplementedOmsUserManagementServer) UpdateBrokerHouse(ctx context.Context, req *UpdateBrokerHouseRequest) (*UpdateBrokerHouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrokerHouse not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetBrokerHouseById(ctx context.Context, req *GetBrokerHouseByIdRequest) (*GetBrokerHouseByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerHouseById not implemented")
}
func (*UnimplementedOmsUserManagementServer) GetBrokerHouses(ctx context.Context, req *GetBrokerHousesRequest) (*GetBrokerHousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerHouses not implemented")
}
func (*UnimplementedOmsUserManagementServer) DeleteBrokerHouse(ctx context.Context, req *DeleteBrokerHouseRequest) (*DeleteBrokerHouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrokerHouse not implemented")
}

func RegisterOmsUserManagementServer(s *grpc.Server, srv OmsUserManagementServer) {
	s.RegisterService(&_OmsUserManagement_serviceDesc, srv)
}

func _OmsUserManagement_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).HealthCheck(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateTraderTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTraderTwsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateTraderTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateTraderTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateTraderTws(ctx, req.(*CreateTraderTwsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetTradersTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradersTwsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetTradersTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetTradersTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetTradersTws(ctx, req.(*GetTradersTwsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateTraderTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderTwsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateTraderTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateTraderTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateTraderTws(ctx, req.(*UpdateTraderTwsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteTraderTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTraderTwsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteTraderTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteTraderTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteTraderTws(ctx, req.(*DeleteTraderTwsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTraderTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateTeam(ctx, req.(*CreateTraderTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateTeam(ctx, req.(*UpdateTraderTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetTeams(ctx, req.(*GetTraderTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTraderTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteTeam(ctx, req.(*DeleteTraderTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateMapTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTraderMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateMapTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateMapTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateMapTeam(ctx, req.(*CreateTraderMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateMapTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateMapTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateMapTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateMapTeam(ctx, req.(*UpdateTraderMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetMappedTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetMappedTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetMappedTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetMappedTeams(ctx, req.(*GetTraderMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteMappedTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTraderMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteMappedTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteMappedTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteMappedTeam(ctx, req.(*DeleteTraderMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateTws(ctx, req.(*CreateTwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateTws(ctx, req.(*UpdateTwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetTws(ctx, req.(*GetTwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteTws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteTws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteTws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteTws(ctx, req.(*DeleteTwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateAuditLog(ctx, req.(*CreateAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetAuditLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetAuditLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetAuditLogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetAuditLogById(ctx, req.(*GetAuditLogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetRoleById(ctx, req.(*GetRoleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetPermissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetPermissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetPermissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetPermissionById(ctx, req.(*GetPermissionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateMapUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateMapUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateMapUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateMapUserPermission(ctx, req.(*CreateMapUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateMapUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateMapUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateMapUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateMapUserPermission(ctx, req.(*UpdateMapUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetUserPermissionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetUserPermissionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetUserPermissionsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetUserPermissionsByUserId(ctx, req.(*GetUserPermissionsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteMapUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteMapUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteMapUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteMapUserPermission(ctx, req.(*DeleteMapUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateMapUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateMapUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateMapUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateMapUserRole(ctx, req.(*CreateMapUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateMapUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateMapUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateMapUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateMapUserRole(ctx, req.(*UpdateMapUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetMapUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetMapUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetMapUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetMapUserRoles(ctx, req.(*GetMapUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetMapUserRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapUserRoleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetMapUserRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetMapUserRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetMapUserRoleById(ctx, req.(*GetMapUserRoleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteMapUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteMapUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteMapUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteMapUserRole(ctx, req.(*DeleteMapUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateMapRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateMapRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateMapRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateMapRolePermission(ctx, req.(*CreateMapRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateMapRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateMapRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateMapRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateMapRolePermission(ctx, req.(*UpdateMapRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetMapRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetMapRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetMapRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetMapRolePermissions(ctx, req.(*GetMapRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetMapRolePermissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRolePermissionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetMapRolePermissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetMapRolePermissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetMapRolePermissionById(ctx, req.(*GetMapRolePermissionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteMapRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteMapRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteMapRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteMapRolePermission(ctx, req.(*DeleteMapRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateInvestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateInvestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateInvestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateInvestor(ctx, req.(*CreateInvestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateInvestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateInvestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateInvestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateInvestor(ctx, req.(*UpdateInvestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetInvestorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetInvestorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetInvestorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetInvestorById(ctx, req.(*GetInvestorByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetInvestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetInvestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetInvestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetInvestors(ctx, req.(*GetInvestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateTrader(ctx, req.(*CreateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateTrader(ctx, req.(*UpdateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetTraderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetTraderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetTraderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetTraderById(ctx, req.(*GetTraderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateBrokerAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateBrokerAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateBrokerAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateBrokerAdmin(ctx, req.(*CreateBrokerAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateBrokerAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrokerAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateBrokerAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateBrokerAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateBrokerAdmin(ctx, req.(*UpdateBrokerAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetBrokerAdminById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerAdminByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetBrokerAdminById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetBrokerAdminById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetBrokerAdminById(ctx, req.(*GetBrokerAdminByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateEmployee(ctx, req.(*CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateEmployee(ctx, req.(*UpdateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetEmployeeById(ctx, req.(*GetEmployeeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetBranchById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetBranchById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetBranchById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetBranchById(ctx, req.(*GetBranchByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetBranches(ctx, req.(*GetBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_CreateBrokerHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).CreateBrokerHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/CreateBrokerHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).CreateBrokerHouse(ctx, req.(*CreateBrokerHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_UpdateBrokerHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrokerHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).UpdateBrokerHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/UpdateBrokerHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).UpdateBrokerHouse(ctx, req.(*UpdateBrokerHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetBrokerHouseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerHouseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetBrokerHouseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetBrokerHouseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetBrokerHouseById(ctx, req.(*GetBrokerHouseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_GetBrokerHouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerHousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).GetBrokerHouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/GetBrokerHouses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).GetBrokerHouses(ctx, req.(*GetBrokerHousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsUserManagement_DeleteBrokerHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrokerHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsUserManagementServer).DeleteBrokerHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oms_user_management.OmsUserManagement/DeleteBrokerHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsUserManagementServer).DeleteBrokerHouse(ctx, req.(*DeleteBrokerHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OmsUserManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oms_user_management.OmsUserManagement",
	HandlerType: (*OmsUserManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OmsUserManagement_HealthCheck_Handler,
		},
		{
			MethodName: "CreateTraderTws",
			Handler:    _OmsUserManagement_CreateTraderTws_Handler,
		},
		{
			MethodName: "GetTradersTws",
			Handler:    _OmsUserManagement_GetTradersTws_Handler,
		},
		{
			MethodName: "UpdateTraderTws",
			Handler:    _OmsUserManagement_UpdateTraderTws_Handler,
		},
		{
			MethodName: "DeleteTraderTws",
			Handler:    _OmsUserManagement_DeleteTraderTws_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _OmsUserManagement_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _OmsUserManagement_UpdateTeam_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _OmsUserManagement_GetTeams_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _OmsUserManagement_DeleteTeam_Handler,
		},
		{
			MethodName: "CreateMapTeam",
			Handler:    _OmsUserManagement_CreateMapTeam_Handler,
		},
		{
			MethodName: "UpdateMapTeam",
			Handler:    _OmsUserManagement_UpdateMapTeam_Handler,
		},
		{
			MethodName: "GetMappedTeams",
			Handler:    _OmsUserManagement_GetMappedTeams_Handler,
		},
		{
			MethodName: "DeleteMappedTeam",
			Handler:    _OmsUserManagement_DeleteMappedTeam_Handler,
		},
		{
			MethodName: "CreateTws",
			Handler:    _OmsUserManagement_CreateTws_Handler,
		},
		{
			MethodName: "UpdateTws",
			Handler:    _OmsUserManagement_UpdateTws_Handler,
		},
		{
			MethodName: "GetTws",
			Handler:    _OmsUserManagement_GetTws_Handler,
		},
		{
			MethodName: "DeleteTws",
			Handler:    _OmsUserManagement_DeleteTws_Handler,
		},
		{
			MethodName: "CreateAuditLog",
			Handler:    _OmsUserManagement_CreateAuditLog_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _OmsUserManagement_GetAuditLogs_Handler,
		},
		{
			MethodName: "GetAuditLogById",
			Handler:    _OmsUserManagement_GetAuditLogById_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _OmsUserManagement_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _OmsUserManagement_UpdateRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _OmsUserManagement_GetRoles_Handler,
		},
		{
			MethodName: "GetRoleById",
			Handler:    _OmsUserManagement_GetRoleById_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _OmsUserManagement_DeleteRole_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _OmsUserManagement_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _OmsUserManagement_UpdatePermission_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _OmsUserManagement_GetPermissions_Handler,
		},
		{
			MethodName: "GetPermissionById",
			Handler:    _OmsUserManagement_GetPermissionById_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _OmsUserManagement_DeletePermission_Handler,
		},
		{
			MethodName: "CreateMapUserPermission",
			Handler:    _OmsUserManagement_CreateMapUserPermission_Handler,
		},
		{
			MethodName: "UpdateMapUserPermission",
			Handler:    _OmsUserManagement_UpdateMapUserPermission_Handler,
		},
		{
			MethodName: "GetUserPermissionsByUserId",
			Handler:    _OmsUserManagement_GetUserPermissionsByUserId_Handler,
		},
		{
			MethodName: "DeleteMapUserPermission",
			Handler:    _OmsUserManagement_DeleteMapUserPermission_Handler,
		},
		{
			MethodName: "CreateMapUserRole",
			Handler:    _OmsUserManagement_CreateMapUserRole_Handler,
		},
		{
			MethodName: "UpdateMapUserRole",
			Handler:    _OmsUserManagement_UpdateMapUserRole_Handler,
		},
		{
			MethodName: "GetMapUserRoles",
			Handler:    _OmsUserManagement_GetMapUserRoles_Handler,
		},
		{
			MethodName: "GetMapUserRoleById",
			Handler:    _OmsUserManagement_GetMapUserRoleById_Handler,
		},
		{
			MethodName: "DeleteMapUserRole",
			Handler:    _OmsUserManagement_DeleteMapUserRole_Handler,
		},
		{
			MethodName: "CreateMapRolePermission",
			Handler:    _OmsUserManagement_CreateMapRolePermission_Handler,
		},
		{
			MethodName: "UpdateMapRolePermission",
			Handler:    _OmsUserManagement_UpdateMapRolePermission_Handler,
		},
		{
			MethodName: "GetMapRolePermissions",
			Handler:    _OmsUserManagement_GetMapRolePermissions_Handler,
		},
		{
			MethodName: "GetMapRolePermissionById",
			Handler:    _OmsUserManagement_GetMapRolePermissionById_Handler,
		},
		{
			MethodName: "DeleteMapRolePermission",
			Handler:    _OmsUserManagement_DeleteMapRolePermission_Handler,
		},
		{
			MethodName: "CreateInvestor",
			Handler:    _OmsUserManagement_CreateInvestor_Handler,
		},
		{
			MethodName: "UpdateInvestor",
			Handler:    _OmsUserManagement_UpdateInvestor_Handler,
		},
		{
			MethodName: "GetInvestorById",
			Handler:    _OmsUserManagement_GetInvestorById_Handler,
		},
		{
			MethodName: "GetInvestors",
			Handler:    _OmsUserManagement_GetInvestors_Handler,
		},
		{
			MethodName: "CreateTrader",
			Handler:    _OmsUserManagement_CreateTrader_Handler,
		},
		{
			MethodName: "UpdateTrader",
			Handler:    _OmsUserManagement_UpdateTrader_Handler,
		},
		{
			MethodName: "GetTraderById",
			Handler:    _OmsUserManagement_GetTraderById_Handler,
		},
		{
			MethodName: "CreateBrokerAdmin",
			Handler:    _OmsUserManagement_CreateBrokerAdmin_Handler,
		},
		{
			MethodName: "UpdateBrokerAdmin",
			Handler:    _OmsUserManagement_UpdateBrokerAdmin_Handler,
		},
		{
			MethodName: "GetBrokerAdminById",
			Handler:    _OmsUserManagement_GetBrokerAdminById_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _OmsUserManagement_CreateEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _OmsUserManagement_UpdateEmployee_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _OmsUserManagement_GetEmployeeById_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _OmsUserManagement_CreateBranch_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _OmsUserManagement_UpdateBranch_Handler,
		},
		{
			MethodName: "GetBranchById",
			Handler:    _OmsUserManagement_GetBranchById_Handler,
		},
		{
			MethodName: "GetBranches",
			Handler:    _OmsUserManagement_GetBranches_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _OmsUserManagement_DeleteBranch_Handler,
		},
		{
			MethodName: "CreateBrokerHouse",
			Handler:    _OmsUserManagement_CreateBrokerHouse_Handler,
		},
		{
			MethodName: "UpdateBrokerHouse",
			Handler:    _OmsUserManagement_UpdateBrokerHouse_Handler,
		},
		{
			MethodName: "GetBrokerHouseById",
			Handler:    _OmsUserManagement_GetBrokerHouseById_Handler,
		},
		{
			MethodName: "GetBrokerHouses",
			Handler:    _OmsUserManagement_GetBrokerHouses_Handler,
		},
		{
			MethodName: "DeleteBrokerHouse",
			Handler:    _OmsUserManagement_DeleteBrokerHouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oms-user-management.proto",
}

func (m *CreateEmployeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEmployeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEmployeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Designation) > 0 {
		i -= len(m.Designation)
		copy(dAtA[i:], m.Designation)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Designation)))
		i--
		dAtA[i] = 0x72
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateEmployeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEmployeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEmployeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Designation) > 0 {
		i -= len(m.Designation)
		copy(dAtA[i:], m.Designation)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Designation)))
		i--
		dAtA[i] = 0x72
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Designation) > 0 {
		i -= len(m.Designation)
		copy(dAtA[i:], m.Designation)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Designation)))
		i--
		dAtA[i] = 0x42
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrokerAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrokerAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrokerAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsIsolatedUser {
		i--
		if m.IsIsolatedUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrokerAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrokerAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrokerAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBrokerAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrokerAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBrokerAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsIsolatedUser {
		i--
		if m.IsIsolatedUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBrokerAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrokerAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBrokerAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerAdminByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerAdminByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerAdminByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerAdminByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerAdminByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerAdminByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsIsolatedUser {
		i--
		if m.IsIsolatedUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBrokerAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrokerAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBrokerAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBrokerAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrokerAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBrokerAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.LicenceNumber) > 0 {
		i -= len(m.LicenceNumber)
		copy(dAtA[i:], m.LicenceNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.LicenceNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.LicenceNumber) > 0 {
		i -= len(m.LicenceNumber)
		copy(dAtA[i:], m.LicenceNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.LicenceNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.LicenceNumber) > 0 {
		i -= len(m.LicenceNumber)
		copy(dAtA[i:], m.LicenceNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.LicenceNumber)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.BranchId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BranchId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInvestorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvestorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInvestorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserWithInvestorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserWithInvestorType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserWithInvestorType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BoAccountNumber) > 0 {
		i -= len(m.BoAccountNumber)
		copy(dAtA[i:], m.BoAccountNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BoAccountNumber)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClientCode) > 0 {
		i -= len(m.ClientCode)
		copy(dAtA[i:], m.ClientCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ClientCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PrimaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PrimaryTwsId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInvestorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvestorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInvestorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Investors) > 0 {
		for iNdEx := len(m.Investors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Investors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetInvestorByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvestorByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInvestorByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInvestorByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvestorByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInvestorByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BoAccountNumber) > 0 {
		i -= len(m.BoAccountNumber)
		copy(dAtA[i:], m.BoAccountNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BoAccountNumber)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClientCode) > 0 {
		i -= len(m.ClientCode)
		copy(dAtA[i:], m.ClientCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ClientCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PrimaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PrimaryTwsId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateInvestorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInvestorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateInvestorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientCode) > 0 {
		i -= len(m.ClientCode)
		copy(dAtA[i:], m.ClientCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ClientCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BoAccountNumber) > 0 {
		i -= len(m.BoAccountNumber)
		copy(dAtA[i:], m.BoAccountNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BoAccountNumber)))
		i--
		dAtA[i] = 0x72
	}
	if m.SecondaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.SecondaryTwsId))
		i--
		dAtA[i] = 0x68
	}
	if m.PrimaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PrimaryTwsId))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateInvestorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInvestorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateInvestorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateInvestorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateInvestorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateInvestorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientCode) > 0 {
		i -= len(m.ClientCode)
		copy(dAtA[i:], m.ClientCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ClientCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CanTrade {
		i--
		if m.CanTrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BoAccountNumber) > 0 {
		i -= len(m.BoAccountNumber)
		copy(dAtA[i:], m.BoAccountNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BoAccountNumber)))
		i--
		dAtA[i] = 0x72
	}
	if m.SecondaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.SecondaryTwsId))
		i--
		dAtA[i] = 0x68
	}
	if m.PrimaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PrimaryTwsId))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CanLogin {
		i--
		if m.CanLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateInvestorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateInvestorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateInvestorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BoAccountNumber) > 0 {
		i -= len(m.BoAccountNumber)
		copy(dAtA[i:], m.BoAccountNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BoAccountNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClientCode) > 0 {
		i -= len(m.ClientCode)
		copy(dAtA[i:], m.ClientCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ClientCode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PrimaryTwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PrimaryTwsId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapRolePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapRolePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapRolePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapRolePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapRolePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapRolePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapRolePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapRolePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapRolePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapRolePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapRolePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapRolePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapRolePermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapRolePermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapRolePermissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMapRolePermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapRolePermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapRolePermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MappedPermissionRoles) > 0 {
		for iNdEx := len(m.MappedPermissionRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappedPermissionRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapRolePermissionsResponseMappedRoleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapRolePermissionsResponseMappedRoleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapRolePermissionsResponseMappedRoleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapRolePermissionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapRolePermissionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapRolePermissionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapRolePermissionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapRolePermissionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapRolePermissionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RolesAndPermissions) > 0 {
		for iNdEx := len(m.RolesAndPermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RolesAndPermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RolesAndPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolesAndPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolesAndPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapRolePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapRolePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapRolePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapRolePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapRolePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapRolePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapUserRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapUserRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapUserRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapUserRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapUserRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapUserRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapUserRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapUserRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapUserRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapUserRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapUserRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMapUserRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapUserRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapUserRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MappedUserRoleLists) > 0 {
		for iNdEx := len(m.MappedUserRoleLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappedUserRoleLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapUserRolesResponseMappedUserRoleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapUserRolesResponseMappedUserRoleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapUserRolesResponseMappedUserRoleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapUserRoleByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapUserRoleByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapUserRoleByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMapUserRoleByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapUserRoleByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapUserRoleByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RoleId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapUserRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapUserRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapUserRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapUserRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapUserPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapUserPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapUserPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRevoked {
		i--
		if m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMapUserPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMapUserPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMapUserPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapUserPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapUserPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapUserPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRevoked {
		i--
		if m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapUserPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapUserPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapUserPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserPermissionsByUserIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPermissionsByUserIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserPermissionsByUserIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserPermissionsByUserIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPermissionsByUserIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserPermissionsByUserIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserPermissions) > 0 {
		for iNdEx := len(m.UserPermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapUserPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapUserPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapUserPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PermissionId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMapUserPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMapUserPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMapUserPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRolesResponse_RoleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRolesResponse_RoleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRolesResponse_RoleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRoleByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoleByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoleByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoleByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Permissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionsResponse_PermissionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsResponse_PermissionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionsResponse_PermissionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAuditLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuditLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAuditLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResponseBody != nil {
		{
			size, err := m.ResponseBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RequestBody != nil {
		{
			size, err := m.RequestBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x32
	}
	if m.HttpMethod != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.AttemptByType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptByType))
		i--
		dAtA[i] = 0x18
	}
	if m.AttemptById != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptById))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAuditLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuditLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAuditLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuditLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuditLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuditLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAuditLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuditLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuditLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuditLogs) > 0 {
		for iNdEx := len(m.AuditLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuditLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuditLogsResponseAuditLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuditLogsResponseAuditLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuditLogsResponseAuditLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x70
	}
	if m.ResponseBody != nil {
		{
			size, err := m.ResponseBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RequestBody != nil {
		{
			size, err := m.RequestBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x32
	}
	if m.HttpMethod != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.AttemptByType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptByType))
		i--
		dAtA[i] = 0x18
	}
	if m.AttemptById != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptById))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuditLogByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuditLogByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuditLogByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuditLogByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuditLogByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuditLogByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x70
	}
	if m.ResponseBody != nil {
		{
			size, err := m.ResponseBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RequestBody != nil {
		{
			size, err := m.RequestBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x32
	}
	if m.HttpMethod != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.AttemptByType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptByType))
		i--
		dAtA[i] = 0x18
	}
	if m.AttemptById != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.AttemptById))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionType != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBranchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBranchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBranchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BranchType) > 0 {
		i -= len(m.BranchType)
		copy(dAtA[i:], m.BranchType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchType)))
		i--
		dAtA[i] = 0x72
	}
	if m.BrokerHouseId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BrokerHouseId))
		i--
		dAtA[i] = 0x68
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BranchName) > 0 {
		i -= len(m.BranchName)
		copy(dAtA[i:], m.BranchName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBranchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBranchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBranchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBranchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBranchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBranchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BranchType) > 0 {
		i -= len(m.BranchType)
		copy(dAtA[i:], m.BranchType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchType)))
		i--
		dAtA[i] = 0x72
	}
	if m.BrokerHouseId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BrokerHouseId))
		i--
		dAtA[i] = 0x68
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BranchName) > 0 {
		i -= len(m.BranchName)
		copy(dAtA[i:], m.BranchName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBranchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBranchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBranchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBranchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBranchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBranchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBranchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBranchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBranchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Branches) > 0 {
		for iNdEx := len(m.Branches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Branches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBranchesResponseBranchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBranchesResponseBranchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBranchesResponseBranchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BranchType) > 0 {
		i -= len(m.BranchType)
		copy(dAtA[i:], m.BranchType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchType)))
		i--
		dAtA[i] = 0x72
	}
	if m.BrokerHouseId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BrokerHouseId))
		i--
		dAtA[i] = 0x68
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BranchName) > 0 {
		i -= len(m.BranchName)
		copy(dAtA[i:], m.BranchName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBranchByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBranchByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBranchByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBranchByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBranchByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBranchByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BranchType) > 0 {
		i -= len(m.BranchType)
		copy(dAtA[i:], m.BranchType)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchType)))
		i--
		dAtA[i] = 0x72
	}
	if m.BrokerHouseId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.BrokerHouseId))
		i--
		dAtA[i] = 0x68
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BranchName) > 0 {
		i -= len(m.BranchName)
		copy(dAtA[i:], m.BranchName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BranchName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBranchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBranchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBranchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBranchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBranchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBranchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrokerHouseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrokerHouseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrokerHouseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrokerHouseName) > 0 {
		i -= len(m.BrokerHouseName)
		copy(dAtA[i:], m.BrokerHouseName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BrokerHouseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrokerHouseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrokerHouseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrokerHouseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBrokerHouseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrokerHouseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBrokerHouseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrokerHouseName) > 0 {
		i -= len(m.BrokerHouseName)
		copy(dAtA[i:], m.BrokerHouseName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BrokerHouseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBrokerHouseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBrokerHouseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBrokerHouseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerHousesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerHousesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerHousesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerHousesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerHousesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerHousesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BrokerHouses) > 0 {
		for iNdEx := len(m.BrokerHouses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BrokerHouses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerHousesResponseBrokerHouseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerHousesResponseBrokerHouseList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerHousesResponseBrokerHouseList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrokerHouseName) > 0 {
		i -= len(m.BrokerHouseName)
		copy(dAtA[i:], m.BrokerHouseName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BrokerHouseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerHouseByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerHouseByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerHouseByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBrokerHouseByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBrokerHouseByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBrokerHouseByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x60
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidCurrency) > 0 {
		i -= len(m.ValidCurrency)
		copy(dAtA[i:], m.ValidCurrency)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ValidCurrency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EmailAddress) > 0 {
		i -= len(m.EmailAddress)
		copy(dAtA[i:], m.EmailAddress)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.EmailAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TelephoneNumber) > 0 {
		i -= len(m.TelephoneNumber)
		copy(dAtA[i:], m.TelephoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TelephoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrokerHouseName) > 0 {
		i -= len(m.BrokerHouseName)
		copy(dAtA[i:], m.BrokerHouseName)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.BrokerHouseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBrokerHouseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrokerHouseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBrokerHouseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBrokerHouseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBrokerHouseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBrokerHouseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MappedTrader) > 0 {
		for iNdEx := len(m.MappedTrader) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappedTrader[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderMapResponse_TraderMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderMapResponse_TraderMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderMapResponse_TraderMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradersTeam) > 0 {
		for iNdEx := len(m.TradersTeam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradersTeam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTraderTeamResponse_TraderTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraderTeamResponse_TraderTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTraderTeamResponse_TraderTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaginationInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginationInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaginationInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageToken != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PageToken))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaginationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaginationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalRecordCount != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TotalRecordCount))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalPageCount != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TotalPageCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousPageToken != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.PreviousPageToken))
		i--
		dAtA[i] = 0x20
	}
	if m.NextPageToken != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.NextPageToken))
		i--
		dAtA[i] = 0x18
	}
	if m.FirstPageToken != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.FirstPageToken))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfPageToken != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.SelfPageToken))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderTwsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderTwsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderTwsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TwsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTraderTwsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTraderTwsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTraderTwsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderTwsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderTwsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderTwsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TwsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTraderTwsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTraderTwsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTraderTwsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTradersTwsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTradersTwsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTradersTwsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTradersTwsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTradersTwsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTradersTwsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradersTws) > 0 {
		for iNdEx := len(m.TradersTws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradersTws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTradersTwsMapResponse_TraderTws) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTradersTwsMapResponse_TraderTws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTradersTwsMapResponse_TraderTws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.TraderId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TraderId))
		i--
		dAtA[i] = 0x10
	}
	if m.TwsId != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.TwsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderTwsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderTwsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderTwsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTraderTwsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTraderTwsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTraderTwsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTwsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTwsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTwsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TwsCode) > 0 {
		i -= len(m.TwsCode)
		copy(dAtA[i:], m.TwsCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TwsCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTwsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTwsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTwsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTwsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTwsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTwsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TwsCode) > 0 {
		i -= len(m.TwsCode)
		copy(dAtA[i:], m.TwsCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TwsCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTwsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTwsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTwsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTwsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTwsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationRequest != nil {
		{
			size, err := m.PaginationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTwsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTwsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaginationResponse != nil {
		{
			size, err := m.PaginationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tws) > 0 {
		for iNdEx := len(m.Tws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmsUserManagement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTwsResponseTwsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwsResponseTwsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTwsResponseTwsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TwsCode) > 0 {
		i -= len(m.TwsCode)
		copy(dAtA[i:], m.TwsCode)
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(len(m.TwsCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTwsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTwsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTwsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTwsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTwsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTwsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintOmsUserManagement(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOmsUserManagement(dAtA []byte, offset int, v uint64) int {
	offset -= sovOmsUserManagement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateEmployeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	l = len(m.Designation)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateEmployeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateEmployeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	l = len(m.Designation)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateEmployeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEmployeeByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEmployeeByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	l = len(m.Designation)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBrokerAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.IsActive {
		n += 2
	}
	if m.ReadOnly {
		n += 2
	}
	if m.IsIsolatedUser {
		n += 3
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBrokerAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrokerAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.IsActive {
		n += 2
	}
	if m.ReadOnly {
		n += 2
	}
	if m.IsIsolatedUser {
		n += 3
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrokerAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerAdminByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerAdminByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.ReadOnly {
		n += 2
	}
	if m.CanTrade {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.IsIsolatedUser {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrokerAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrokerAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.IsActive {
		n += 2
	}
	if m.ReadOnly {
		n += 2
	}
	l = len(m.LicenceNumber)
	if l > 0 {
		n += 2 + l + sovOmsUserManagement(uint64(l))
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.IsActive {
		n += 2
	}
	if m.ReadOnly {
		n += 2
	}
	l = len(m.LicenceNumber)
	if l > 0 {
		n += 2 + l + sovOmsUserManagement(uint64(l))
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.BranchId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BranchId))
	}
	if m.ReadOnly {
		n += 2
	}
	l = len(m.LicenceNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.CanTrade {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvestorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserWithInvestorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.PrimaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PrimaryTwsId))
	}
	l = len(m.ClientCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.BoAccountNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvestorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Investors) > 0 {
		for _, e := range m.Investors {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvestorByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvestorByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.PrimaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PrimaryTwsId))
	}
	l = len(m.ClientCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.BoAccountNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateInvestorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.PrimaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PrimaryTwsId))
	}
	if m.SecondaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.SecondaryTwsId))
	}
	l = len(m.BoAccountNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.ReadOnly {
		n += 3
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	l = len(m.ClientCode)
	if l > 0 {
		n += 2 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateInvestorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateInvestorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AuthId))
	}
	if m.UserType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserType))
	}
	if m.CanLogin {
		n += 2
	}
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsEnabled {
		n += 2
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.PrimaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PrimaryTwsId))
	}
	if m.SecondaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.SecondaryTwsId))
	}
	l = len(m.BoAccountNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.ReadOnly {
		n += 3
	}
	if m.CanTrade {
		n += 3
	}
	if m.IsDeleted {
		n += 3
	}
	l = len(m.ClientCode)
	if l > 0 {
		n += 2 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateInvestorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.PrimaryTwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PrimaryTwsId))
	}
	l = len(m.ClientCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.BoAccountNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapRolePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapRolePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapRolePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapRolePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapRolePermissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapRolePermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.MappedPermissionRoles) > 0 {
		for _, e := range m.MappedPermissionRoles {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapRolePermissionsResponseMappedRoleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapRolePermissionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapRolePermissionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RolesAndPermissions) > 0 {
		for _, e := range m.RolesAndPermissions {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RolesAndPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapRolePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapRolePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapUserRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapUserRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapUserRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapUserRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapUserRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapUserRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.MappedUserRoleLists) > 0 {
		for _, e := range m.MappedUserRoleLists {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapUserRolesResponseMappedUserRoleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapUserRoleByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapUserRoleByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.RoleId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.RoleId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapUserRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapUserRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapUserPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsRevoked {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMapUserPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapUserPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsRevoked {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapUserPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserPermissionsByUserIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserPermissionsByUserIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.UserPermissions) > 0 {
		for _, e := range m.UserPermissions {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserPermissionsByUserIdResponse_UserPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapUserPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.UserId))
	}
	if m.PermissionId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PermissionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMapUserPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRolesResponse_RoleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoleByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoleByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionsResponse_PermissionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAuditLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.ActionType))
	}
	if m.AttemptById != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptById))
	}
	if m.AttemptByType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptByType))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.HttpMethod))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsSuccess {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.RequestBody != nil {
		l = m.RequestBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.ResponseBody != nil {
		l = m.ResponseBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAuditLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuditLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuditLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.AuditLogs) > 0 {
		for _, e := range m.AuditLogs {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuditLogsResponseAuditLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.ActionType))
	}
	if m.AttemptById != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptById))
	}
	if m.AttemptByType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptByType))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.HttpMethod))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsSuccess {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.RequestBody != nil {
		l = m.RequestBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.ResponseBody != nil {
		l = m.ResponseBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuditLogByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuditLogByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.ActionType))
	}
	if m.AttemptById != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptById))
	}
	if m.AttemptByType != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.AttemptByType))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.HttpMethod))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsSuccess {
		n += 2
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.RequestBody != nil {
		l = m.RequestBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.ResponseBody != nil {
		l = m.ResponseBody.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBranchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.BrokerHouseId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BrokerHouseId))
	}
	l = len(m.BranchType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBranchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBranchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.BrokerHouseId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BrokerHouseId))
	}
	l = len(m.BranchType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBranchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBranchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBranchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.Branches) > 0 {
		for _, e := range m.Branches {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBranchesResponseBranchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.BrokerHouseId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BrokerHouseId))
	}
	l = len(m.BranchType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBranchByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBranchByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsActive {
		n += 2
	}
	if m.BrokerHouseId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.BrokerHouseId))
	}
	l = len(m.BranchType)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBranchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBranchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBrokerHouseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrokerHouseName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBrokerHouseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrokerHouseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrokerHouseName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBrokerHouseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerHousesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerHousesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.BrokerHouses) > 0 {
		for _, e := range m.BrokerHouses {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerHousesResponseBrokerHouseList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrokerHouseName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerHouseByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBrokerHouseByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrokerHouseName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.TelephoneNumber)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.ValidCurrency)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrokerHouseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBrokerHouseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TeamId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TeamId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.MappedTrader) > 0 {
		for _, e := range m.MappedTrader {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderMapResponse_TraderMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TeamId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.TradersTeam) > 0 {
		for _, e := range m.TradersTeam {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTraderTeamResponse_TraderTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaginationInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageToken != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PageToken))
	}
	if m.PageSize != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaginationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfPageToken != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.SelfPageToken))
	}
	if m.FirstPageToken != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.FirstPageToken))
	}
	if m.NextPageToken != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.NextPageToken))
	}
	if m.PreviousPageToken != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.PreviousPageToken))
	}
	if m.TotalPageCount != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TotalPageCount))
	}
	if m.TotalRecordCount != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TotalRecordCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderTwsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TwsId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTraderTwsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderTwsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TwsId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTraderTwsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTradersTwsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTradersTwsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.TradersTws) > 0 {
		for _, e := range m.TradersTws {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTradersTwsMapResponse_TraderTws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TwsId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TwsId))
	}
	if m.TraderId != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.TraderId))
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderTwsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTraderTwsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTwsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwsCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTwsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTwsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	l = len(m.TwsCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTwsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTwsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaginationRequest != nil {
		l = m.PaginationRequest.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTwsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if len(m.Tws) > 0 {
		for _, e := range m.Tws {
			l = e.Size()
			n += 1 + l + sovOmsUserManagement(uint64(l))
		}
	}
	if m.PaginationResponse != nil {
		l = m.PaginationResponse.Size()
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTwsResponseTwsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	l = len(m.TwsCode)
	if l > 0 {
		n += 1 + l + sovOmsUserManagement(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Status))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTwsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTwsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOmsUserManagement(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOmsUserManagement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOmsUserManagement(x uint64) (n int) {
	return sovOmsUserManagement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateEmployeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmployeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmployeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Designation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Designation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEmployeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmployeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmployeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Designation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Designation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Designation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Designation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrokerAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrokerAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrokerAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolatedUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolatedUser = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrokerAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrokerAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrokerAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrokerAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrokerAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrokerAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolatedUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolatedUser = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrokerAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrokerAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrokerAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerAdminByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerAdminByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerAdminByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerAdminByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerAdminByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerAdminByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolatedUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolatedUser = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrokerAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrokerAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrokerAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrokerAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrokerAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrokerAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			m.BranchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvestorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvestorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvestorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserWithInvestorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserWithInvestorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserWithInvestorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTwsId", wireType)
			}
			m.PrimaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvestorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvestorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvestorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Investors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Investors = append(m.Investors, &UserWithInvestorType{})
			if err := m.Investors[len(m.Investors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvestorByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvestorByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvestorByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvestorByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvestorByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvestorByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTwsId", wireType)
			}
			m.PrimaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInvestorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInvestorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInvestorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTwsId", wireType)
			}
			m.PrimaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryTwsId", wireType)
			}
			m.SecondaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInvestorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInvestorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInvestorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateInvestorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateInvestorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateInvestorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLogin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTwsId", wireType)
			}
			m.PrimaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryTwsId", wireType)
			}
			m.SecondaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTrade = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateInvestorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateInvestorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateInvestorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTwsId", wireType)
			}
			m.PrimaryTwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapRolePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapRolePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapRolePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapRolePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapRolePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapRolePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapRolePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapRolePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapRolePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapRolePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapRolePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapRolePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapRolePermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapRolePermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapRolePermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapRolePermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapRolePermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapRolePermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedPermissionRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappedPermissionRoles = append(m.MappedPermissionRoles, &GetMapRolePermissionsResponseMappedRoleList{})
			if err := m.MappedPermissionRoles[len(m.MappedPermissionRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapRolePermissionsResponseMappedRoleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mappedRoleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mappedRoleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapRolePermissionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapRolePermissionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapRolePermissionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapRolePermissionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapRolePermissionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapRolePermissionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolesAndPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RolesAndPermissions = append(m.RolesAndPermissions, &RolesAndPermissions{})
			if err := m.RolesAndPermissions[len(m.RolesAndPermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolesAndPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolesAndPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolesAndPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapRolePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapRolePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapRolePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapRolePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapRolePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapRolePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapUserRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapUserRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapUserRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapUserRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapUserRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapUserRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapUserRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapUserRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapUserRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapUserRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapUserRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapUserRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedUserRoleLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappedUserRoleLists = append(m.MappedUserRoleLists, &GetMapUserRolesResponseMappedUserRoleList{})
			if err := m.MappedUserRoleLists[len(m.MappedUserRoleLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapUserRolesResponseMappedUserRoleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mappedUserRoleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mappedUserRoleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapUserRoleByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapUserRoleByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapUserRoleByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapUserRoleByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapUserRoleByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapUserRoleByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapUserRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapUserRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapUserRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapUserPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapUserPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapUserPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRevoked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMapUserPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMapUserPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMapUserPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapUserPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapUserPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapUserPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRevoked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapUserPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapUserPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapUserPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPermissionsByUserIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPermissionsByUserIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPermissionsByUserIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPermissionsByUserIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPermissionsByUserIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPermissionsByUserIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPermissions = append(m.UserPermissions, &GetUserPermissionsByUserIdResponse_UserPermissions{})
			if err := m.UserPermissions[len(m.UserPermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPermissionsByUserIdResponse_UserPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapUserPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapUserPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapUserPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMapUserPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMapUserPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMapUserPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &GetRolesResponse_RoleList{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRolesResponse_RoleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, &GetPermissionsResponse_PermissionList{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsResponse_PermissionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuditLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuditLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuditLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptById", wireType)
			}
			m.AttemptById = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptById |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptByType", wireType)
			}
			m.AttemptByType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptByType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= HTTPMethods(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Struct{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestBody == nil {
				m.RequestBody = &types.Struct{}
			}
			if err := m.RequestBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseBody == nil {
				m.ResponseBody = &types.Struct{}
			}
			if err := m.ResponseBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuditLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuditLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuditLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuditLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuditLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuditLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuditLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuditLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuditLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditLogs = append(m.AuditLogs, &GetAuditLogsResponseAuditLogList{})
			if err := m.AuditLogs[len(m.AuditLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuditLogsResponseAuditLogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auditLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auditLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptById", wireType)
			}
			m.AttemptById = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptById |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptByType", wireType)
			}
			m.AttemptByType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptByType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= HTTPMethods(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Struct{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestBody == nil {
				m.RequestBody = &types.Struct{}
			}
			if err := m.RequestBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseBody == nil {
				m.ResponseBody = &types.Struct{}
			}
			if err := m.ResponseBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuditLogByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuditLogByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuditLogByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuditLogByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuditLogByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuditLogByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptById", wireType)
			}
			m.AttemptById = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptById |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptByType", wireType)
			}
			m.AttemptByType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptByType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= HTTPMethods(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Struct{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestBody == nil {
				m.RequestBody = &types.Struct{}
			}
			if err := m.RequestBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseBody == nil {
				m.ResponseBody = &types.Struct{}
			}
			if err := m.ResponseBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBranchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBranchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBranchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseId", wireType)
			}
			m.BrokerHouseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerHouseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBranchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBranchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBranchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBranchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBranchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBranchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseId", wireType)
			}
			m.BrokerHouseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerHouseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBranchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBranchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBranchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBranchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBranchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBranchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBranchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBranchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBranchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branches = append(m.Branches, &GetBranchesResponseBranchList{})
			if err := m.Branches[len(m.Branches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBranchesResponseBranchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: branchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: branchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseId", wireType)
			}
			m.BrokerHouseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerHouseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBranchByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBranchByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBranchByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBranchByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBranchByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBranchByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseId", wireType)
			}
			m.BrokerHouseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerHouseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBranchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBranchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBranchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBranchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBranchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBranchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrokerHouseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrokerHouseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrokerHouseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerHouseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrokerHouseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrokerHouseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrokerHouseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrokerHouseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrokerHouseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrokerHouseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerHouseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBrokerHouseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBrokerHouseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBrokerHouseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerHousesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerHousesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerHousesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerHousesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerHousesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerHousesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerHouses = append(m.BrokerHouses, &GetBrokerHousesResponseBrokerHouseList{})
			if err := m.BrokerHouses[len(m.BrokerHouses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerHousesResponseBrokerHouseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: brokerHouseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: brokerHouseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerHouseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerHouseByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerHouseByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerHouseByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBrokerHouseByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBrokerHouseByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBrokerHouseByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerHouseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerHouseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelephoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelephoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrokerHouseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrokerHouseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrokerHouseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBrokerHouseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBrokerHouseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBrokerHouseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedTrader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappedTrader = append(m.MappedTrader, &GetTraderMapResponse_TraderMap{})
			if err := m.MappedTrader[len(m.MappedTrader)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderMapResponse_TraderMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraderMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraderMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraderTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraderTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradersTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradersTeam = append(m.TradersTeam, &GetTraderTeamResponse_TraderTeam{})
			if err := m.TradersTeam[len(m.TradersTeam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraderTeamResponse_TraderTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraderTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraderTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginationInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginationInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginationInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			m.PageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfPageToken", wireType)
			}
			m.SelfPageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfPageToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPageToken", wireType)
			}
			m.FirstPageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPageToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			m.NextPageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPageToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPageToken", wireType)
			}
			m.PreviousPageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPageToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPageCount", wireType)
			}
			m.TotalPageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPageCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecordCount", wireType)
			}
			m.TotalRecordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecordCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderTwsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderTwsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderTwsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsId", wireType)
			}
			m.TwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTraderTwsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTraderTwsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTraderTwsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderTwsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderTwsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderTwsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsId", wireType)
			}
			m.TwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTraderTwsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTraderTwsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTraderTwsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTradersTwsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTradersTwsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTradersTwsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTradersTwsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTradersTwsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTradersTwsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradersTws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradersTws = append(m.TradersTws, &GetTradersTwsMapResponse_TraderTws{})
			if err := m.TradersTws[len(m.TradersTws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTradersTwsMapResponse_TraderTws) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraderTws: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraderTws: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsId", wireType)
			}
			m.TwsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			m.TraderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderTwsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderTwsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderTwsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTraderTwsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTraderTwsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTraderTwsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTwsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTwsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTwsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTwsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTwsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTwsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTwsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTwsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTwsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTwsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTwsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTwsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRequest == nil {
				m.PaginationRequest = &PaginationInfoRequest{}
			}
			if err := m.PaginationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tws = append(m.Tws, &GetTwsResponseTwsList{})
			if err := m.Tws[len(m.Tws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationResponse == nil {
				m.PaginationResponse = &PaginationInfoResponse{}
			}
			if err := m.PaginationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwsResponseTwsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: twsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: twsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TwsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTwsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTwsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTwsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTwsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTwsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTwsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmsUserManagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmsUserManagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOmsUserManagement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOmsUserManagement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmsUserManagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOmsUserManagement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOmsUserManagement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOmsUserManagement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOmsUserManagement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOmsUserManagement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOmsUserManagement = fmt.Errorf("proto: unexpected end of group")
)
